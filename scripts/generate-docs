#!/usr/bin/env python3
import json
import sys
import os
import argparse
import shutil
import subprocess
import fnmatch
from pathlib import Path

parser = argparse.ArgumentParser()
parser.add_argument("--action", default="none", choices=["build", "deploy", "none"], 
                    help="mkdocs action to perform after generating documentation")
parser.add_argument("--overwrite", action="store_true")

args = parser.parse_args()
overwrite = True

rootfolder = Path(sys.argv[0]).absolute().parent.parent
assert (rootfolder/"mkdocs.yml").exists()


def get_manifests(exclude="*template*"):
    """
    returns a list of Paths
    """
    root = rootfolder
    manifests = (root/"src").glob("**/manifest.json")
    manifests = [m for m in manifests if not fnmatch.fnmatch(str(m), exclude)]
    return manifests

def make_indices(destdir, mode="wiki"):
    if mode == "wiki":
        indexname = "Home"
    elif mode == "mkdocs":
        indexname = "index"
    else:
        raise ValueError("mode should be wiki or mkdocs")
    root = rootfolder
    outfile = destdir/f"{indexname}.md"
    print(f"Calling _generate_index with mode: {mode}, outfile: {outfile}")
    subprocess.call([root/"scripts"/"_generate_index.py",
                     "--mode", mode,
                     "--outfile", outfile])
    
def fill_manual_pages():
    root = rootfolder
    subprocess.call([root / "scripts" / "fill-manual-pages"])

    
def find_manual_pages(opcodes):
    """ for each opcode find a file opcode.md inside rootfolder (recursively) """
    mdopcodes = {opcode + ".md" for opcode in opcodes}
    return [md for md in Path(rootfolder/"src").glob("**/*.md") 
            if md.name in mdopcodes]
    

def find_opcodes():
    """ find opcodes based on the manifest"""
    manifests = get_manifests()
    opcodes = set()
    for manifest in manifests:
        try:
            with open(str(manifest)) as f:
                d = json.load(f)
        except json.decoder.JSONDecodeError:
            print(f"Could not decode manifest {manifest}")
            continue
        opcodes_in_manifest = d.get("opcodes")
        if opcodes_in_manifest:
            opcodes.update(opcodes_in_manifest)
    return opcodes
 
def copyall(files, dest):
    if files is None:
        return 
    for f in files:
        print(f"copying {f} to {dest}")
        shutil.copy(f, dest)

def copyrec(srcdir, destdir):
    if os.path.exists(destdir):
        shutil.rmtree(destdir)
    shutil.copytree(srcdir, destdir)
    
def build_mkdocs(manpages):
    # we first build everything in a build dir, to be
    # able to check a build

    # where to build the mkdocs structure 
    build_dir = rootfolder/"docs-build"
    
    # where to put the generated site, as expected my mkdocs
    dest_dir = rootfolder/"docs"
    
    # where are the .md original files
    mkdocs_dir = rootfolder/"mkdocs"

    copyrec(mkdocs_dir, build_dir)
    make_indices(destdir=build_dir, mode="mkdocs")
    
    opcodes_dir = build_dir/"opcodes"
    opcodes_dir.mkdir(parents=True, exist_ok=True)
    copyall(manpages, opcodes_dir)

    for f in build_dir.glob("**/*.md_"):
        os.remove(f)

    if dest_dir.exists() and not overwrite:
        print()
        print(f"Error: destination dir exists ({str(dest_dir)}).")
        print("Either remove it or use the --overwrite flag")
        print()
        return

    copyrec(build_dir, dest_dir)
    
    print()
    print("To put decumentation online:")
    print("    mkdocs gh-deploy")
    print()
    print("To build documentation locally:")
    print("    mkdocs build")
    print()
    print("To serve documentation locally:")
    print("    mkdocs serve")


if __name__ == "__main__":
    fill_manual_pages()
    opcodes = find_opcodes()
    manpages = find_manual_pages(opcodes)
    # build_wiki(rootfolder, manpages, wikirepo=args.wikirepo)  
    build_mkdocs(manpages)
    os.chdir(rootfolder)
    if args.action == "build":
        os.system("mkdocs build")
    elif args.action == "deploy":
        os.system("mkdocs gh-deploy")

