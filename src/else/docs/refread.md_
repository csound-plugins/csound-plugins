# refread

## Abstract

Create a **read-only** view on the original object

## Description


`ref` and `refread` implement a mechanism to forward an object across events,
to reference objects inside other objects, etc. A `ref` generates a handle
wrapping the given object and returns an integer which maps to this handle. This
handle index can then be passed to any event, placed inside a collection (array,
dict, channel, etc.).

!!! Note

    `deref`, `refread` **does not** create an alias of the original object
    but generates a **read only** *copy* of it.


```csound

instr 1
  asig vco2 0.5, 1000
  kcutoff linseg 4000, p3, 200
  schedule 2, 0, p3, ref(asig), ref(kcutoff)
endin

instr 2
  ain     refread p4
  kcutoff refread p5
  iQ = 0.8
  asig K35_lpf ain, kcutoff, iQ
  outs asig, asig
  ; the references will be deallocated after this event finishes
endin

```


## Syntax

    kvar refread iref
    avar refread iref


### Arguments

* `iref`: a reference index as created via `ref`

### Output

* `xvar`: a read-only view over the object originally passed to `ref`


## Execution Time

* Init
* Performance

## Examples

{example}


## See also

* [ref](ref.md)
* [defer](defer.md)
* [schedule](http://www.csounds.com/manual/html/schedule.html)
* [event](http://www.csounds.com/manual/html/event.html)
* [release](http://www.csounds.com/manual/html/release.html)

## Credits

Eduardo Moguillansky, 2019
