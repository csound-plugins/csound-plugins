# atstop

## Abstract

Schedule an instrument at the end of the current instrument

## Description


`atstop` can be used to schedule an instrument event as the last action
of a given instrument, during the process of being deallocated. This can
be used to notify when the note has actually stopped, or to schedule a 
chain of events, free any table or dict allocated, etc. The advantage
over the `release` opcode is that `atstop` is guaranteed to be run 
after the note has stopped, so there is no danger in deallocating resources
being used by this note, there are no conflicts with release envelopes, etc.
If any k-variables are passed to the scheduled instr these will reflect the 
changes at the end of the instr.

!!! Note "Release time vs deinit time"

    The event is not scheduled at *release* time (see below "Release time vs Deinit time")
    but at the moment the note is freed.

    **Release time** is when the note is within its *release phase*, which will only happen 
    if the note has an envelope with a release segment (like `linsegr`), or if it has 
    setup extra time with `xtratim`. The opcode `release` can be used to query if the 
    current note is being released. The instrument keeps running in release phase as 
    long as the release part of the envelope is finished or the extra time allocated
    via `xtratim` is through. 
    
    **Deinit time** is the moment the note is actually being freed, so the instrument is
    not running anymore at this point.  

## Syntax

```csound

atstop instrnum   [, idelay=0, idur=-1, p4, p5, ...]
atstop Sinstrname [, idelay=0, idur=-1, p4, p5, ...]

```          

> `atstop` executes only at **init time**. 
    
## Arguments

* `instrnum` / `Sintrname`: the number or the name of the instr to be scheduled
* `idelay`: the time offset **after** the stop time of this note to start this instrument
* `idur`: the duration of the event
* `p4`, `p5`, ...: any other p-arguments, as used with similar opcodes like `schedule`, `event`, etc.
    They can be any i-, k- or S- variable. The scheduled instr will access them, as p-args.

## Execution Time

* Init 

## Examples

{example}


## See also

* [defer](defer.md)
* [schedule](http://www.csounds.com/manual/html/schedule.html)
* [event](http://www.csounds.com/manual/html/event.html)
* [release](http://www.csounds.com/manual/html/release.html)
* [xtratim](http://www.csounds.com/manual/html/xtratim.html)

## Credits

Eduardo Moguillansky, 2019