# ref

## Abstract

Get a reference to a variable

## Description


`ref` and `deref` implement a mechanism to pass a reference to an array,
allowing to share it across instruments, opcodes, etc. A ref
is a proxy to an axisting array. Refs are reference counted and
deallocate themselves when out of scope and not being referenced by any
object. It makes it possible to pass arrays by reference to user defined
opcodes, allowing to modify an array in place, to skip copying memory, etc.

### Arrays

```csound

iXs[] fillarray 0, 1, 2, 3, 4
iref  ref iXs
iYs[] deref iref
```

In the case above, `iYs` shares the same memory as `iXs` and any modification in
one array will be visible in the other.

### Moving arrays

It is possible for the `ref` opcode to own the memory of the array. This can be
used for the cases where a ref is passed to an event which is scheduled at a
point in time later that the end of the event which owns the array. In this case
the array if moved to a global space and owns the memory until no other events
are referencing it.

## Syntax

    iref ref xArray, [imove=0]

## Arguments

* `xArray`: the array to be referenced
* `move`: for arrays, it is possible to specify that the reference owns the
  memory. This is useful for the *niche* case where a reference is passed to an
  event scheduled at a point in time later that the end of the current event.
  Without this, the ref would go out of scope before the `deref` takes place.

## Output

* `iref`: an integer identifying the reference handle.

## Execution Time

* Init

## Examples

{example}


## See also

* [deref](deref.md)
* [refread](refread.md)
* [defer](defer.md)
* [schedule](http://www.csounds.com/manual/html/schedule.html)
* [event](http://www.csounds.com/manual/html/event.html)
* [release](http://www.csounds.com/manual/html/release.html)

## Credits

Eduardo Moguillansky, 2019
