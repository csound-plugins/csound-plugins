# memview

## Abstract

Create a view into a table or another array

## Description

memview makes it possible to operate on a table as if it
were an array (using any array opcode), or to operate on a slice
of an array without copying the underlying memory. It can be used to
efficiently read a slice of an existing array, operate on rows of a 
2D matrix, etc.

The underlying memory is shared between the source and the view
for the duration of the event.

Using the returned array as a left-side variable is not supported. This
can result in reallocation/resizing of the array, which in this
case is not allowed since the underlying memory does not belong to
the array. **Using it in this way results in undefined behaviour**

The same holds true for creating a view from a ftable and freeing
the ftable during the lifetime of the view.

## Syntax

```csound

iView[]  memview ift,      [, istart=0, iend=0]
kView[]  memview iSource[] [, istart=0, iend=0]
kView[]  memview kSource[] [, istart=0, iend=0]

```

### Arguments

* `ift`: the source ftable
* `iSource[] / kSource[]`: the source array
* `istart`: the start index of the view (default=0)
* `iend`: the end index of the view (non inclusive, default=end of
          the table / array)

### Output

* `iView[]` / `kView[]`: the array view

### Execution time

* Init

## Examples

{example}

## See also


* [copya2ftab](https://csound.com/docs/manual/copya2ftab.html)
* [slicearray](https://csound.com/docs/manual/slicearray.html)
* [tabrowlin](https://csound.com/docs/manual/tabrowlin.html)
* [ref](ref.md)
* [deref](deref.md)

## Credits

Eduado Moguillansky, 2019
