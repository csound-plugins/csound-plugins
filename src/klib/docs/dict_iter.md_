# dict_iter

## Abstract

Iterate over the key-value pairs of a dict 

## Description

Iterates over the key:value pairs. Whenever kreset is 1, iteration starts over
If kreset is -1 (the default), iteration is autotriggered when it reaches
the end of the collection.
    
**NB**: This opcode is meant to be used in a loop at k-time

## Syntax

    xkey, xvalue, kidx  dict_iter idict [, kreset = -1]

`dict_loop` executes only at **performance time**. 
    
## Arguments

* `idict`: the handle to the dict as returned by [dict_new](dict_new.md)
* `kreset`: the reset policy
  * `kreset = 0`: no reset, iteration stops at the end of the collection is can't start over. 
                  This makes sure that there will be max. 1 iteration within this note
  * `kreset = 1` (default): iteration is started over at every k-cycle
  * `kreset = 2`: Reset at the end of iteration

### Output

* `xkey` / `xvalue`: the key and value for this pair. The types are determined by the type of
  this dict, as defined via `dict_new`
* `kidx`: the index of this pair. It will be 0 for the first pair, 1 for the second, etc.
  When no more pairs, `kidx` will be -1. In this case, xkey and xvalue do not hold valid values
  
## Usage

There are two ways to use `dict_iter`, either in a `while` loop, or using gotos

```csound

; iterate in a while loop
kidx = 0
while kidx < dict_size(idict)-1 do
    Skey, kvalue, kidx dict_iter idict
    printf "key: %s  value: %f", kidx, Skey, kvalue
od

; iterate with goto
loop:
    Skey, kvalue, kidx dict_iter idict
    if kidx == -1 goto break
    printf "key: %s  value: %f", kidx, Skey, kvalue
    kgoto loop
break:
    
```

## Examples

{example}


## See also

* [dict_new](dict_new.md)
* [dict_size](dict_size.md)


## Credits

Eduardo Moguillansky, 2019
