{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Csound Plugins Welcome to the csound-plugins documentation This is a collection of plugins for csound Installation See Installation poly Multiple (parallel or sequential) instances of an opcode poly : poly creates and controls multiple parallel version of an opcode polyseq : polyseq creates and controls multiple sequential version of an opcode poly0 : poly0 creates and controls multiple parallel version of an opcode with no outputs defer : Run an opcode at the end of current event klib A hashtable for csound dict_new : Create a hashtable dict_dump : Dumps the contents of this dict as a string dict_free : Free a hashtable dict_get : Get a value from a hashtable dict_geti : Get a string value from a hashtable at init time dict_loadstr : Creates and fills a new dict from a string definition dict_set : Set a value from a hashtable dict_size : Returns the number of key:value pairs in a dict dict_query : Query different properties of a dict dict_exists : Returns 1 if the dict exists, 0 otherwise dict_print : Prints the contents of a dict dict_iter : Iterate over the key-value pairs of a dict dict_del : Remove a key:value pair from a hashtable sref : Insert a string into a global registry and return a reference to it sderef : Retrieves a read-only string from the cache pool_new : Create an empty pool pool_gen : Create a pool and fill it with values pool_pop : Pop (get) an item from a pool pool_push : Push an item into a pool pool_size : Returns the size of a pool pool_capacity : Returns the capacity of a pool pool_at : Returns the item of a pool at a given index pool_isfull : Returns 1 if the pool is full jsfx jsfx support for csound jsfx : Instantiates and runs a jsfx script jsfx_new : Instantiates a jsfx script jsfx_play : Processes audio through a jsfx script jsfx_getslider : Gets a slider value of a jsfx instance jsfx_setslider : Sets the slider values of a jsfx script tubeharmonics : A distortion with control for odd/even harmonics pathtools Cross-platform path handling and string opcodes findFileInPath : Find a file inside the search paths of the csound environment getEnvVar : Get the value of an environment variable pathAbsolute : Returns the absolute path of a file pathIsAbsolute : Returns 1 if the path of a file is absolute pathJoin : Join two parts of a path according to the current platform pathNative : Convert a path to its native version pathSplit : Split a path into directory and basename pathSplitk : Split a path into directory and basename at perf-time pathSplitExt : Split a path into prefix and extension pathSplitExtk : Split a path into prefix and extension at performance time scriptDir : Get the directory of the loaded orc/csd file sysPlatform : Get a string description of the current system platform strsplit : Split a string at a given separator strjoin : Concatenate any number of strings beosc Band-enhanced oscillators implementing the sine+noise synthesis model beosc : Band-Enhanced Oscillator beadsynt : Band-Enhanced Oscillator-Bank getrowlin : opy a row from a 2D array or table, with interpolation between rows tabrowlin : Copy a row from an f-table to another, interpolating between rows sndmeta opcodes using libsndfile filereadmeta : Read metadata from a soundfile else Miscellaneous plugins accum : Simple accumulator of scalar values atstop : Schedule an instrument at the end of the current instrument bisect : Returns the fractional index of a value within a sorted array / tab crackle : generates noise based on a chaotic equation deref : Dereference a previously created reference to a variable detectsilence : Detect when input falls below an amplitude threshold diode_ringmod : A ring modulator with optional non-linearities extendarray : Extend one array with the contents of a second array, in place fileexists : Returns 1 if a file exists and can be read findarray : Find an element in an array frac2int : Convert the fractional part of a number into an integer ftfill : create a table and fill it with values (like fillarray but for f-tables) ftfind : Find an element in a table ftnew : creates a new table of a given size ftsetparams : Set metadata parameters of a table, as if it was loaded via GEN1 initerror : Throws an error message at init interp1d : Interpolate between elements of an array/table lfnoise : low frequency, band-limited noise linenv : A triggerable linear envelope with sustain segment loadnpy : Load an array (of any number of dimensions) saved as a .npy file memview : Create a view into a table or another array panstereo : Stereo signal balancer perlin3 : gradient noise sound generator pread : Read pfield values from any active instrument instance pwrite : Modify pfield values of an active instrument instance ramptrig : A triggerable ramp between 0 and 1 ref : Get a reference to a variable refvalid : Queries if a reference is valid schmitt : A schmitt trigger (a comparator with hysteresis). setslice : Set a slice of an array to a given value sigmdrive : Analog \"soft clipping\" distortion by applying non-linear transfer functions. standardchaos : Standard map chaotic generator throwerror : Throws an error message at performance or init uniqinstance : Return an fractional instrument number which is not in use zeroarray : Zero all elements in an array risset Cross-platform path handling and string opcodes risset : Get information from risset's package manager","title":"Csound Plugins"},{"location":"index.html#csound-plugins","text":"Welcome to the csound-plugins documentation This is a collection of plugins for csound","title":"Csound Plugins"},{"location":"index.html#installation","text":"See Installation","title":"Installation"},{"location":"index.html#poly","text":"Multiple (parallel or sequential) instances of an opcode poly : poly creates and controls multiple parallel version of an opcode polyseq : polyseq creates and controls multiple sequential version of an opcode poly0 : poly0 creates and controls multiple parallel version of an opcode with no outputs defer : Run an opcode at the end of current event","title":"poly"},{"location":"index.html#klib","text":"A hashtable for csound dict_new : Create a hashtable dict_dump : Dumps the contents of this dict as a string dict_free : Free a hashtable dict_get : Get a value from a hashtable dict_geti : Get a string value from a hashtable at init time dict_loadstr : Creates and fills a new dict from a string definition dict_set : Set a value from a hashtable dict_size : Returns the number of key:value pairs in a dict dict_query : Query different properties of a dict dict_exists : Returns 1 if the dict exists, 0 otherwise dict_print : Prints the contents of a dict dict_iter : Iterate over the key-value pairs of a dict dict_del : Remove a key:value pair from a hashtable sref : Insert a string into a global registry and return a reference to it sderef : Retrieves a read-only string from the cache pool_new : Create an empty pool pool_gen : Create a pool and fill it with values pool_pop : Pop (get) an item from a pool pool_push : Push an item into a pool pool_size : Returns the size of a pool pool_capacity : Returns the capacity of a pool pool_at : Returns the item of a pool at a given index pool_isfull : Returns 1 if the pool is full","title":"klib"},{"location":"index.html#jsfx","text":"jsfx support for csound jsfx : Instantiates and runs a jsfx script jsfx_new : Instantiates a jsfx script jsfx_play : Processes audio through a jsfx script jsfx_getslider : Gets a slider value of a jsfx instance jsfx_setslider : Sets the slider values of a jsfx script tubeharmonics : A distortion with control for odd/even harmonics","title":"jsfx"},{"location":"index.html#pathtools","text":"Cross-platform path handling and string opcodes findFileInPath : Find a file inside the search paths of the csound environment getEnvVar : Get the value of an environment variable pathAbsolute : Returns the absolute path of a file pathIsAbsolute : Returns 1 if the path of a file is absolute pathJoin : Join two parts of a path according to the current platform pathNative : Convert a path to its native version pathSplit : Split a path into directory and basename pathSplitk : Split a path into directory and basename at perf-time pathSplitExt : Split a path into prefix and extension pathSplitExtk : Split a path into prefix and extension at performance time scriptDir : Get the directory of the loaded orc/csd file sysPlatform : Get a string description of the current system platform strsplit : Split a string at a given separator strjoin : Concatenate any number of strings","title":"pathtools"},{"location":"index.html#beosc","text":"Band-enhanced oscillators implementing the sine+noise synthesis model beosc : Band-Enhanced Oscillator beadsynt : Band-Enhanced Oscillator-Bank getrowlin : opy a row from a 2D array or table, with interpolation between rows tabrowlin : Copy a row from an f-table to another, interpolating between rows","title":"beosc"},{"location":"index.html#sndmeta","text":"opcodes using libsndfile filereadmeta : Read metadata from a soundfile","title":"sndmeta"},{"location":"index.html#else","text":"Miscellaneous plugins accum : Simple accumulator of scalar values atstop : Schedule an instrument at the end of the current instrument bisect : Returns the fractional index of a value within a sorted array / tab crackle : generates noise based on a chaotic equation deref : Dereference a previously created reference to a variable detectsilence : Detect when input falls below an amplitude threshold diode_ringmod : A ring modulator with optional non-linearities extendarray : Extend one array with the contents of a second array, in place fileexists : Returns 1 if a file exists and can be read findarray : Find an element in an array frac2int : Convert the fractional part of a number into an integer ftfill : create a table and fill it with values (like fillarray but for f-tables) ftfind : Find an element in a table ftnew : creates a new table of a given size ftsetparams : Set metadata parameters of a table, as if it was loaded via GEN1 initerror : Throws an error message at init interp1d : Interpolate between elements of an array/table lfnoise : low frequency, band-limited noise linenv : A triggerable linear envelope with sustain segment loadnpy : Load an array (of any number of dimensions) saved as a .npy file memview : Create a view into a table or another array panstereo : Stereo signal balancer perlin3 : gradient noise sound generator pread : Read pfield values from any active instrument instance pwrite : Modify pfield values of an active instrument instance ramptrig : A triggerable ramp between 0 and 1 ref : Get a reference to a variable refvalid : Queries if a reference is valid schmitt : A schmitt trigger (a comparator with hysteresis). setslice : Set a slice of an array to a given value sigmdrive : Analog \"soft clipping\" distortion by applying non-linear transfer functions. standardchaos : Standard map chaotic generator throwerror : Throws an error message at performance or init uniqinstance : Return an fractional instrument number which is not in use zeroarray : Zero all elements in an array","title":"else"},{"location":"index.html#risset","text":"Cross-platform path handling and string opcodes risset : Get information from risset's package manager","title":"risset"},{"location":"Contributing.html","text":"Contributing To submit an opcode clone this repository and make a pull request Organisation An opcode is normally implemented as part of a library, to allow for different versions and related opcodes to share functionality. Each library lives in its own directory. The tree can be structured as follows: mylib/ CMakeLists.txt manifest.json [ README.md ] src/ mylib.c examples/ foo.csd bar.csd doc/ foo.md bar.md For each opcode defined in mylib.c there should be an example opcode.csd and a manual page opcode.md . Optionally it is possible to include a README.md where a short description of the opcodes in this library is given Put your tree under src and you should be able to build your plugin. Build We use cmake as a build tool. For simple opcodes with no extra dependencies, a simple CMakeLists.txt would suffice: make_plugin(mylib src/mylib.c) Installation At the root folder of this repository, do mkdir build cd build cmake .. cmake --build . cmake --install . Manifest A manifest is used to automate documentation of the opcodes (wiki, pdf documentation, etc). The manifest (named manifest.json) is a .json file. It should have the minimal form: { \"name\" : \"mylib\" , \"opcodes\" : [ \"foo\" , \"bar\" ], \"author\" : \"name\" , \"author_email\" : \"name@email.com\" , \"license\" : \"LGPL\" , \"description\" : \"Description of this package\" , \"url\" : \"http://github.com/...\" } In this case, two opcodes are defined, and these names should correspond to the .csd example living inside of the examples folder, and a .md file living inside the doc folder. A risset.json file is a viable manifest.json file. Just create a symlink: ln -s risset.json manifest.json","title":"Contributing"},{"location":"Contributing.html#contributing","text":"To submit an opcode clone this repository and make a pull request","title":"Contributing"},{"location":"Contributing.html#organisation","text":"An opcode is normally implemented as part of a library, to allow for different versions and related opcodes to share functionality. Each library lives in its own directory. The tree can be structured as follows: mylib/ CMakeLists.txt manifest.json [ README.md ] src/ mylib.c examples/ foo.csd bar.csd doc/ foo.md bar.md For each opcode defined in mylib.c there should be an example opcode.csd and a manual page opcode.md . Optionally it is possible to include a README.md where a short description of the opcodes in this library is given Put your tree under src and you should be able to build your plugin.","title":"Organisation"},{"location":"Contributing.html#build","text":"We use cmake as a build tool. For simple opcodes with no extra dependencies, a simple CMakeLists.txt would suffice: make_plugin(mylib src/mylib.c)","title":"Build"},{"location":"Contributing.html#installation","text":"At the root folder of this repository, do mkdir build cd build cmake .. cmake --build . cmake --install .","title":"Installation"},{"location":"Contributing.html#manifest","text":"A manifest is used to automate documentation of the opcodes (wiki, pdf documentation, etc). The manifest (named manifest.json) is a .json file. It should have the minimal form: { \"name\" : \"mylib\" , \"opcodes\" : [ \"foo\" , \"bar\" ], \"author\" : \"name\" , \"author_email\" : \"name@email.com\" , \"license\" : \"LGPL\" , \"description\" : \"Description of this package\" , \"url\" : \"http://github.com/...\" } In this case, two opcodes are defined, and these names should correspond to the .csd example living inside of the examples folder, and a .md file living inside the doc folder. A risset.json file is a viable manifest.json file. Just create a symlink: ln -s risset.json manifest.json","title":"Manifest"},{"location":"Installation.html","text":"Installation Compiled Binaries Download binaries for all platforms Download from a tagged build ( v1.x.y ) for a stable release, or use the development build (\"latest\"), which contains the latest version. Note A csound plugin is a shared library ( .dylib in macOS, .so in Linux, .dll in windows) which is loaded by csound and contains multiple opcodes. In csound >= 6.16, place the plugins in the user plugins folder (create the folder if it does not exist): macOS : ~/Library/csound/6.0/plugins64 Linux : ~/.local/lib/csound/6.0/plugins64 Windows : C:\\Users\\<User>\\AppData\\Local\\csound\\6.0\\plugins64 For previous versions, put the plugins along csound's own plugins (this folder should already exist and contain a multitude of files): macOS : /Library/Frameworks/CsoundLib64.framework/Versions/6.0/Resources/Opcodes64 if csound was installed via the official installer, or ~/Library/Frameworks/CsoundLib64.framework/Versions/6.0/Resources/Opcodes64 if installed from source Linux : /usr/local/lib/csound/plugins64-6.0 if installed from source, /usr/lib/csound/plugins64-6.0 if installed by the package manager Windows : C:\\Program Files\\Csound6_x64\\plugins64 Installation from source The source lives at https://github.com/csound-plugins/csound-plugins Linux sudo apt-get install libsndfile1-dev nasm git clone https://github.com/csound-plugins/csound-plugins cd csound-plugins git submodule update --init --recursive --remote git submodule foreach git pull origin master mkdir build && cd build cmake .. cmake --build . cmake --install . MacOS brew install libsndfile curl -Ls -o nasm-2.14.02.zip 'https://www.nasm.us/pub/nasm/releasebuilds/2.14.02/macosx/nasm-2.14.02-macosx.zip' unzip nasm-2.14.02.zip export PATH=\"$(realpath nasm-2.14.02):$PATH\" git clone https://github.com/csound-plugins/csound-plugins cd csound-plugins git submodule update --init --recursive --remote git submodule foreach git pull origin master mkdir build && cd build cmake .. cmake --build . cmake --install . Windows git clone https://github.com/microsoft/vcpkg .\\vcpkg\\bootstrap-vcpkg.bat .\\vcpkg\\vcpkg integrate install .\\vcpkg\\vcpkg install libsndfile:x64-windows git submodule update --init --recursive --remote git submodule foreach git pull origin master mkdir build cd build cmake -A x64 -DBUILD_JSUSFX_OPCODES=OFF .. cmake --build . --config Release cmake --install . # This last step simply copies Release\\*.dll to \"C:\\Users\\<User>\\AppData\\Local\\csound\\6.0\\plugins64\"","title":"Installation"},{"location":"Installation.html#installation","text":"","title":"Installation"},{"location":"Installation.html#compiled-binaries","text":"Download binaries for all platforms Download from a tagged build ( v1.x.y ) for a stable release, or use the development build (\"latest\"), which contains the latest version. Note A csound plugin is a shared library ( .dylib in macOS, .so in Linux, .dll in windows) which is loaded by csound and contains multiple opcodes. In csound >= 6.16, place the plugins in the user plugins folder (create the folder if it does not exist): macOS : ~/Library/csound/6.0/plugins64 Linux : ~/.local/lib/csound/6.0/plugins64 Windows : C:\\Users\\<User>\\AppData\\Local\\csound\\6.0\\plugins64 For previous versions, put the plugins along csound's own plugins (this folder should already exist and contain a multitude of files): macOS : /Library/Frameworks/CsoundLib64.framework/Versions/6.0/Resources/Opcodes64 if csound was installed via the official installer, or ~/Library/Frameworks/CsoundLib64.framework/Versions/6.0/Resources/Opcodes64 if installed from source Linux : /usr/local/lib/csound/plugins64-6.0 if installed from source, /usr/lib/csound/plugins64-6.0 if installed by the package manager Windows : C:\\Program Files\\Csound6_x64\\plugins64","title":"Compiled Binaries"},{"location":"Installation.html#installation-from-source","text":"The source lives at https://github.com/csound-plugins/csound-plugins","title":"Installation from source"},{"location":"Installation.html#linux","text":"sudo apt-get install libsndfile1-dev nasm git clone https://github.com/csound-plugins/csound-plugins cd csound-plugins git submodule update --init --recursive --remote git submodule foreach git pull origin master mkdir build && cd build cmake .. cmake --build . cmake --install .","title":"Linux"},{"location":"Installation.html#macos","text":"brew install libsndfile curl -Ls -o nasm-2.14.02.zip 'https://www.nasm.us/pub/nasm/releasebuilds/2.14.02/macosx/nasm-2.14.02-macosx.zip' unzip nasm-2.14.02.zip export PATH=\"$(realpath nasm-2.14.02):$PATH\" git clone https://github.com/csound-plugins/csound-plugins cd csound-plugins git submodule update --init --recursive --remote git submodule foreach git pull origin master mkdir build && cd build cmake .. cmake --build . cmake --install .","title":"MacOS"},{"location":"Installation.html#windows","text":"git clone https://github.com/microsoft/vcpkg .\\vcpkg\\bootstrap-vcpkg.bat .\\vcpkg\\vcpkg integrate install .\\vcpkg\\vcpkg install libsndfile:x64-windows git submodule update --init --recursive --remote git submodule foreach git pull origin master mkdir build cd build cmake -A x64 -DBUILD_JSUSFX_OPCODES=OFF .. cmake --build . --config Release cmake --install . # This last step simply copies Release\\*.dll to \"C:\\Users\\<User>\\AppData\\Local\\csound\\6.0\\plugins64\"","title":"Windows"}]}