{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Csound Plugins","text":"<p>Welcome to the csound-plugins documentation </p> <p>This is a collection of plugins for csound</p>"},{"location":"index.html#installation","title":"Installation","text":"<p>See Installation</p>"},{"location":"index.html#pathtools","title":"pathtools","text":"<p>Cross-platform path handling and string opcodes</p> <ul> <li>findFileInPath: Find a file inside the search paths of the csound environment </li> <li>getEnvVar: Get the value of an environment variable </li> <li>pathAbsolute: Returns the absolute path of a file </li> <li>pathIsAbsolute: Returns 1 if the path of a file is absolute </li> <li>pathJoin: Join two parts of a path according to the current platform </li> <li>pathNative: Convert a path to its native version </li> <li>pathSplit: Split a path into directory and basename </li> <li>pathSplitk: Split a path into directory and basename at perf-time </li> <li>pathSplitExt: Split a path into prefix and extension </li> <li>pathSplitExtk: Split a path into prefix and extension at performance time </li> <li>scriptDir: Get the directory of the loaded orc/csd file </li> <li>sysPlatform: Get a string description of the current system platform </li> <li>strsplit: Split a string at a given separator </li> <li>strjoin: Concatenate any number of strings </li> </ul>"},{"location":"index.html#klib","title":"klib","text":"<p>A hashtable for csound</p> <ul> <li>dict_new: Create a hashtable </li> <li>dict_dump: Dumps the contents of this dict as a string </li> <li>dict_free: Free a hashtable </li> <li>dict_get: Get a value from a hashtable </li> <li>dict_geti: Get a string value from a hashtable at init time </li> <li>dict_loadstr: Creates and fills a new dict from a string definition </li> <li>dict_set: Set a value from a hashtable </li> <li>dict_size: Returns the number of key:value pairs in a dict </li> <li>dict_query: Query different properties of a dict </li> <li>dict_exists: Returns 1 if the dict exists, 0 otherwise </li> <li>dict_print: Prints the contents of a dict </li> <li>dict_iter: Iterate over the key-value pairs of a dict </li> <li>dict_del: Remove a key:value pair from a hashtable </li> <li>sref: Insert a string into a global registry and return a reference to it </li> <li>sderef: Retrieves a read-only string from the cache </li> <li>pool_new: Create an empty  pool </li> <li>pool_gen: Create a pool and fill it with values </li> <li>pool_pop: Pop (get) an item from a pool </li> <li>pool_push: Push an item into a pool </li> <li>pool_size: Returns the size of a pool </li> <li>pool_capacity: Returns the capacity of a pool </li> <li>pool_at: Returns the item of a pool at a given index </li> <li>pool_isfull: Returns 1 if the pool is full </li> </ul>"},{"location":"index.html#sndmeta","title":"sndmeta","text":"<p>opcodes using libsndfile</p> <ul> <li>filereadmeta: Read metadata from a soundfile </li> </ul>"},{"location":"index.html#risset","title":"risset","text":"<p>Opcodes to access risset package metadata</p> <ul> <li>risset: Get information from risset's package manager </li> </ul>"},{"location":"index.html#else","title":"else","text":"<p>Miscellaneous plugins</p> <ul> <li>accum: Simple accumulator of scalar values </li> <li>atstop: Schedule an instrument at the end of the current instrument </li> <li>bisect: Returns the fractional index of a value within a sorted array / tab </li> <li>crackle: generates noise based on a chaotic equation </li> <li>cuetrig: Generate a trigger at given time values </li> <li>deref: Dereference a previously created reference to a variable </li> <li>detectsilence: Detect when input falls below an amplitude threshold </li> <li>diode_ringmod: A ring modulator with optional non-linearities </li> <li>extendarray: Extend one array with the contents of a second array, in place </li> <li>fileexists: Returns 1 if a file exists and can be read </li> <li>findarray: Find an element in an array </li> <li>frac2int: Convert the fractional part of a number into an integer </li> <li>ftfill: create a table and fill it with values (like fillarray but for f-tables) </li> <li>ftfind: Find an element in a table </li> <li>ftnew: creates a new table of a given size </li> <li>ftsetparams: Set metadata parameters of a table, as if it was loaded via GEN1 </li> <li>gaintovel: Map amplitude 0-1 to velocity (0-127) </li> <li>initerror: Throws an error message at init </li> <li>interp1d: Interpolate between elements of an array/table </li> <li>lfnoise: low frequency, band-limited noise </li> <li>linenv: A triggerable linear envelope with sustain segment </li> <li>linexp: linear to exponentail interpolation </li> <li>loadnpy: Load an array (of any number of dimensions) saved as a .npy file </li> <li>memview: Create a view into a table or another array </li> <li>mtro: an accurate version of metro </li> <li>nametoinstrnum: Returns the number of a named instrument </li> <li>panstereo: Stereo signal balancer </li> <li>perlin3: gradient noise sound generator </li> <li>pread: Read pfield values from any active instrument instance </li> <li>pwrite: Modify pfield values of an active instrument instance </li> <li>pwriten: Modify pfield values of an active instrument instance created via nstance </li> <li>presetinterp: Interpolates between presets placed in a 2D plane </li> <li>ramptrig: A triggerable ramp between 0 and 1 </li> <li>ref: Get a reference to a variable </li> <li>refvalid: Queries if a reference is valid </li> <li>schmitt: A schmitt trigger (a comparator with hysteresis). </li> <li>setslice: Set a slice of an array to a given value </li> <li>sigmdrive: Analog \"soft clipping\" distortion by applying non-linear transfer functions. </li> <li>standardchaos: Standard map chaotic generator </li> <li>throwerror: Throws an error message at performance or init </li> <li>transpose: Simple delay based pitch shifter inspired on faust's transpose </li> <li>uniqinstance: Return an fractional instrument number which is not in use </li> <li>vowelsdb: A database of vowel sounds </li> <li>weightedsum: Weighted sum of multiple 1D arrays, or the rows of a 2D array </li> <li>zeroarray: Zero all elements in an array </li> <li>zerocrossing: Outputs a frequency based on the number of zero-crossings per second. </li> </ul>"},{"location":"index.html#poly","title":"poly","text":"<p>Multiple (parallel or sequential) instances of an opcode</p> <ul> <li>poly: poly creates and controls multiple parallel version of an opcode </li> <li>polyseq: polyseq creates and controls multiple sequential version of an opcode </li> <li>poly0: poly0 creates and controls multiple parallel version of an opcode with no outputs </li> <li>defer: Run an opcode at the end of current event </li> </ul>"},{"location":"index.html#jsfx","title":"jsfx","text":"<p>jsfx support for csound</p> <ul> <li>jsfx: Instantiates and runs a jsfx script </li> <li>jsfx_new: Instantiates a jsfx script </li> <li>jsfx_play: Processes audio through a jsfx script </li> <li>jsfx_getslider: Gets a slider value of a jsfx instance </li> <li>jsfx_setslider: Sets the slider values of a jsfx script </li> <li>tubeharmonics: A distortion with control for odd/even harmonics </li> </ul>"},{"location":"index.html#beosc","title":"beosc","text":"<p>Band-enhanced oscillators implementing the sine+noise synthesis model</p> <ul> <li>beosc: Band-Enhanced Oscillator </li> <li>beadsynt: Band-Enhanced Oscillator-Bank </li> <li>getrowlin: opy a row from a 2D array or table, with interpolation between rows </li> <li>tabrowlin: Copy a row from an f-table to another, interpolating between rows </li> </ul>"},{"location":"Contributing.html","title":"Contributing","text":"<p>To submit an opcode clone this repository and make a pull request</p>"},{"location":"Contributing.html#organisation","title":"Organisation","text":"<p>An opcode is normally implemented as part of a library, to allow for different versions and related opcodes to share functionality. Each library lives in its own directory. The tree can be structured as follows:</p> <pre><code>mylib/\n  CMakeLists.txt\n  risset.json\n  [ README.md ]\n  src/\n    mylib.c\n  examples/\n    foo.csd\n    bar.csd\n  doc/\n    foo.md\n    bar.md\n</code></pre> <p>For each opcode defined in mylib.c there should be an example <code>opcode.csd</code>  and a manual page <code>opcode.md</code>. Optionally it is possible to include a README.md where a short description of the opcodes in this library is given </p> <p>Put your tree under <code>src</code> and you should be able to build your plugin.</p>"},{"location":"Contributing.html#build","title":"Build","text":"<p>We use cmake as a build tool. For simple opcodes with no extra dependencies,  a simple CMakeLists.txt would suffice:</p> <pre><code>make_plugin(mylib src/mylib.c)\n</code></pre>"},{"location":"Contributing.html#installation","title":"Installation","text":"<p>At the root folder of this repository, do</p> <pre><code>mkdir build\ncd build\ncmake ..\ncmake --build .\ncmake --install .\n</code></pre>"},{"location":"Contributing.html#manifest-rissetjson","title":"Manifest (risset.json)","text":"<p>A manifest is used both to automate documentation of the opcodes (wiki, pdf documentation, etc) and make the opcode installable via risset. The manifest (named risset.json) is a .json file.  It should have the minimal form: </p> <pre><code>{\n  \"name\": \"mylib\",\n  \"version\": \"1.0.0\",\n  \"opcodes\": [\n    \"opcode1\",\n    \"opcode2\",\n    ...\n  ],\n  \"short_description\": \"A short description\",\n  \"long_description\": \"A longer description\",\n  \"csound_version\": \"6.17\",\n  \"author\": \"Name Surname\",\n  \"email\": \"name.surname@mail.com\",\n  \"license\": \"LGPL\",\n  \"repository\": \"https://github.com/csound-plugins/csound-plugins\",\n}\n</code></pre>"},{"location":"Installation.html","title":"Installation","text":""},{"location":"Installation.html#compiled-binaries","title":"Compiled Binaries","text":"<p>Download binaries for all platforms</p> <p>Download from a tagged build (<code>v1.x.y</code>) for a stable release, or use the development build (\"latest\"), which contains the latest version.</p> <p>Note</p> <p>A csound plugin is a shared library (<code>.dylib</code> in macOS, <code>.so</code> in Linux, <code>.dll</code> in windows) which is loaded by csound and contains multiple opcodes.</p> <p>In csound &gt;= 6.16, place the plugins in the user plugins folder (create the folder if it does not exist):</p> <ul> <li>macOS: <code>~/Library/csound/6.0/plugins64</code></li> <li>Linux: <code>~/.local/lib/csound/6.0/plugins64</code></li> <li>Windows: <code>C:\\Users\\&lt;User&gt;\\AppData\\Local\\csound\\6.0\\plugins64</code></li> </ul> <p>For previous versions, put the plugins along csound's own plugins (this folder should already exist and contain a multitude of files):</p> <ul> <li>macOS: <code>/Library/Frameworks/CsoundLib64.framework/Versions/6.0/Resources/Opcodes64</code> if csound was    installed via the official installer, or    <code>~/Library/Frameworks/CsoundLib64.framework/Versions/6.0/Resources/Opcodes64</code> if installed from source</li> <li>Linux: <code>/usr/local/lib/csound/plugins64-6.0</code> if installed from source, <code>/usr/lib/csound/plugins64-6.0</code> if   installed by the package manager</li> <li>Windows: <code>C:\\Program Files\\Csound6_x64\\plugins64</code></li> </ul>"},{"location":"Installation.html#installation-from-source","title":"Installation from source","text":"<p>The source lives at https://github.com/csound-plugins/csound-plugins</p>"},{"location":"Installation.html#linux","title":"Linux","text":"<pre><code>sudo apt-get install libsndfile1-dev nasm\ngit clone https://github.com/csound-plugins/csound-plugins\ncd csound-plugins\ngit submodule update --init --recursive --remote\ngit submodule foreach git pull origin master\nmkdir build &amp;&amp; cd build\ncmake ..\ncmake --build .\ncmake --install .\n</code></pre>"},{"location":"Installation.html#macos","title":"MacOS","text":"<pre><code>brew install libsndfile\ncurl -Ls -o nasm-2.14.02.zip 'https://www.nasm.us/pub/nasm/releasebuilds/2.14.02/macosx/nasm-2.14.02-macosx.zip'\nunzip nasm-2.14.02.zip\nexport PATH=\"$(realpath nasm-2.14.02):$PATH\"\ngit clone https://github.com/csound-plugins/csound-plugins\ncd csound-plugins\ngit submodule update --init --recursive --remote\ngit submodule foreach git pull origin master\nmkdir build &amp;&amp; cd build\ncmake ..\ncmake --build .\ncmake --install .\n</code></pre>"},{"location":"Installation.html#windows","title":"Windows","text":"<pre><code>git clone https://github.com/microsoft/vcpkg\n.\\vcpkg\\bootstrap-vcpkg.bat\n.\\vcpkg\\vcpkg integrate install\n.\\vcpkg\\vcpkg install libsndfile:x64-windows\n\ngit submodule update --init --recursive --remote\ngit submodule foreach git pull origin master\nmkdir build\ncd build\ncmake -A x64 -DBUILD_JSUSFX_OPCODES=OFF ..\ncmake --build . --config Release\ncmake --install .\n\n# This last step simply copies Release\\*.dll to \"C:\\Users\\&lt;User&gt;\\AppData\\Local\\csound\\6.0\\plugins64\" \n</code></pre>"},{"location":"opcodes/accum.html","title":"accum","text":""},{"location":"opcodes/accum.html#abstract","title":"Abstract","text":"<p>Simple accumulator of scalar values</p>"},{"location":"opcodes/accum.html#description","title":"Description","text":"<p><code>accum</code> can be used together with <code>changed</code>, <code>changed2</code>, <code>metro</code>, etc,  to convert a binary trigger to an incremental one. Incremental triggers are used by many opcodes (<code>printf</code>, for example), so by doing <code>accum(changed(kvar))</code> it is possible to use binary triggers wherever an incremental trigger is expected. <code>accum</code> outputs its current value and increments it afterwords. </p>"},{"location":"opcodes/accum.html#syntax","title":"Syntax","text":"<pre><code>kout accum kstep, initial=0, kreset=0\naout accum kstep, initial=0, kreset=0\n</code></pre>"},{"location":"opcodes/accum.html#arguments","title":"Arguments","text":"<ul> <li>kstep: the step to add. This value will be added at each iteration (at each k-cycle      for <code>accum:k</code> and at each sample for <code>accum:a</code>)</li> <li>initial: initial value of the accumulator</li> <li>kreset: if 1, the accummulator is reset to the initial value</li> </ul>"},{"location":"opcodes/accum.html#output","title":"Output","text":"<ul> <li>kout: accumulated value</li> </ul>"},{"location":"opcodes/accum.html#execution-time","title":"Execution Time","text":"<ul> <li>Init </li> </ul>"},{"location":"opcodes/accum.html#examples","title":"Examples","text":"<pre><code>kout accum 1, 0    ; outputs 0, 1, 2, 3, 4...\n\n; Play a sample with variable speed, stop the event when finished\naindex accum 1\nkspeed = linseg:k(0.5, ilen, 2)\nilen = ftlen(ift)\naindex *= kspeed\nasig table3 aindex, ift\nif aindex[0] &gt;= ilen - (ksmps*kspeed) then\n    turnoff\nendif\nifade = 1/ksmps\nout asig * linsegr(0, ifade, 1, ifade, 0)\n</code></pre> <pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n--nosound\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\n\ninstr 1\n  kx linseg 0, p3, 1\n  printf \"kx=%f \\n\", accum(changed(kx)), kx\n  ; the same without accum would only print the first time,\n  ; since changed would return always 1 but printf expects an ever\n  ; increasing trigger\nendin\n\n&lt;/CsInstruments&gt;\n&lt;CsScore&gt;\n\ni1 0 0.1\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/accum.html#see-also","title":"See also","text":"<ul> <li>metro</li> <li>changed</li> <li>trighold</li> <li>printf</li> </ul>"},{"location":"opcodes/accum.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/atstop.html","title":"atstop","text":""},{"location":"opcodes/atstop.html#abstract","title":"Abstract","text":"<p>Schedule an instrument at the end of the current instrument</p>"},{"location":"opcodes/atstop.html#description","title":"Description","text":"<p><code>atstop</code> can be used to schedule an instrument event as the last action of a given instrument, during the process of being deallocated. This can be used to notify when the note has actually stopped, or to schedule a  chain of events, free any table or dict allocated, etc. The advantage over the <code>release</code> opcode is that <code>atstop</code> is guaranteed to be run  after the note has stopped, so there is no danger in deallocating resources being used by this note, there are no conflicts with release envelopes, etc. If any k-variables are passed to the scheduled instr these will reflect the  changes at the end of the instr.</p> <p>Release time vs deinit time</p> <p>The event is not scheduled at release time (see below \"Release time vs Deinit time\") but at the moment the note is freed.</p> <p>Release time is when the note is within its release phase, which will only happen  if the note has an envelope with a release segment (like <code>linsegr</code>), or if it has  setup extra time with <code>xtratim</code>. The opcode <code>release</code> can be used to query if the  current note is being released. The instrument keeps running in release phase as  long as the release part of the envelope is finished or the extra time allocated via <code>xtratim</code> is through. </p> <p>Deinit time is the moment the note is actually being freed, so the instrument is not running anymore at this point.  </p>"},{"location":"opcodes/atstop.html#syntax","title":"Syntax","text":"<pre><code>atstop instrnum   [, idelay=0, idur=-1, p4, p5, ...]\natstop Sinstrname [, idelay=0, idur=-1, p4, p5, ...]\n</code></pre>"},{"location":"opcodes/atstop.html#arguments","title":"Arguments","text":"<ul> <li><code>instrnum</code> / <code>Sintrname</code>: the number or the name of the instr to be scheduled</li> <li><code>idelay</code>: the time offset after the stop time of this note to start this instrument</li> <li><code>idur</code>: the duration of the event</li> <li><code>p4</code>, <code>p5</code>, ...: any other p-arguments, as used with similar opcodes like <code>schedule</code>, <code>event</code>, etc.     They can be any i-, k- or S- variable. The scheduled instr will access them, as p-args.</li> </ul>"},{"location":"opcodes/atstop.html#execution-time","title":"Execution Time","text":"<ul> <li>Init </li> </ul>"},{"location":"opcodes/atstop.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n-odac\n\n&lt;/CsOptions&gt;\n&lt;CsInstruments&gt;\n\n/*\n\n  # This is the example file for the atstop opcode\n\n  atstop schedules an instrument at the end of the note\n  This might be useful to notify that a note stopped, or\n  to schedule a chain of notes, etc.\n\n  NB: the scheduled event is NOT triggered at release time,\n  which might be when this note is still playing, if the note\n  has some release envelope, but when the note is being deleted\n\n  ## Syntax\n\n    atstop Sinstrname, idelay, idur, ...\n    atstop instrnum, idelay, idur, ...\n\n  * Sinstrname / instrnum: the name or the instrument number to schedule\n  * idelay: time offset to this note stop\n  * idur: duration of the scheduled event (-1 = forever)\n\n*/\n\nsr = 44100\nksmps = 64\n0dbfs = 1\nnchnls = 2\n\nopcode myvco,a,ii\n  iamp, ifreq xin\n  a0 vco2, iamp, ifreq\n  a0 += vco2(iamp, ifreq+2)\n  a0 += vco2(iamp, ifreq / 2)\n  xout a0\nendop\n\n; brownian walk\ninstr 1\n  imidi = p4\n  a0 myvco 0.1, mtof:i(imidi)\n  outs a0, a0\n  idelta = round((rnd(4) - 1) * 2)/2\n  idelta = idelta != 0 ? idelta : -0.5\n  imidi2 = imidi + idelta\n  imidi2 = imidi2 &lt; 96 ? imidi2 : 48\n  idurnext = round(rnd(0.25)*8) / 8\n  atstop 1, 0, idurnext, imidi2\nendin\n\n; ping-pong\ninstr 2\n  imidi = p4\n  imidi = imidi &lt; 96 ? imidi : 48\n\n  a0 myvco 0.1, mtof:i(imidi)\n  a0 *= linsegr(0, 0.05, 1, 0.05, 0)\n  outs a0, a0\n\n  atstop 3, 0, p3*0.97, imidi + 1\nendin\n\ninstr 3\n  imidi = p4\n  imidi = imidi &lt; 88 ? imidi : 48\n  a0 oscili 0.8, mtof:i(imidi)\n  a0 *= linsegr(0, 0.05, 1, 0.050, 0)\n  outs a0, a0\n  atstop 2, 0, p3*0.95, imidi + 1\nendin\n\n\n; test calling a named instr at stop\ninstr 10\n  a0 oscili 0.1, 440\n  outs a0, a0\n  atstop \"foo\", 0.5, 1, 1000\nendin\n\ninstr foo \n  ifreq = p4\n  a0 oscili 0.1, ifreq\n  outs a0, a0\nendin\n\n; test simple case with optional pargs\ninstr first\n  atstop \"second\", 1, -1, 0.5\n  atstop \"second\", 0.5\n  atstop 200\nendin\n\ninstr second\n  printf \"second!  p4 =%f \\n\", 1, p4\n  turnoff\nendin\n\ninstr 200\n  printf \"200! \\n\", 1\n  turnoff\nendin\n\n; test atstop with k args\ninstr _printCounter\n  icounter = p4\n  prints \"counter: %d\\n\", icounter\n  turnoff\nendin\n\ninstr kargs\n  kcounter init 0\n  kcounter += 1\n  atstop \"_printCounter\", 0, -1, kcounter\nendin\n\ninstr StopPerformance\n  exitnow\nendin\n\n\n&lt;/CsInstruments&gt;\n&lt;CsScore&gt;\n; i 1 0 0.25 36\n\n; i 2 0 0.25 48\n\n; i 10 0 1\n; i \"StopPerformance\" 10 1\n; i \"first\" 1 0.5\ni \"kargs\" 0 1\nf 0 5\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/atstop.html#see-also","title":"See also","text":"<ul> <li>defer</li> <li>schedule</li> <li>event</li> <li>release</li> <li>xtratim</li> </ul>"},{"location":"opcodes/atstop.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/beadsynt.html","title":"beadsynt","text":""},{"location":"opcodes/beadsynt.html#abstract","title":"Abstract","text":"<p>Band-Enhanced Oscillator-Bank</p>"},{"location":"opcodes/beadsynt.html#description","title":"Description","text":"<p>Band-Enhanced oscillator-bank, a port of Loris' oscillator (based on Supercollider's Beadsynt). Can work both with arrays and tables. The band-enhanced family of opcodes (beosc, beadsynt) implement sound modeling and synthesis that preserves the elegance and malleability of a sinusoidal model, while accommodating sounds with noisy (non-sinusoidal) components. Analysis is done offline, with an enhanced McAulay-Quatieri (MQ) style analysis that extracts bandwidth information in addition to the sinusoidal parameters for each partial. To produce noisy components, we synthesize with sine wave oscillators that have been modified to allow the introduction of variable bandwidth.</p> <p>The synthesis can be controlled via a set of flags (see iflags), allowing to switch between unifrom or gaussian noise for the noise components, wavetable interpolation (switch off to save cpu), and freq. interpolation between k-cycles (switch off to save cpu)</p> <p>Note</p> <p><code>kFreqs[]</code>, <code>kAmps[]</code> and <code>kBws[]</code> must all be the same size  (this also holds true for <code>ifreqft</code>, <code>iampft</code> and <code>ibwft</code>) </p>"},{"location":"opcodes/beadsynt.html#flags","title":"Flags","text":"<p>The iflags value controls a series of behaviours. It controls the noise shape used for the residual spectrum (uniform or gaussian noise); whether to use linear interpolation in the oscillator; and if the frequency value of an oscillator is interpolated within a performance pass (relevant if frequencies are changing fast and ksmps is high)</p> iflags Description +1 Uniform noise / Gaussian noise +2 Fast (no interpolation) oscillator / Linear interpolation +4 No frequency interpolation / Frequency interpolation"},{"location":"opcodes/beadsynt.html#syntax","title":"Syntax","text":"<pre><code>aout beadsynt kFreqs[], kAmps[], kBws[], inumosc, iflags=1, kfreq=1, kbw=1, ifn=-1, iphs=-1\naout beadsynt ifreqft, iampft, ibwft, inumosc, iflags=1, kfreq=1, kbw=1, ifn=-1, iphs=-1\n</code></pre>"},{"location":"opcodes/beadsynt.html#arguments","title":"Arguments","text":"<ul> <li>kFreqs[]: An array holding the frequencies of each partial </li> <li>kAmps[]: An array holding the amplitudes of each partial </li> <li>kBws[]: An array holding the bandwidths of each partial </li> <li>kfreq: Freq. scaling, all frequencies are multiplied by this (default = 1) </li> <li>kbw: Bandwidth scaling, all bandwidths are multiplied by this (default = 1)</li> <li>inumosc: the number of partials to resynthesize. In the array case, it can be left unset.</li> <li>iflags: flags controlling oscillator quality, noise type and frequency interpolation. See table</li> <li>ibwft: A table holding the bandwidths for each partial</li> <li>iampft: A table holding the amplitudes for each partial</li> <li>ifreqft: A table holding the frequencies for each partial</li> <li>ifn: A table holding a sine wave (or -1 to use the builtin table) (default = -1)</li> <li>iphs: Initial phase. -1: randomized, 0-1: initial phase, &gt;1: table number holding the phases (default = -1)</li> </ul>"},{"location":"opcodes/beadsynt.html#output","title":"Output","text":"<ul> <li>aout: The generated sound</li> </ul>"},{"location":"opcodes/beadsynt.html#execution-time","title":"Execution Time","text":"<ul> <li>Performance</li> </ul>"},{"location":"opcodes/beadsynt.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n-odac\n&lt;/CsOptions&gt;\n&lt;CsInstruments&gt;\n\n/*\n\nThis example uses the analysis file fox.mtx which was produced with \nloristrck_pack, see https://github.com/gesellkammer/loristrck\nThe file is in fact a wav file, with the difference that the wav format is used \nas a binary exchange format\n\n*/\n\nsr = 44100\nksmps = 128\nnchnls = 2\n0dbfs = 1.0\n\ngispectrum ftgen 0, 0, 0, -1, \"fox.mtx\", 0, 0, 0\n\ninstr 1\n  ifn = gispectrum\n  iskip      tab_i 0, ifn\n  inumrows   tab_i 1, ifn\n  inumcols   tab_i 2, ifn\n  it0 = tab_i(iskip, ifn)\n  it1 = tab_i(iskip+inumcols, ifn)\n  idt = it1 - it0\n  inumpartials = (inumcols-1) / 3 \n  imaxrow = inumrows - 2\n  it = ksmps / sr\n  igain init 1\n  ispeed init 0.3\n  idur = imaxrow * idt / ispeed\n  kGains[] init inumpartials\n  kfilter init 0\n  ifreqscale init 1\n\n  kt timeinsts\n  kplayhead = phasor:k(ispeed/idur)*idur\n  krow = kplayhead / idt\n  ; each row has the format frametime, freq0, amp0, bandwidth0, freq1, amp1, bandwidth1, ...\n  kF[] getrowlin krow, ifn, inumcols, iskip, 1, 0, 3\n  kA[] getrowlin krow, ifn, inumcols, iskip, 2, 0, 3\n  kB[] getrowlin krow, ifn, inumcols, iskip, 3, 0, 3\n\n  if(kt &gt; idur*0.6) then\n    if metro(0) == 1 then\n      println \"Applying filter: bandpass between 1000-1500 Hz\"\n    endif\n    kfilter = 1\n  endif\n\n  ifilterGain = 3    \n  if (kfilter == 1) then\n    kGains bpf kF, 990, 0.001, 1000, ifilterGain, 1500, ifilterGain, 1510, 0.01\n    kA *= kGains\n  endif \n\n  iflags = 7  ; max. quality\n  aout beadsynt kF, kA, kB, -1, iflags, ifreqscale\n\n  if(kt &gt; idur) then\n    event \"e\", 0, 0, 0\n  endif\n  aenv cosseg 0, 0.02, igain, idur-0.02-0.1, igain, 0.1, 0\n  aout *= aenv\n  outs aout, aout\nendin\n\nschedule 1, 0, -1\n\n&lt;/CsInstruments&gt;\n&lt;CsScore&gt;\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/beadsynt.html#see-also","title":"See also","text":"<ul> <li>beosc</li> <li>adsynt2</li> <li>oscili</li> </ul>"},{"location":"opcodes/beadsynt.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/beosc.html","title":"beosc","text":""},{"location":"opcodes/beosc.html#abstract","title":"Abstract","text":"<p>Band-Enhanced Oscillator</p>"},{"location":"opcodes/beosc.html#description","title":"Description","text":"<p>Band-Enhanced oscillator, a port of Loris' oscillator (based on Supercollider's BEOsc). The band-enhanced family of opcodes (beosc, beadsynt) implement sound modelling and synthesis that preserves the elegance and malleability of a sinusoidal model, while accommodating sounds with noisy (non-sinusoidal) components. Analysis is done offline, with an enhanced McAulay-Quatieri (MQ) style analysis that extracts bandwidth information in addition to the sinusoidal parameters for each partial. To produce noisy components, we synthesise with sine wave oscillators that have been modified to allow the introduction of variable bandwidth.</p>"},{"location":"opcodes/beosc.html#syntax","title":"Syntax","text":"<pre><code>aout beosc xfreq, kbw, ifn=-1, iphs=0, inoisetype=1\n</code></pre>"},{"location":"opcodes/beosc.html#arguments","title":"Arguments","text":"<ul> <li>xfreq: The frequency of the oscillator (k or a rate)</li> <li>kbw: The bandwidth (\"noisyness\") of the oscillator </li> <li>ifn: A table holding the waveform of the oscillator (default=-1,   the builtin sine waveform)</li> <li>iphs: The phase of the sine (default=0)</li> <li>inoisetype: 0: uniform, 1: Gaussian (default=1)</li> </ul>"},{"location":"opcodes/beosc.html#output","title":"Output","text":"<ul> <li>aout: The generated sound</li> </ul>"},{"location":"opcodes/beosc.html#execution-time","title":"Execution Time","text":"<ul> <li>Performance</li> </ul>"},{"location":"opcodes/beosc.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n-odac \n&lt;/CsOptions&gt;\n&lt;CsInstruments&gt;\n\n\nsr = 44100\nksmps = 64\nnchnls = 1\n0dbfs  = 1\n\ninstr 1\n  idur1 = 8\n  ifreq = 440\n  kfreq linseg ifreq, idur1, ifreq, idur1, ifreq*4, idur1, ifreq\n  kbw   cosseg     0, idur1, 1,     idur1, 1,       idur1, 0\n  ;          freq   bw   fn  phs              noisetype(0=uniform)\n  aout  beosc kfreq, kbw, -1, unirand:i(6.28), 0\n  aenv  linsegr 0, 0.1, 1, 0.1, 1, 0.1, 0\n  aout *= (aenv * 0.2)\n  outch 1, aout\nendin\n\n&lt;/CsInstruments&gt;\n&lt;CsScore&gt;\ni 1 0 32\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt; \n</code></pre>"},{"location":"opcodes/beosc.html#see-also","title":"See also","text":"<ul> <li>beadsynt</li> <li>adsynt2</li> <li>oscili</li> </ul>"},{"location":"opcodes/beosc.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/bisect.html","title":"bisect","text":""},{"location":"opcodes/bisect.html#abstract","title":"Abstract","text":"<p>Returns the fractional index of a value within a sorted array / tab</p>"},{"location":"opcodes/bisect.html#description","title":"Description","text":"<p>Given an array <code>x0, x1, x2, x3,...</code>, <code>bisect</code> determines the fractional index of a value x, indicating where this value would be placed within the given array/table.  For example, given an array <code>[0, 10, 14, 20]</code>, the value 12 would receive the index 1.5 since it is to be placed between elements 1 and 2, equidistant from both (the fractional part determines the relative distance to the neighbouring elements). The index is clamped to 0 and <code>size-1</code>. </p> <p>Note</p> <p><code>bisect</code> can be used together with <code>interp1d</code> to perform piecewise interpolation. Given an array of x values and an array of corrsponding y values, <code>bisect</code> determines the index within the x array and <code>interp1d</code> maps that index to the y domain via multiple interpolation methods</p>"},{"location":"opcodes/bisect.html#syntax","title":"Syntax","text":"<pre><code>kidx   bisect  kval, xarr[]\niidx   bisect  ival, xarr[]\naidx   bisect  aval, xarr[]\nkidx[] bisect  kvals[], xarr[]\niidx[] bisect  ivals[], xarr[]\n\nkidx   bisect  kval, ktab, kstep=1, koffset=0\niidx   bisect  ival, itab, istep=1, ioffset=0\naidx   bisect  aval, ktab, kstep=1, koffset=0\nkidx[] bisect  kval[], ktab, kstep=1, koffset=0\niidx[] bisect  ival[], itab, istep=1, ioffset=0\n</code></pre>"},{"location":"opcodes/bisect.html#arguments","title":"Arguments","text":"<ul> <li>kval: the value to quiery within arr  </li> <li>arr: the array (1D) holding the data. </li> <li>tab: the table holding the data</li> <li>step: in the case of a table, it is possible to bisect one particular     column in the table if, for each row, multiple features are included     in the same table</li> <li>offset: the offset determines the precise column to bisect</li> </ul>"},{"location":"opcodes/bisect.html#output","title":"Output","text":"<ul> <li>out: the index of val inside the array/tab  </li> </ul>"},{"location":"opcodes/bisect.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n-odac\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\n\n/*\n\nAbstract\n========\n\nDetermine the fractional index of a value within a sorted array / tab\n\nDescription\n===========\n\nGiven an array x0, x1, x2, x3,..., determine the fractional index of a\nvalue x. For example, given an array [0, 10, 14, 20], the value 12 would\nreceive the index 1.5 since it is to be placed between elements 1 and 2,\nequidistant from both. The fractional part determines the relative distance\nto the neighbouring elements.\n\nSyntax\n======\n\n    kidx   bisect  kval, xarr[]\n    iidx   bisect  ival, xarr[]\n    aidx   bisect  aval, xarr[]\n    kidx[] bisect  kvals[], xarr[]\n    iidx[] bisect  ivals[], xarr[]\n\n    kidx   bisect  kval, ktab, kstep=1, koffset=0\n    iidx   bisect  ival, itab, istep=1, ioffset=0\n    aidx   bisect  aval, ktab, kstep=1, koffset=0\n    kidx[] bisect  kval[], ktab, kstep=1, koffset=0\n    iidx[] bisect  ival[], itab, istep=1, ioffset=0\n\nArgs\n====\n\n    kval: the value to quiery within arr  \n    arr: the array (1D) holding the data. \n    tab: the table holding the data\n    step: in the case of a table, it is possible to bisect one particular\n        column in the table if, for each row, multiple features are included\n        in the same table\n    offset: the offset determines the precise column to bisect\n\nOutput\n======\n\n    out: the index of val inside the array/tab  \n\nSee Also\n========\n\ninterp1d, bpf, linlin, getrowlin, linenv\n*/\n\nksmps = 128\nnchnls = 2\n0dbfs  = 1\n\ninstr example1\n    ; used together with bisect can create multiple piecewise interpolation\n    ; configurations\n    itimes[] fillarray 0,   4,   5,    10\n    imidi1[] fillarray 64, 64,   63.5, 64.5\n    imidi2[] fillarray 64, 63.4, 63.4, 63\n    iamps[]  fillarray 0,   0.8,   0.8,    0\n\n    kidx bisect timeinsts(), itimes\n    kamp interp1d kidx, iamps, \"cos\"\n    aamp interp kamp\n    a1 oscili aamp, mtof(interp1d(kidx, imidi1, \"cubic\"))\n    a2 oscili aamp, mtof(interp1d(kidx, imidi2))\n    println \"amp: %f\", rms:k(aamp)\n    outch 1, a1, 2, a2\nendin\n\ninstr example2\n    ; a table can also be used with interp1d / bisect. A table can hold\n    ; both x and y coordinates as pairs\n    itime2midi1 ftfill 0, 64, 4, 62, 5, 62, 6, 67\n    itime2midi2 ftfill 0, 60, 4, 60, 5, 59, 6, 59\n    ftfree itime2midi1, 1\n    ftfree itime2midi2, 1\n    ; step=2, bisect the column 0.\n    kt = timeinsts() \n    kidx1 bisect kt, itime2midi1, 2\n    kidx2 bisect kt, itime2midi2, 2\n\n    ; -1: cosine interpolation, step size=2, offset=1\n    kmidi1 interp1d kidx1, itime2midi1, \"cos\", 2, 1\n    kmidi2 interp1d kidx2, itime2midi2, \"cos\", 2, 1\n\n    a0 squinewave a(mtof(kmidi1)), a(0.1), a(0.1)\n    a1 squinewave a(mtof(kmidi2)), a(0.2), a(0.5)\n    igain = 0.1\n    ifade = 0.2\n    aenv = linseg:a(0, ifade, igain, p3-ifade*2-0.1, igain, ifade, 0)\n    outch 1, a0*aenv, 2, a1*aenv\nendin\n\ninstr test1\n    icurve ftfill 1, 60, 3, 65, 4, 60\n    kt timeinsts\n    kidx bisect kt, icurve, 2\n    kmidi interp1d kidx, k(icurve), \"linear\", 2, 1\n    println \"kt: %f, kidx: %f, kmidi: %f\", kt, kidx, kmidi\nendin\n\ninstr test2\n    ixs[] fillarray 0, 1, 2, 3\n    iys[] fillarray 0, 10, 20, 30\n    kt eventtime\n\n    kidx bisect kt, ixs\n    ky interp1d kidx, iys\n    println \"kt: %f, kidx: %f, ky: %f\", kt, kidx, ky\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\n; Uncomment to perform each example\n\n;i \"example1\" 0 10\n;i \"example2\"  0 7\n;i \"test1\" 0 5\ni \"test2\" 0 4\n\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/bisect.html#see-also","title":"See Also","text":"<ul> <li>interp1d</li> <li>bpf</li> <li>linlin</li> <li>getrowlin</li> <li>linenv</li> </ul>"},{"location":"opcodes/crackle.html","title":"crackle","text":""},{"location":"opcodes/crackle.html#abstract","title":"Abstract","text":"<p>generates noise based on a chaotic equation</p>"},{"location":"opcodes/crackle.html#description","title":"Description","text":"<p><code>crackle</code> is a chaotic generator, the sound is generated with  the following equation</p> <pre><code>y[n] = p * y[n-1]- y[n-2] - 0.05\n</code></pre> <p>Port of supercollider's Crackle</p>"},{"location":"opcodes/crackle.html#syntax","title":"Syntax","text":"<pre><code>aout crackle kp\n</code></pre>"},{"location":"opcodes/crackle.html#arguments","title":"Arguments","text":"<ul> <li><code>kp</code>: the p parameter in the equation, a value between 1.0 and 2.0</li> </ul>"},{"location":"opcodes/crackle.html#output","title":"Output","text":"<ul> <li><code>aout</code>: audio output of the chaotic generator</li> </ul>"},{"location":"opcodes/crackle.html#execution-time","title":"Execution Time","text":"<ul> <li>Performance (audio)</li> </ul>"},{"location":"opcodes/crackle.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n-odac\n&lt;/CsOptions&gt;\n&lt;CsInstruments&gt;\n\n/*\n\n  # This is the example file for the crackle opcode\n\n  crackle is a port of supercollider's crackle (taken from pd/else)\n\n  crackle is a chaotic noise generator based on the equation:\n\n  y[n] = p * y[n-1] - y[n-2] - 0.05\n\n  ## Syntax\n\n    aout crackle kp=0.5\n\n  * kp: value for p in the equation (default = 0.5)\n  * aout: noise signal\n\n*/\n\nsr = 44100\nksmps = 64\n0dbfs = 1\nnchnls = 2\n\n\ninstr 1\n  kP[] fillarray 1.0, 1.2, 1.3, 1.35, 1.4, 1.5, 1.8, 1.9, 1.97, 2.0\n  kidx = int(line(0, p3, lenarray(kP)))\n  kp = kP[kidx]\n  printk2 kp\n  aout crackle kp\n  aout *= 0.5\n  outs aout, aout\n\nendin\n\n\n&lt;/CsInstruments&gt;\n&lt;CsScore&gt;\ni 1 0 15\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/crackle.html#see-also","title":"See also","text":"<ul> <li>standardchaos</li> <li>chuap</li> <li>dust2</li> </ul>"},{"location":"opcodes/crackle.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/cuetrig.html","title":"cuetrig","text":""},{"location":"opcodes/cuetrig.html#abstract","title":"Abstract","text":"<p>Generate a trigger at given time values</p>"},{"location":"opcodes/cuetrig.html#description","title":"Description","text":"<p>Given a time signal and a list of time stamps, <code>cuetrig</code> generates a  trigger whenever this signal crosses over one of the given timestamps. The output value is the index (starting at 1) of the timesamp crossed.</p>"},{"location":"opcodes/cuetrig.html#syntax","title":"Syntax","text":"<pre><code>ktrig cuetrig ktime, itime0, ..., itimen\n</code></pre>"},{"location":"opcodes/cuetrig.html#arguments","title":"Arguments","text":"<ul> <li>kstep: ktime. A value acting as the time signal. It must be monotonically ascending.   If the value is ever lower than a previous value, the sequence is reset</li> <li>itimen: time stamps</li> </ul>"},{"location":"opcodes/cuetrig.html#output","title":"Output","text":"<ul> <li>ktrig: index of the timestamp crossed, or 0 if no timestamp crossed at this cycle</li> </ul>"},{"location":"opcodes/cuetrig.html#execution-time","title":"Execution Time","text":"<ul> <li>Performance</li> </ul>"},{"location":"opcodes/cuetrig.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\n\n0dbfs = 1\n\ninstr 1\n  kt = eventtime() % 2\n  ktrig cuetrig kt, 0.0, 0.1, 0.12, 0.4\n  knotes[] fillarray 60, 64, 67, 67.5\n  if ktrig != 0 then \n    println \"ktrig: %d, kt: %f, note: %f\", ktrig, kt, knotes[ktrig-1]\n    schedulek 2, 0, 0.5, knotes[ktrig-1]\n  endif\nendin\n\ninstr 2\n  ifreq = mtof:i(p4)\n  outch 1, vco2:a(0.1, ifreq) * linsegr:a(0, 0.01, 1, 0.05, 0.1, 0.2, 0)\nendin\n\n&lt;/CsInstruments&gt;\n&lt;CsScore&gt;\n\ni1 0 8\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/cuetrig.html#see-also","title":"See also","text":"<ul> <li>accum</li> <li>metro</li> <li>changed</li> <li>trighold</li> </ul>"},{"location":"opcodes/cuetrig.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2024</p>"},{"location":"opcodes/defer.html","title":"defer","text":""},{"location":"opcodes/defer.html#abstract","title":"Abstract","text":"<p>Run an opcode at the end of current event</p>"},{"location":"opcodes/defer.html#description","title":"Description","text":"<p><code>defer</code> runs an opcode as the last action of a given event, during the process of being deallocated. This can be used together with opcodes which release resources back which are being used during the event. At the moment <code>defer</code> works only with builtin opcodes. For complex release actions, it is nonetheless possible to bundle the actions in a separate instrument and use <code>schedule</code> together with defer (or simpler, use <code>atstop</code> instead).</p> <p>Any arguments passed after the name of the opcode (which must be within quotations) are passed directly to the opcode itself. Notice that only opcodes without output make sense in this context. Useful opcodes are <code>print</code>, <code>prints</code>, pool_push, dict_free, etc</p> <p>Release time vs deinit time</p> <p>The event is not scheduled at release time (see below \"Release time vs Deinit time\") but at the moment the note is freed.</p> <p>Release time is when the note is within its release phase, which will only happen if the note has an envelope with a release segment (like <code>linsegr</code>), or if it has setup extra time with <code>xtratim</code>. The opcode <code>release</code> can be used to query if the current note is being released. The instrument keeps running in release phase as long as the release part of the envelope is finished or the extra time allocated via <code>xtratim</code> is through.</p> <p>Deinit time is the moment the note is actually being freed, so the instrument is not running anymore at this point.</p>"},{"location":"opcodes/defer.html#syntax","title":"Syntax","text":"<pre><code>defer Sopcode, [arg1, arg2, ...]\n</code></pre> <p>Note</p> <p><code>defer</code> evaluates at init time but acts at deacllocation time. The arguments passed are evaluated at deallocation time</p>"},{"location":"opcodes/defer.html#arguments","title":"Arguments","text":"<ul> <li><code>Sopcode</code>: the name of the opcode to defer</li> <li><code>args</code>: any args (i, k, S) are passed to the opcodes. They are evaluated at   deallocation time.</li> </ul>"},{"location":"opcodes/defer.html#execution-time","title":"Execution Time","text":"<ul> <li>Init</li> <li>Deallocation</li> </ul>"},{"location":"opcodes/defer.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n-odac           \n\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\nsr     = 44100\nksmps  = 64\nnchnls = 2\n0dbfs  = 1\n\n;; Example 1\ninstr 1\n  printk2 timeinsts()\n  ;; this will be called at the end of this instrument\n  defer \"event_i\", \"i\", 2, 0, 1, 93\nendin\n\ninstr 2\n  print p4\n  turnoff\nendin\n\ninstr example1\n  schedule 1, 0, 0.1\n  turnoff\nendin\n\n;; -------------------------------------------\n;; Example 2\n\ninstr 10\n  idict dict_new \"*sf\", \"foo\", 100, \"bar\", 200\n  ;; delete this key at the end of the note\n  defer \"dict_set\", idict, \"foo\"\n  dict_print idict\n  schedule 11, 0.5, 1, idict\n  turnoff\nendin \n\ninstr 11\nprintf \"Instr 11 \\n\", 1\n  idict = p4\n  ;; by now the dict should have deleted the key \"foo\"\n  dict_print idict\n  turnoff\nendin\n\ninstr example2\n  schedule 10, 0, 1\nendin\n\nschedule \"example2\", 0, 0.1\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\ne 3\n; f0 3600\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/defer.html#see-also","title":"See also","text":"<ul> <li>atstop</li> <li>schedule</li> <li>event</li> <li>release</li> <li>xtratim</li> </ul>"},{"location":"opcodes/defer.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/deref.html","title":"deref","text":""},{"location":"opcodes/deref.html#abstract","title":"Abstract","text":"<p>Dereference a previously created reference to a variable</p>"},{"location":"opcodes/deref.html#description","title":"Description","text":"<p><code>ref</code> and <code>deref</code> implement a mechanism to pass a reference to any object, allowing to share a variable across instruments, with opcodes, etc. A ref is reference  counted and deallocates itself when it falls out of scope without being referenced by any object. It makes it possible to pass arrays by reference to user defined opcodes, allowing to modify an array inplace, skip copying memory, etc. </p>"},{"location":"opcodes/deref.html#syntax","title":"Syntax","text":"<pre><code>xArray deref iref, iextrarefs=0\n</code></pre>"},{"location":"opcodes/deref.html#arguments","title":"Arguments","text":"<ul> <li><code>iref</code>: a reference index as created via <code>ref</code></li> <li><code>iextrarefs</code>: extra references used, matching any extra reference allocated via <code>ref</code>     (see ref for more information)</li> </ul>"},{"location":"opcodes/deref.html#output","title":"Output","text":"<ul> <li><code>xArray</code> / <code>xvar</code>: are created as a view of the object originally passed to <code>ref</code></li> </ul>"},{"location":"opcodes/deref.html#execution-time","title":"Execution Time","text":"<ul> <li>Init</li> </ul>"},{"location":"opcodes/deref.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n--nosound\n&lt;/CsOptions&gt;\n&lt;CsInstruments&gt;\n\n;; Example file for ref - deref\n\nsr     = 44100\nksmps  = 64\nnchnls = 2\n0dbfs  = 1\n\ngiA[] fillarray 0, 1000, 2000, 3000\n\n; Example 1: take a ref from an array, deref it to create a second view of it \ninstr 1\n  ; a source array\n  iX[] fillarray 0, 10, 20, 30, 40\n\n  ; create a ref of iXs, return the index \n  iref ref iX\n  ; now iYs points to iXs\n  iY[] deref iref\n  printarray iY, \"\", \"instrument 1, iY\"\n\n\n  iZ[] fillarray 0, 1, 3, 5, 7\n\n  ; create a ref, pass it to instr. 2\n  schedule 2, 0, 1, ref(iZ)\n\n  ; create another ref of iZ. In this case the event is scheduled\n  ; in the future, so the source will not exist anymore when instr. 2\n  ; is scheduled. This should fail.\n  schedule 2, 1, 1, ref(iZ)\n\n  turnoff\nendin\n\ninstr 2\n  iref = p4\n  if refvalid(iref) == 1 then\n    iZs[] deref iref\n    printarray iZs, \"\", \"p1=2, iZs\"\n  else\n    prints \"\\n    The reference has become invalid\\n\"\n  endif\n  turnoff\nendin\n\n;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n; Example 2: extra references to keep array alive\ninstr 3\n  ; create a source array\n  kXs[] fillarray 1, 1, 2, 3, 5, 8, 13\n\n  ; In order to bridge the time gap between the end of life of the source\n  ; of a ref and the scheduled event where a deref is taken, it is possible\n  ; to create a forward reference, a \"promise\" that one deref has been scheduled\n  ; in the future.\n\n  ; short lived event, ends before this event\n  schedule 4, 0, 0.1, ref(kXs), 0\n\n  ; starts before we end, but survives us\n  schedule 4, p3-0.1, 0.2, ref(kXs), 0\n\n  ; starts after we end, we need an extra reference \n  schedule 4, p3+1, 0.1, ref(kXs, 1), 1\n\n  defer \"prints\", \"  --- instr. 3 finished --- \\n\"\nendin\n\ninstr 4\n  prints \"instr. 4\\n   \"\n  kView[] deref p4, p5\n  printarray kView\n  defer \"prints\", \" --- instr. 4 finished --- \\n\"\n  ; At deinition time the memory of the `iView` array is marked as deallocated.\n  ; The handle (a global structure created by the `ref` opcode) which owns the memory,\n  ; is signaled that no other clients of this data are alive. It deallocates the\n  ; original memory and frees itself\nendin\n\n  ;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n  ; test: multiple derefs\ninstr 5\n  iXs[] fillarray 0, 1, 4, 9\n  iref ref iXs\n\n  iYs[] deref iref\n  iZs[] deref iref\n  printarray iYs\n  printarray iZs\n  iXs[0] = 100\n  printarray iZs\n  turnoff\nendin\n\n; test performance of pass-by-value vs pass-by-reference\nopcode arrayadd, i[], i[]i\n  ; pass by value in and out\n  iIn[], ix xin\n  iOut[] = iIn + ix\n  xout iOut\nendop\n\nopcode arrayaddref, i[], ii\n  ; pass by ref in, by value out\n  iref, ix xin\n  iIn[] deref iref\n  iOut[] = iIn + ix\n  xout iOut\nendop\n\nopcode arrayadd_inplace, 0, ii\n  ; in place \n  iref, ix xin\n  iIn[] deref iref\n  iIn += ix\nendop\n\nopcode arrayadd_byref_inout, 0, iii\n  ; pass by ref in and out\n  irefin, irefout, ix xin\n  iIn[]  deref irefin\n  iOut[] deref irefout\n  if lenarray(iOut) &gt;= lenarray(iIn) then\n    iOut = iIn + ix\n  endif\nendop\n\ninstr testUdoPerformance1\n  ; Here we test the performance gain of passing arrays by reference.\n  ; Passing the input array by reference seems to produce a speedup of ~25%,\n  inum = 10000\n  iXs[] genarray 0, inum\n  ii = 0\n  it0 rtclock\n  while ii &lt; 20 do\n    iYs[] arrayadd iXs, 2.0\n    ii += 1\n  od\n  it1 rtclock\n  prints \"Dur UDO pass by value = %.8f \\n\", it1 - it0\n\n  iref = ref(iXs)\n  it0 rtclock\n  iY0[] arrayaddref iref, 0.1\n  iY0   arrayaddref iref, 0.2\n  iY0   arrayaddref iref, 0.3\n  iY0   arrayaddref iref, 0.3\n  iY0   arrayaddref iref, 0.3\n  iY0   arrayaddref iref, 0.3\n  iY0   arrayaddref iref, 0.3\n  iY0   arrayaddref iref, 0.3\n  iY0   arrayaddref iref, 0.3\n  iY0   arrayaddref iref, 0.3\n  iY0   arrayaddref iref, 0.3\n  iY0   arrayaddref iref, 0.3\n  iY0   arrayaddref iref, 0.3\n  iY0   arrayaddref iref, 0.3\n  iY0   arrayaddref iref, 0.3\n  iY0   arrayaddref iref, 0.3\n  iY0   arrayaddref iref, 0.3\n  iY0   arrayaddref iref, 0.3\n  iY0   arrayaddref iref, 0.3\n  iY0   arrayaddref iref, 0.3\n  it1 rtclock\n  prints \"Dur UDO pass by ref input = %.8f \\n\", it1 - it0\n\n  iZs[] genarray 0, inum\n  iOut[] init lenarray(iZs)\n\n  it0 rtclock\n  irefZ = ref(iZs)\n  irefOut = ref(iOut)  \n  arrayadd_byref_inout irefZ, irefOut, 0.5\n  arrayadd_byref_inout irefZ, irefOut, 0.5\n  arrayadd_byref_inout irefZ, irefOut, 0.5\n  arrayadd_byref_inout irefZ, irefOut, 0.5\n  arrayadd_byref_inout irefZ, irefOut, 0.5\n  arrayadd_byref_inout irefZ, irefOut, 0.5\n  arrayadd_byref_inout irefZ, irefOut, 0.5\n  arrayadd_byref_inout irefZ, irefOut, 0.5\n  arrayadd_byref_inout irefZ, irefOut, 0.5\n  arrayadd_byref_inout irefZ, irefOut, 0.5\n  arrayadd_byref_inout irefZ, irefOut, 0.5\n  arrayadd_byref_inout irefZ, irefOut, 0.5\n  arrayadd_byref_inout irefZ, irefOut, 0.5\n  arrayadd_byref_inout irefZ, irefOut, 0.5\n  arrayadd_byref_inout irefZ, irefOut, 0.5\n  arrayadd_byref_inout irefZ, irefOut, 0.5\n  arrayadd_byref_inout irefZ, irefOut, 0.5\n  arrayadd_byref_inout irefZ, irefOut, 0.5\n  arrayadd_byref_inout irefZ, irefOut, 0.5\n  it1 rtclock\n\n  prints \"Dur UDO pass by ref in and out=%.8f \\n\", it1 - it0\n  ; printarray iOut\nendin\n\ninstr 7\n  iIn[] genarray 0, 1000\n  iOut[] init lenarray(iIn)\n  arrayadd_byref_inout ref(iIn), ref(iOut), 0.5\n  turnoff\nendin\n\ninstr 8\n  ; test k arrays\n  ; 1. A way to convert a i-array to a k-array by taking a reference\n  iXs[] genarray 0, 99\n  kXs[] deref ref(iXs)\n\n  kXs[0] = timeinsts()\n  printarray kXs, metro(8)\nendin\n\ninstr 9\n  ; we need genarray_i because otherwise kXs is not initialized at i-time\n  kXs[] genarray 0, 9\n  iXs[] deref ref(kXs)\n  iXs += 10\n  printarray iXs\n  printarray kXs\n  turnoff\nendin\n\n\n; schedule 1, 0, 1\n; schedule 3, 0, 1\n; schedule 5, 0, 0.1\nschedule \"testUdoPerformance1\", 0, 0.1\n; schedule 8, 0, 4\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\ne 10 \n\n&lt;/CsScore&gt;\n\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/deref.html#see-also","title":"See also","text":"<ul> <li>ref</li> <li>defer</li> <li>schedule</li> <li>event</li> <li>release</li> </ul>"},{"location":"opcodes/deref.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/detectsilence.html","title":"detectsilence","text":""},{"location":"opcodes/detectsilence.html#abstract","title":"Abstract","text":"<p>Detect when input falls below an amplitude threshold</p>"},{"location":"opcodes/detectsilence.html#description","title":"Description","text":"<p>When the absolute value of the input signal remains below the threshold for a given window of time, output 1. Otherwise, output 0. This can be used to detect the end of a sample or the end of a complex envelope</p> <p><code>detectsilence</code> is a port of SuperCollider's <code>DetectSilence</code> UGen (https://doc.sccode.org/Classes/DetectSilence.html)</p>"},{"location":"opcodes/detectsilence.html#syntax","title":"Syntax","text":"<pre><code>kout detectsilence asig, kthresh=0.0001, ktime=0.1\n</code></pre>"},{"location":"opcodes/detectsilence.html#arguments","title":"Arguments","text":"<ul> <li>asig: the audio signal to analyze</li> <li>kthresh: the amplitude threshold</li> <li>ktime: the time period the signal should stay below the threshold</li> </ul>"},{"location":"opcodes/detectsilence.html#output","title":"Output","text":"<ul> <li>kout: 1 if the signal has been below the threshold for the given time, 0 otherwise</li> </ul>"},{"location":"opcodes/detectsilence.html#execution-time","title":"Execution Time","text":"<ul> <li>Performance</li> </ul>"},{"location":"opcodes/detectsilence.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n-odac \n\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\nsr     = 44100\nksmps  = 64\nnchnls = 2\n0dbfs  = 1\n\ninstr 1\n  asig oscili 0.5, 1000\n  aenv linseg 0, 0.1, 1, 1.9, 1, 1, 0 ; total 0.1+1.9+1=3\n  asig *= aenv\n  kfinished = detectsilence(asig, db(-90), 0.1)\n  kms = timeinsts() * 1000\n  if metro(30) == 1 then\n    printsk \"\\r&gt;&gt;&gt; Elapsed time: %.2f ms, env: %.5f         \", kms, aenv[0]\n  endif\n  if kfinished == 1 then\n    println \"\"\n    turnoff\n  endif\n\n  ip1 = p1\n  idata = dict_new(\"sf\", \"instrnum\", ip1, \"elapsed\", 0.)\n  dict_set idata, \"elapsed\", kms\n  atstop \"elapsed\", 0, 0, idata \nendin\n\ninstr elapsed\n  idict = p4\n  instrnum = dict_get:i(idict, \"instrnum\")\n  ims = dict_get:i(idict, \"elapsed\")\n  prints \"&gt;&gt;&gt; Instrument %d exited after %d ms\\n\", instrnum, ims\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\ni1 1 6\n; f0 3600\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/detectsilence.html#see-also","title":"See also","text":"<ul> <li>follow2</li> <li>rms</li> </ul>"},{"location":"opcodes/detectsilence.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2021</p>"},{"location":"opcodes/dict_del.html","title":"dict_del","text":""},{"location":"opcodes/dict_del.html#abstract","title":"Abstract","text":"<p>Remove a key:value pair from a hashtable</p>"},{"location":"opcodes/dict_del.html#description","title":"Description","text":"<p>A hashtable is a mapping from a key to a value. The <code>dict_</code> family of opcodes implement a hashtable mapping either strings or integers to strings or floats. <code>dict_del</code> removes a key:value pair from the hashtable. If both dict and key are i- variables, <code>dict_del</code> executes only at i-time. Otherwise it executes at every k- cycle. Use an <code>if</code> guard to prevent this, if so needed. To delete a key at the end of an event, use defer</p>"},{"location":"opcodes/dict_del.html#syntax","title":"Syntax","text":"<pre><code>dict_del idict, ikey      ; execution at i- time\ndict_del idict, kkey      ; execution at k- time\ndict_del idict, Skey      ; execution at k- time\n</code></pre>"},{"location":"opcodes/dict_del.html#arguments","title":"Arguments","text":"<ul> <li><code>idict</code>: the handle of the dict, as returned by <code>dict_new</code></li> <li><code>ikey</code> / <code>kkey</code> / <code>Skey</code>: the key to remove</li> </ul>"},{"location":"opcodes/dict_del.html#execution-time","title":"Execution Time","text":"<ul> <li>Init</li> <li>Performance</li> </ul>"},{"location":"opcodes/dict_del.html#example","title":"Example","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n; -odac  -iadc    ;;;RT audio out and in\n\n&lt;/CsOptions&gt;\n&lt;CsInstruments&gt;\n\nsr = 44100\nksmps = 32\nnchnls = 2\n\ninstr 1\n  ; create a local dict, mapping strings to numbers\n  idict dict_new \"sf\"\n  dict_free idict\n\n  ; set key a key:value pair\n  dict_set idict, \"bar\", 123\n\n  dict_print idict\n\n  dict_del idict, \"bar\"\n\n  dict_print idict\n\n  turnoff\nendin\n\n\n&lt;/CsInstruments&gt;\n&lt;CsScore&gt;\n\ni 1 0 2\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/dict_del.html#see-also","title":"See also","text":"<ul> <li>dict_new</li> <li>dict_get</li> <li>dict_set</li> <li>defer</li> <li>dict_free</li> </ul>"},{"location":"opcodes/dict_del.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019 Last update: 2021</p>"},{"location":"opcodes/dict_dump.html","title":"dict_dump","text":""},{"location":"opcodes/dict_dump.html#abstract","title":"Abstract","text":"<p>Dumps the contents of this dict as a string</p>"},{"location":"opcodes/dict_dump.html#description","title":"Description","text":"<p><code>dict_dump</code> serializes the contents of a dict to a string which can be used to reconstruct such dict. Here is an example of such a string definition:</p> <pre><code>\"keyA: 10, keyB: string value, keyC: 'quoted string'\"\n</code></pre> <p>This string can be used to load the contents of a dict via  dict_loadstr. At the moment only dicts with string keys can be dumped.</p> <p>The motivation behind this opcode is to be able to save a dict to a string, for example in a textfile or in the metadata of a soundfile, and be able to retrieve that as a dict later, in csound or in anothe software.</p>"},{"location":"opcodes/dict_dump.html#syntax","title":"Syntax","text":"<pre><code>Sdump dict_dump idict\n</code></pre>"},{"location":"opcodes/dict_dump.html#arguments","title":"Arguments","text":"<ul> <li>idict: the dict handle</li> <li>Sdump: the string defining the key:value pairs</li> </ul>"},{"location":"opcodes/dict_dump.html#execution-time","title":"Execution Time","text":"<ul> <li>Init</li> </ul>"},{"location":"opcodes/dict_dump.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n--nosound\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\n\n/*\n  # Example file for dict_dump\n\n  ## dict_dump\n\n    Sdump dict_dump idict\n\n  Dump the contents of the dict to a string, in the following format:\n\n    \"keyA: valueA, keyB: valueB, ...\"\n\n  This string can be used to load the contents of a dict via \n  dict_loadstr. At the moment only dicts with string keys\n  can be dumped.\n\n  The motivation behind this opcode is to be able to save a dict\n  to a string, for example in a textfile or in the metadata of a \n  soundfile, and be able to retrieve that as a dict later, in\n  csound or in anothe software.\n\n*/\n\ninstr example1\n  ; Uncomment to test with different dict types\n  ; idict dict_new \"str:float\", \"foo\", 10.1, \"bar\", 0.5, \"baz\", 0.12345678\n  idict dict_new \"str:any\", \"foo\", 10.1, \"baz\", 0.12345678, \"bar\", \"barvalue\" \n  ; idict dict_new \"str:str\", \"foo\", \"fooval\", \"bar\", \"barval\"\n\n  Sdump dict_dump idict\n  prints \"\\ndump: &lt;\\n%s\\n&gt;\\n\\n\", Sdump\n\n  prints \"\\n--- idict ---\\n\"\n  dict_print idict\n\n  idict2 dict_loadstr Sdump\n  prints \"\\n--- idict2 ---\\n\"\n  dict_print idict2\n  prints \"\\n\"\n  turnoff\nendin\n\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\ni \"example1\" 0 0.1\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/dict_dump.html#see-also","title":"See also","text":"<ul> <li>dict_loadstr</li> <li>dict_new</li> <li>dict_set</li> <li>filereadmeta</li> </ul>"},{"location":"opcodes/dict_dump.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2021</p>"},{"location":"opcodes/dict_exists.html","title":"dict_exists","text":""},{"location":"opcodes/dict_exists.html#abstract","title":"Abstract","text":"<p>Returns 1 if the dict exists, 0 otherwise</p>"},{"location":"opcodes/dict_exists.html#description","title":"Description","text":"<p><code>dict_exists</code> checks if the index passed refers to an existing dict and returns 1 if it does, 0 otherwise. </p> <p>It works at i-time only</p>"},{"location":"opcodes/dict_exists.html#syntax","title":"Syntax","text":"<pre><code>iexists dict_exists idict\n</code></pre>"},{"location":"opcodes/dict_exists.html#arguments","title":"Arguments","text":"<ul> <li><code>\u00ecdict</code>: the handle of the dict, as returned by <code>dict_new</code></li> </ul>"},{"location":"opcodes/dict_exists.html#output","title":"Output","text":"<ul> <li><code>iexists</code>: 1 of the dict exists, 0 otherwise</li> </ul>"},{"location":"opcodes/dict_exists.html#execution-time","title":"Execution Time","text":"<ul> <li>Init </li> </ul>"},{"location":"opcodes/dict_exists.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n--nosound \n&lt;/CsOptions&gt;\n&lt;CsInstruments&gt;\n\n/*\n\n  Example file for dict_exists\n\n  iexists dict_exists idict\n\n*/\n\nopcode accum, k, ko\n  kstep, ival xin\n  know init ival\n  xout know\n  know += kstep\nendop\n\ninstr 1\n  idict = p4\n  print idict\n  if(dict_exists(idict)==1) then\n    kfoo dict_get idict, \"foo\"\n    kbar dict_get idict, \"bar\"\n    ; dict_free idict, 1\n  else\n    kfoo init 10\n    kbar init 20\n  endif\n\n  printf \"$$$ foo=%f  bar=%f \\n\", accum(changed(kfoo, kbar)), kfoo, kbar\nendin\n\ninstr 2\n  idict dict_new \"str:float\", \"foo\", 1, \"bar\", 2\n  schedule 1, 0, p3, idict\n  dict_set idict, \"foo\", linseg:k(1, p3, 2)\n  dict_set idict, \"bar\", linseg:k(2, p3, 3)\nendin\n\ninstr 3\n  schedule 1, 0, p3, -1\nendin\n\n\n\n&lt;/CsInstruments&gt;\n&lt;CsScore&gt;\ni 2 0 1\ni 3 4 4\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/dict_exists.html#see-also","title":"See also","text":"<ul> <li>dict_iter</li> <li>dict_size</li> <li>dict_query</li> </ul>"},{"location":"opcodes/dict_exists.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/dict_free.html","title":"dict_free","text":""},{"location":"opcodes/dict_free.html#abstract","title":"Abstract","text":"<p>Free a hashtable </p>"},{"location":"opcodes/dict_free.html#description","title":"Description","text":"<p>frees the hashtable either at init time or at the end of the note (similar to ftfree) To be able to pass a dict between notes, a note can create a global dict and  pass its handle to another note. When the first note is released, the dict lives on (because it is global), and it will be either freed at the end of the performance or explicitely by calling dict_free</p> <p><code>dict_free</code> executes only at init time. </p>"},{"location":"opcodes/dict_free.html#syntax","title":"Syntax","text":"<pre><code>dict_free idict [, iwhen=1]\n</code></pre>"},{"location":"opcodes/dict_free.html#arguments","title":"Arguments","text":"<ul> <li><code>idict</code>: the handle of the dict to be freed</li> <li><code>iwhen</code>: similar to <code>ftfree</code><ul> <li>if <code>iwhen == 0</code> : free the dict now</li> <li>if <code>iwhen == 1</code> : free the dict at the end of this note (the default)</li> </ul> </li> </ul>"},{"location":"opcodes/dict_free.html#execution-time","title":"Execution Time","text":"<ul> <li>Init</li> </ul>"},{"location":"opcodes/dict_free.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsInstruments&gt;\n\nsr = 44100\nksmps = 32\nnchnls = 2\n\ninstr 1 \n  ; create a local dict, mapping strings to numbers\n  idict dict_new \"sf\"\n\n  ; set key a key:value pair\n  dict_set idict, \"bar\", 123\n\n  ; retrieve the value\n  kbar dict_get idict, \"bar\"\n\n  ; get a non-existent key, will output the default\n  kfoo dict_get idict, \"foo\", -1 \n\n  printf \"&gt;&gt;&gt;&gt; bar: %f,  foo: %f \\n\", 1, kbar, kfoo \n\n  ; now create another dict, this one will outlive this note\n  idict2 dict_new \"ss\", 1, \"baz\", \"bazvalue\", \"foo\", \"foovalue\"\n\n  ; schedule another inst, pass this dict\n  event \"i\", 2, 0, 1, idict2\n\n  turnoff\n\nendin\n\ninstr 2\n  idict = p4\n  Sbaz = dict_get(idict, \"baz\")\n  printf \"instr 2, kbaz = %s \\n\", 1, Sbaz\n\n  ; free dict at the end of this note\n  dict_free idict, 1  \n  turnoff\nendin\n\n; schedule 1, 0, 1\n\n&lt;/CsInstruments&gt;\n&lt;CsScore&gt;\n\ni 1 0 2\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt; \n</code></pre>"},{"location":"opcodes/dict_free.html#see-also","title":"See also","text":"<p>dict_new</p>"},{"location":"opcodes/dict_free.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/dict_get.html","title":"dict_get","text":""},{"location":"opcodes/dict_get.html#abstract","title":"Abstract","text":"<p>Get a value from a hashtable</p>"},{"location":"opcodes/dict_get.html#description","title":"Description","text":"<p>A hashtable is a mapping from a key to a value. The <code>dict_</code> family of opcodes  implement a hashtable mapping either strings or integers to strings or floats.  <code>dict_get</code> returns the value for a given key. If the key is not present, a default value is returned (the empty string for string values, or an user given default  for number values)</p>"},{"location":"opcodes/dict_get.html#syntax","title":"Syntax","text":"<pre><code>kvalue dict_get idict, Skey, idefault=0\nivalue dict_get idict, Skey, idefault=0\nkvalue dict_get idict, kkey, idefault=0\nivalue dict_get idict, ikey, idefault=0\nSvalue dict_get idict, Skey\nSvalue dict_geti idict, Skey  ; (init time version)\nSvalue dict_get idict, kkey\n</code></pre> <p>Note</p> <p>The type of key and value depend on the type definition of the <code>dict</code>, see dict_new In the case of a dict of type \"str:str\", dict_get returns an empty string if the key is not found</p>"},{"location":"opcodes/dict_get.html#arguments","title":"Arguments","text":"<ul> <li><code>\u00ecdict</code>: the handle of the dict, as returned by <code>dict_new</code></li> <li><code>Skey</code> / <code>kkey</code>: the key to be queries, as previously set by dict_set</li> <li><code>idefault</code>: if the key is not present, this value is returned (defaults to 0)</li> </ul>"},{"location":"opcodes/dict_get.html#output","title":"Output","text":"<ul> <li> <p><code>kvalue</code> / <code>Svalue</code>: the value corresponding to the key, or a default if the key is not found</p> </li> <li> <p>For dicts with a string value, an empty string is returned when the key is not found.</p> </li> <li>For dicts with a numeric value, a user given default is returned (default=0)</li> </ul>"},{"location":"opcodes/dict_get.html#execution-time","title":"Execution Time","text":"<ul> <li>Init</li> <li>Performance </li> </ul> <p><code>dict_get</code> executes at i-time and k-time depending on the output value. In the case of  a dict of type \"str:str\" <code>dict_get</code> runs at k-time. Use <code>dict_geti</code> for an init time version</p>"},{"location":"opcodes/dict_get.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n; -odac  -iadc    ;;;RT audio out and in\n\n&lt;/CsOptions&gt;\n&lt;CsInstruments&gt;\n\nsr = 44100\nksmps = 32\nnchnls = 2\n\ninstr 1 \n  ; create a local dict, mapping strings to numbers\n  idict dict_new \"sf\"\n\n  ; set key a key:value pair\n  dict_set idict, \"bar\", 123\n\n  ; retrieve the value\n  kbar dict_get idict, \"bar\"\n\n  ; get a non-existent key, will output the default\n  kfoo dict_get idict, \"foo\", -1 \n\n  printf \"&gt;&gt;&gt;&gt; bar: %f,  foo: %f \\n\", 1, kbar, kfoo \n\n  ; now create another dict, this one will outlive this note\n  idict2 dict_new \"ss\", 1, \"baz\", \"bazvalue\", \"foo\", \"foovalue\"\n\n  ; schedule another inst, pass this dict\n  event \"i\", 2, 0, 1, idict2\n\n  turnoff\n\nendin\n\ninstr 2\n  idict = p4\n  Sbaz = dict_get(idict, \"baz\")\n  printf \"instr 2, kbaz = %s \\n\", 1, Sbaz\n\n  ; free dict at the end of this note\n  dict_free idict, 1  \n  turnoff\nendin\n\n; schedule 1, 0, 1\n\n&lt;/CsInstruments&gt;\n&lt;CsScore&gt;\n\ni 1 0 2\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt; \n</code></pre> <pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n\n&lt;/CsOptions&gt;\n&lt;CsInstruments&gt;\n\n/*\n\n  # Example file for dict_get\n\n  ## dict_get\n\n    kvalue dict_get idict, \"key\" [, kdefault=0]\n\n\n  Get the value at a given key. For string values, an empty string\n  is returned when the key is not found. For int values, a default \n  value given by the user is returned when the key is not found.\n\n*/\n\nksmps = 64\nnchnls = 2\n0dbfs = 1\n\ninstr 1\n  ; create a local dict, mapping strings to numbers\n  idict dict_new \"sf\"\n  dict_free idict\n\n  ; set key a key:value pair\n  dict_set idict, \"bar\", 123\n\n  ; retrieve teh value\n  kbar dict_get idict, \"bar\"\n\n  ; get a non-existent key, will output the default\n  kfoo dict_get idict, \"foo\", -1 \n\n  printf \"&gt;&gt;&gt;&gt; bar: %f,  foo: %f \\n\", 1, kbar, kfoo \n\n  ; now create another dict, mapping strings to strings\n  idict2 dict_new \"ss\"\n\n  dict_set idict2, \"baz\", \"bazvalue\"\n  dict_set idict2, \"hoo\", \"hoovalue\"\n\n  Sbaz dict_get idict2, \"baz\"\n  Shoo dict_get idict2, \"hoo\"\n\n  printf \"&gt;&gt;&gt;&gt; baz: %s,  hoo: %s \\n\", 1, Sbaz, Shoo \n\n  turnoff\nendin\n\n\ninstr 2\n  ;; set and get \n  if timeinstk() &gt; 1 kgoto perf    ;; this starts at 1\n\n  imaxcnt = 100\n  idict dict_new \"ss\"\n\n  kcnt = 0\n  while kcnt &lt; imaxcnt do\n    Skey sprintfk \"key_%d\", kcnt\n    Svalue sprintfk \"value_%d\", kcnt \n    dict_set idict, Skey, Svalue \n    kcnt += 1 \n  od \n\nperf:\n  kcnt = 0\n  while kcnt &lt; imaxcnt do \n    Skey  sprintfk \"key_%d\", kcnt\n    ; the same for get, the key can change at k-time\n    Svalue dict_get idict, Skey\n    printf \"key: %s,  value: %s \\n\", kcnt, Skey, Svalue \n    kcnt += 1\n  od \nendin\n\ninstr 3\n  /*\n\n  dict_iter\n\n  xkey, xvalue, kidx dict_iter ihandle [,kreset=1]\n\n  kidx: holds the number of pairs yielded since last reset. It \n        is set to -1 when iteration has stopped \n        (in this case, xkey and xvalue are invalid and should not\n        be used)\n  kreset = 0  -&gt; after iterating over all pairs iteration stops\n                 In this mode, iteration happens at most once\n           1  -&gt; iteration starts over every k-cycle\n           2  -&gt; iteration restarts after stopping   \n  */\n\n  kt timeinstk \n  if kt &gt; 1 kgoto perf \n\n  idict dict_new \"sf\"\n  dict_set idict, \"foo\", 1\n  dict_set idict, \"bar\", 2\n  dict_set idict, \"baz\", 15\n  dict_set idict, \"bee\", 9\n\nperf:\n  ; iterate with a while loop\n  kidx = 0\n  while kidx &lt; dict_size(idict) - 1 do \n    Skey, kvalue, kidx dict_iter idict \n    printf \"while) %s -&gt; %f \\n\", kidx+kt*1000, Skey, kvalue\n  od   \n\n  ; the same but with goto\nloop:\n  Skey, kvalue, kidx dict_iter idict\n  if kidx == -1 goto break\n  printf \"loop) %s -&gt; %f \\n\", kidx+kt*1000, Skey, kvalue\n  kgoto loop\nbreak:\nendin\n\ninstr 4\n  ; test deleting a key\n  ; ~~~~~~~~~~~~~~~~~~~\n\n  idict dict_new \"ss\"\n\n  ; set a key:value pair\n  dict_set idict, \"foo\", \"foovalue\"\n\n  ; get the value, print it\n  Sfoo dict_get idict, \"foo\"\n  printf \"key: foo  value: %s \\n\", 1, Sfoo\n\n  ; dict_set without value deletes the key:value pair\n  dict_set idict, \"foo\"\n\n  ; now check that the pair is gone\n  Sfoo dict_get idict, \"foo\"\n  if(strlen(Sfoo)==0) then \n    printf \"key does not exist \\n\", 1\n  endif\n\n  turnoff\nendin\n\n\ninstr 5\n  ; dicts can be passed between instruments\n  ; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n  if timeinstk() &gt; 1 goto perf\n\n  ; create a dict which survives this note\n  idict1 dict_new \"sf\", 1\n\n  ; set some initial values once \n  dict_set idict1, \"foo\", 1\n  dict_set idict1, \"bar\", 2\n\n  ; launch instr 6, which will outlive this note, pass idict as p4\n  event \"i\", \"midifydict\", 0, p3+1, idict1 \n\nperf:\n  kfoo dict_get idict1, \"foo\"\n  printk2 kfoo\n\nendin\n\ninstr modifydict\n  ; here we modify instr 5's dictionary\n  ; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n  ; the dict was created by instr 5\n  idict = p4\n\n  kfoo line 0, p3-1, 10\n  dict_set idict, \"foo\", kfoo \n\n  dict_free idict, 1 ; 1 = free dict when note ends\nendin\n\ninstr 7\n  ; it is possible to create a new dict and set initial\n  ; values at once. This is only executed at i-time\n  idict dict_new \"sf\", 0, \"foo\", 10, \"bar\", 20, \"baz\", 30\n  kbaz dict_get idict, \"baz\"\n  kbar dict_get idict, \"bar\"\n  kxx dict_get idict, \"xx\", 99\n  printf \"baz: %f  bar: %f  xx: %f \\n\", 1, kbaz, kbar, kxx \n  turnoff\nendin\n\ninstr 8\n  ; get all the keys as an array\n  idict1 dict_new \"sf\", 0, \"keyA\", 1, \"keyB\", 2, \"keyC\", 3\n  SKeys[] dict_query idict1, \"keys\"\n  printarray SKeys\n\n  idict2 dict_new \"if\", 0, 1,100, 10,1000, 2,200\n  kKeys[] dict_query idict2, \"keys\"\n  printarray kKeys, 1, \"%.0f\"\n\n  ; get values as an array\n  idict3 dict_new \"is\", 0, 10, \"foo\", 20, \"bar\", 30, \"baz\"\n  Svals[] dict_query idict3, \"values\"\n  printarray Svals\n\n  kVals[] dict_query idict2, \"values\"\n  printarray kVals\n\n  turnoff\nendin\n\n; One convenient use of dicts is to pass arguments to an instr\ninstr 100\n  ; create our communication dict, set initial values\n  idict dict_new \"sf\", \"amp\", 0.1, \"freq\", 1000\n  ; the launched instr will last longer, so will have to deal with\n  ; this dict ceasing to exist\n  event_i \"i\", 101, 0, p3+1, idict\n\n  ; now we can control the synth with the dict\n  dict_set idict, \"freq\", linseg:k(440, p3, 455)\n\n  a0 oscili 0.1, 440\n  outch 1, a0 \nendin\n\n; a variation on dict_get where we either get the value corresponding to a key,\n; or the last value, if the dict does not exist\nopcode dict_receive, k,iSi \n  idict, Skey, ival0 xin\n  klast init ival0\n  if (dict_size(idict) &gt; 0 ) then\n    kval dict_get idict, Skey, ival0\n    klast = kval\n  else \n    kval = klast \n  endif \n  xout kval \nendop\n\ninstr 101\n  idict = p4\n  ; get the value for a given key. when the dict does not exist, just\n  ; outputs the last value\n  kamp dict_receive idict, \"amp\", 0.1 \n  kfreq dict_receive idict, \"freq\", 1000\n  a0 oscili kamp, kfreq \n  outch 2, a0\nendin\n\ninstr 200\n  idict dict_new \"str:any\", \"foo\", \"fooval\", \"bar\", 10\n  dict_print idict\n  Sfoo dict_get idict, \"foo\"\n  kbar dict_get idict, \"bar\"\n  printf \"foo=%s, bar=%f \\n\", 1, Sfoo, kbar\n  dict_set idict, \"baz\", 0.5\n  ibaz dict_get idict, \"baz\"\n  Smoo = \"moo!\"\n  dict_set idict, \"moo\", Smoo\n  printf \"baz=%f,  moo=%s \\n\", 1, ibaz, Smoo\n  turnoff\nendin  \n\n&lt;/CsInstruments&gt;\n&lt;CsScore&gt;\n; i 1 0 0.01\n; i 2 0 0.01\n; i 8 0 0.1\n; i 100 0 10\ni 200 0 1\nf 0 1\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/dict_get.html#see-also","title":"See also","text":"<ul> <li>dict_new</li> <li>dict_set</li> <li>dict_geti</li> <li>dict_get</li> </ul>"},{"location":"opcodes/dict_get.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/dict_geti.html","title":"dict_geti","text":""},{"location":"opcodes/dict_geti.html#abstract","title":"Abstract","text":"<p>Get a string value from a hashtable at init time</p>"},{"location":"opcodes/dict_geti.html#description","title":"Description","text":"<p>For dicts of type str:str or str:any, this version of dict_get runs at init-time only. See dict_get for any further details</p>"},{"location":"opcodes/dict_geti.html#syntax","title":"Syntax","text":"<pre><code>Svalue dict_geti idict, Skey\n</code></pre>"},{"location":"opcodes/dict_geti.html#arguments","title":"Arguments","text":"<ul> <li><code>\u00ecdict</code>: the handle of the dict, as returned by <code>dict_new</code></li> <li><code>Skey</code> / <code>kkey</code>: the key to be queries, as previously set by dict_set</li> </ul>"},{"location":"opcodes/dict_geti.html#output","title":"Output","text":"<ul> <li><code>Svalue</code>: the value corresponding to the key</li> </ul>"},{"location":"opcodes/dict_geti.html#execution-time","title":"Execution Time","text":"<ul> <li>Init</li> </ul>"},{"location":"opcodes/dict_geti.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n--nosound\n&lt;/CsOptions&gt;\n&lt;CsInstruments&gt;\n\n/*\n\n  # Example file for dict_geti\n\n  ## dict_geti\n\n    Svalue dict_geti idict, Skey\n\n\n  Get the value at a given key at init time. An empty string\n  is returned when the key is not found.\n\n*/\n\nksmps = 64\nnchnls = 2\n0dbfs = 1\n\ninstr 1\n  ; create a local dict, mapping strings to numbers\n  idict dict_new \"sa\", \"foo\", \"foovalue\", \"bar\", 10\n\n  Sfoo dict_geti idict, \"foo\"\n  prints \"Soo: %s \\n\", Sfoo\n\n  turnoff\nendin\n\n\n&lt;/CsInstruments&gt;\n&lt;CsScore&gt;\ni 1 0 0.01\nf 0 1\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/dict_geti.html#see-also","title":"See also","text":"<ul> <li>dict_new</li> <li>dict_set</li> <li>dict_get</li> </ul>"},{"location":"opcodes/dict_geti.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2020</p>"},{"location":"opcodes/dict_iter.html","title":"dict_iter","text":""},{"location":"opcodes/dict_iter.html#abstract","title":"Abstract","text":"<p>Iterate over the key-value pairs of a dict </p>"},{"location":"opcodes/dict_iter.html#description","title":"Description","text":"<p>Iterates over the key:value pairs. Whenever kreset is 1, iteration starts over If kreset is -1 (the default), iteration is autotriggered when it reaches the end of the collection.</p> <p><code>dict_loop</code> executes only at Performance Time. </p> <p>Note</p> <p><code>dict_iter</code> is meant to be used in a loop at k-time</p>"},{"location":"opcodes/dict_iter.html#syntax","title":"Syntax","text":"<pre><code>xkey, xvalue, kidx  dict_iter idict, kreset=-1\n</code></pre>"},{"location":"opcodes/dict_iter.html#arguments","title":"Arguments","text":"<ul> <li><code>idict</code>: the handle to the dict as returned by dict_new</li> <li><code>kreset</code>: the reset policy</li> </ul> kreset effect 0 no reset, iteration stops at the end of the collection. There will be at most 1 iteration 1 (default) Iteration starts over at every k-cycle 2 Reset at the end of iteration (independent of k-cycle)"},{"location":"opcodes/dict_iter.html#output","title":"Output","text":"<ul> <li><code>xkey</code> / <code>xvalue</code>: the key and value for this pair. The types are determined by the type of   this dict, as defined via <code>dict_new</code></li> <li><code>kidx</code>: the index of this pair. It will be 0 for the first pair, 1 for the second, etc.   When no more pairs, <code>kidx</code> will be -1. In this case, xkey and xvalue do not hold valid values</li> </ul>"},{"location":"opcodes/dict_iter.html#execution-time","title":"Execution time","text":"<ul> <li>Performance</li> </ul>"},{"location":"opcodes/dict_iter.html#usage","title":"Usage","text":"<p>There are two ways to use <code>dict_iter</code>, either in a <code>while</code> loop, or using gotos</p> <pre><code>; iterate in a while loop\nkidx = 0\nwhile kidx &lt; dict_size(idict)-1 do\n    Skey, kvalue, kidx dict_iter idict\n    printf \"key: %s  value: %f\", kidx, Skey, kvalue\nod\n\n; iterate with goto\nloop:\n    Skey, kvalue, kidx dict_iter idict\n    if kidx == -1 goto break\n    printf \"key: %s  value: %f\", kidx, Skey, kvalue\n    kgoto loop\nbreak:\n</code></pre>"},{"location":"opcodes/dict_iter.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n--nosound \n&lt;/CsOptions&gt;\n&lt;CsInstruments&gt;\n\n/*\n\n  # Example file for dict_iter opcode \n\n*/\n\ninstr 1\n  /*\n\n  dict_iter\n\n  xkey, xvalue, kidx dict_iter ihandle [,kreset=1]\n\n  kidx: holds the number of pairs yielded since last reset. It \n        is set to -1 when iteration has stopped \n        (in this case, xkey and xvalue are invalid and should not\n        be used)\n  kreset = 0  -&gt; after iterating over all pairs iteration stops\n                 In this mode, iteration happens at most once\n           1  -&gt; iteration starts over every k-cycle\n           2  -&gt; iteration restarts after stopping   \n  */\n\n  idict dict_new \"str:float\", 0, \"foo\", 1, \"bar\", 2, \"baz\", 15, \"bee\", 9\n\n  kt timeinstk\n  ; iterate with a while loop\n  kidx = 0\n  while kidx &lt; dict_size(idict) - 1 do \n    Skey, kvalue, kidx dict_iter idict \n    printf \"while) %s -&gt; %f \\n\", kidx+kt*1000, Skey, kvalue\n  od   \n\n  ; the same but with goto\nloop:\n  Skey, kvalue, kidx dict_iter idict\n  if kidx == -1 goto break\n  printf \"loop) %s -&gt; %f \\n\", kidx+kt*1000, Skey, kvalue\n  kgoto loop\nbreak:\n\nendin\n\n\n&lt;/CsInstruments&gt;\n&lt;CsScore&gt;\ni 1 0 0.05\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/dict_iter.html#see-also","title":"See also","text":"<ul> <li>dict_new</li> <li>dict_size</li> </ul>"},{"location":"opcodes/dict_iter.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/dict_loadstr.html","title":"dict_loadstr","text":""},{"location":"opcodes/dict_loadstr.html#abstract","title":"Abstract","text":"<p>Creates and fills a new dict from a string definition</p>"},{"location":"opcodes/dict_loadstr.html#description","title":"Description","text":"<p><code>dict_loadstr</code> creates a new dict and fills it from a string definition. Here is an example of such a string definition:</p> <pre><code>\"keyA: 10, keyB: string value, keyC: 'quoted string'\"\n</code></pre> <p>The dict created has the type <code>str:any</code>. The keys are always strings and the values can be either numbers or strings. Keys do not need to be quoted. Values only need to be quoted if a string value consists of only numbers or includes itself quotation marks. Quotations must be single quotations: <code>'</code></p> <p>The motivation behind this opcode is to be able to save a dictionary to a string, for example in the metadata of a soundfile, and be able to retrieve that as a dictionary inside csound</p>"},{"location":"opcodes/dict_loadstr.html#syntax","title":"Syntax","text":"<pre><code>idict dict_loadstr Sdefinition\n</code></pre>"},{"location":"opcodes/dict_loadstr.html#arguments","title":"Arguments","text":"<ul> <li>Sdefinition: the string defining the key:value pairs</li> <li>idict: the dict handle</li> </ul>"},{"location":"opcodes/dict_loadstr.html#execution-time","title":"Execution Time","text":"<ul> <li>Init</li> </ul>"},{"location":"opcodes/dict_loadstr.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n--nosound\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\n\n/*\n  # Example file for dict_loadstr\n\n  ## dict_loadstr\n\n    idict dict_loadstr Sdictdef\n\n  Create a new dict from a string definition of the form\n  \"keyA: valueA, keyB: valueB, ...\"\n\n  The dict creates has the type str:any, which means that the \n  keys are always strings and the values can be either numbers\n  or strings. Keys do not need to be quoted. Values only need to\n  be quoted if a string value consists of only numbers or includes\n  itself quotation marks. Quotations must be single quotations: `'`\n\n  The motivation behind this opcode is to be able to save a dictionary\n  to a string, for example in the metadata of a soundfile, and be\n  able to retrieve that as a dictionary inside csound\n\n*/\n0dbfs = 1\n\n\ninstr example1\n  idict dict_loadstr \"foo: 10,  bar :'barvalue', \\nbaz: unquoted string\"\n  dict_print idict\n  turnoff\nendin\n\ninstr example2\n  ; Read the metadata of a .mtx first\n  Scomment sfreadmeta \"test.mtx\", \"comment\"\n  if strlen(Scomment) == 0 then\n    initerror \"The .mtx file has no metadata\"\n  endif\n  ; Parse the metadata as a dict\n  idict dict_loadstr Scomment\n  dict_print idict\n\n  ; Now we load the data itself. The mtx format consists of a flat array of floats\n  ; where the first numbers include the dimensions of the matrix saved. \n  ; As the columns metadata should show, the mtx file has a header:\n  ; HeaderSize NumRows NumColumns [optionally other values] &lt;The matrix as a flat array&gt;\n  ; The same header is duplicated in the metadata itself, so we can use that directly\n  ; to make the code more self-documenting.\n  itab ftgen 0, 0, 0, -1, \"test.mtx\", 0, 0, 0\n\n  ; If the data is needed as an array it is possible to create an alias via memview.\n  ; Otherwise use tab2array to create a copy\n  iArr[] memview itab, dict_get:i(idict, \"HeaderSize\")\n  ; iArr[] tab2array itab, dict_get:i(idict, \"HeaderSize\")\n\n  ; Now reshape the array to recreate the original matrix\n  reshapearray iArr, dict_get:i(idict, \"NumRows\"), dict_get:i(idict, \"NumColumns\")\n  printarray iArr\n  turnoff\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\ni \"example2\" 0 0.1\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/dict_loadstr.html#see-also","title":"See also","text":"<ul> <li>dict_dump</li> <li>dict_new</li> <li>dict_set</li> <li>filereadmeta</li> </ul>"},{"location":"opcodes/dict_loadstr.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2021</p>"},{"location":"opcodes/dict_new.html","title":"dict_new","text":""},{"location":"opcodes/dict_new.html#abstract","title":"Abstract","text":"<p>Create a hashtable</p>"},{"location":"opcodes/dict_new.html#description","title":"Description","text":"<p>A hashtable is a mapping from a key to a value. The <code>dict_</code> family of opcodes implement a hashtable mapping either strings or integers to strings or floats.</p> <p>A hashtable, similar to a table, is always global, even if it is assigned to a local variable. A dict is kept alive until either the end of the performance, or until freed via dict_free</p>"},{"location":"opcodes/dict_new.html#syntax","title":"Syntax","text":"<pre><code>idict dict_new Stype, icapacity=-1\nidict dict_new Stype, key0, value0, key1, value1, ...\n\nkdict dict_new Stype, key0, value0, key1, value1, ...\n</code></pre> <p>Note</p> <p>With the second variant it is possible to create a dict and give it  initial values at the same time.</p>"},{"location":"opcodes/dict_new.html#args","title":"Args","text":"<ul> <li><code>Stype</code>: the type of the dictionary, see below</li> <li><code>icapacity</code>: the initial capacity of the dictionary (how much it can     grow without needing to reallocate memory). If not given a     sensible default is used. Dictionaries can grow as they are     filled, but since this requires memory allocation, it can be     unsafe during performance</li> <li><code>key0, value0, ...</code>: initial key:value pairs</li> </ul>"},{"location":"opcodes/dict_new.html#types","title":"Types","text":"<p>The types of a dict are fixed at creation time and are specified via the <code>Stype</code> argument. </p> type short key value <code>str:float</code> <code>sf</code> string float <code>str:str</code> <code>ss</code> string string <code>int:float</code> <code>if</code> int float <code>int:str</code> <code>is</code> int string <code>str:any</code> <code>sa</code> string any (float or string"},{"location":"opcodes/dict_new.html#the-any-type","title":"The \"any type","text":"<p>A dict of the form <code>str:any</code> accepts strings as keys and can have both strings and numbers as values. This can be used to pass arguments to an instrument like</p> <pre><code>    iargs dict_new \"str:any\", \"name\", \"foo\", \"freq\", 1000, \"amp\", 0.5\n    schedule \"myinstr\", 0, -1, iargs\n\n    ; then, inside myinstr\n    instr myinstr\n      iargs = p4\n      Sname dict_get iargs, \"name\"\n      kfreq dict_get iargs, \"freq\"\n      kamp  dict_get iargs, \"amp\"\n      ; ... do something with this\n      dict_free iargs\n    endin\n</code></pre>"},{"location":"opcodes/dict_new.html#arguments","title":"Arguments","text":"<ul> <li>Stype: a string describing the type of the key and the value. See the table above.</li> <li>keyx, valuex**: initial pairs can be set at creation time,   matching the types declared with <code>Stype</code></li> </ul>"},{"location":"opcodes/dict_new.html#output","title":"Output","text":"<ul> <li>idict: identifies this dict with an integer. This integer can be   passed around to another instrument and will always resolve to the   same dict, as long as this dict is still alive. This can be checked   via <code>iexists dict_exists idict</code> (dict_exists</li> </ul>"},{"location":"opcodes/dict_new.html#execution-time","title":"Execution Time","text":"<ul> <li>Init (the normal case)</li> <li>Performance (use this form when using dicts for passing named   arguments to an event created at k-time)</li> </ul>"},{"location":"opcodes/dict_new.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n; -odac  -iadc    ;;;RT audio out and in\n\n&lt;/CsOptions&gt;\n&lt;CsInstruments&gt;\n\nsr = 44100\nksmps = 32\nnchnls = 2\n\ninstr 1\n  ; a dict mapping strings to floats\n  idict dict_new \"sf\"\n\n  ; free the dict at the end of this note\n  dict_free idict\n\n  ; set key a key:value pair\n  dict_set idict, \"bar\", 123\n\n  ; retrieve the value\n  kbar dict_get idict, \"bar\"\n\n  ; get a non-existent key, will output the default\n  kfoo dict_get idict, \"foo\", -1\n\n  printf \"&gt;&gt;&gt;&gt; bar: %f,  foo: %f \\n\", 1, kbar, kfoo\n\n  ; now create another dict to be passed to another instr\n  idict2 dict_new \"str:str\", \"baz\", \"bazvalue\", \"foo\", \"foovalue\"\n\n  ; schedule another inst, pass this dict\n  event \"i\", 2, 0, 1, idict2\n\n  turnoff\n\nendin\n\ninstr 2\n  idict = p4\n  Sbaz = dict_get(idict, \"baz\")\n  printf \"instr 2, kbaz = %s \\n\", 1, Sbaz\n\n  ; free dict at the end of this note\n  dict_free idict, 1\n  turnoff\nendin\n\n; schedule 1, 0, 1\n\n&lt;/CsInstruments&gt;\n&lt;CsScore&gt;\n\ni 1 0 2\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/dict_new.html#see-also","title":"See also","text":"<ul> <li>dict_free</li> <li>dict_set</li> </ul>"},{"location":"opcodes/dict_new.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/dict_print.html","title":"dict_print","text":""},{"location":"opcodes/dict_print.html#abstract","title":"Abstract","text":"<p>Prints the contents of a dict</p>"},{"location":"opcodes/dict_print.html#description","title":"Description","text":"<p><code>dict_print</code> can be used to print the contents of a dict, mostly for debugging purposes</p> <p><code>dict_print</code> can print both at i-time or k-time</p>"},{"location":"opcodes/dict_print.html#syntax","title":"Syntax","text":"<pre><code>dict_print idict [, ktrig=1]\n</code></pre>"},{"location":"opcodes/dict_print.html#arguments","title":"Arguments","text":"<ul> <li><code>\u00ecdict</code>: the handle of the dict, as returned by <code>dict_new</code></li> <li><code>ktrig</code>: when to print the dict. Printing will take place whenever ktrig is -1 or             if ktrig is a positive and higher than the last trig</li> </ul>"},{"location":"opcodes/dict_print.html#execution-time","title":"Execution Time","text":"<ul> <li>Init</li> <li>Performance</li> </ul>"},{"location":"opcodes/dict_print.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n\n--nosound\n\n&lt;/CsOptions&gt;\n&lt;CsInstruments&gt;\n\nsr = 44100\nksmps = 32\nnchnls = 2\n\ninstr 1 \n  ; create a local dict, mapping strings to numbers\n  idict dict_new \"sf\", \"foo\", 10, \"bar\", 20, \"baz\", 30\n  print_dict idict, 1\n\n  ; print with a metro\n  idict2 dict_new \"ss\", \"foo\", \"foofoo\", \"bar\", \"barbar\", \"baz\", \"bazbaz\"\n\n  ktrig metro 2\n  print_dict idict2, ktrig\n\n  turnoff\nendin\n\n\n&lt;/CsInstruments&gt;\n&lt;CsScore&gt;\n\ni 1 0 1\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt; \n</code></pre>"},{"location":"opcodes/dict_print.html#see-also","title":"See also","text":"<ul> <li>dict_iter</li> <li>dict_set</li> <li>dict_query</li> </ul>"},{"location":"opcodes/dict_print.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/dict_query.html","title":"dict_query","text":""},{"location":"opcodes/dict_query.html#abstract","title":"Abstract","text":"<p>Query different properties of a dict</p>"},{"location":"opcodes/dict_query.html#description","title":"Description","text":"<p>Properties of a dict which do not need a separate opcode (because they are not used very frequently) are merged togehter in this opcode.  Possible properties are:</p> <ul> <li><code>exists</code>: return 1 if the handle points to a valid dict</li> <li><code>size</code>: returns the size of this dict (similar to dict_size)</li> <li><code>type</code>: returns an integer identifying the type of this dict</li> <li><code>11</code>: number -&gt; number</li> <li><code>12</code>: number -&gt; string</li> <li><code>21</code>: string -&gt; number</li> <li><code>22</code>: string -&gt; string</li> <li><code>keys</code>: returns an array with all the keys defined in this dict (the type of the returned array depends on the type of the keys)</li> <li><code>values</code>: returns an array with all the values (the type of the returned array depends on the type of the values). </li> </ul> <p>NB: the order in which keys and values are returned represents the corresponding pairs, so keys[i] and values[i] belong to the same pair.</p> <p><code>dict_query</code> executes at k-time. </p>"},{"location":"opcodes/dict_query.html#syntax","title":"Syntax","text":"<pre><code>kexists   dict_query idict, \"exists\"\nksize     dict_query idict, \"size\"\nktype     dict_query idict, \"type\"\nSKeys[]   dict_query idict, \"keys\"\nkKeys[]   dict_query idict, \"keys\"\nkValues[] dict_query idict, \"values\"\nSValues[] dict_query idict, \"values\"\n</code></pre>"},{"location":"opcodes/dict_query.html#arguments","title":"Arguments","text":"<ul> <li><code>idict</code>: the handle of the dict, as returned by <code>dict_new</code></li> </ul>"},{"location":"opcodes/dict_query.html#output","title":"Output","text":"<p>NB: the arrays returned from keys and values can have either an S- or a k-type,  depending on the type definition of the array </p>"},{"location":"opcodes/dict_query.html#execution-time","title":"Execution Time","text":"<ul> <li>Performance</li> </ul>"},{"location":"opcodes/dict_query.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n--nosound \n&lt;/CsOptions&gt;\n&lt;CsInstruments&gt;\n\n/*\n\n  Example file for dict_query\n\n  ... dict_query idict, Scmd\n\n  where Scmd can be: 'size', 'type', 'exists', 'keys', 'values'\n\n*/\n\n\ninstr 1\n  ; get all the keys as an array\n  idict1 dict_new \"sf\", 0, \"keyA\", 1, \"keyB\", 2, \"keyC\", 3\n  ; check that the dict exists\n  kexists dict_query idict1, \"exists\"\n  ktype   dict_query idict1, \"type\"\n  printf \"dict exists = %d, type = %d \\n\", 1, kexists, ktype\n\n  SKeys[] dict_query idict1, \"keys\"\n  printarray SKeys\n\n  ; now check a bogus handle\n  kexists999 dict_query 999, \"exists\"\n  printf \"dict 999 exists = %d \\n\", 1, kexists999\n\n  ; get the keys from a different dict\n  idict2 dict_new \"if\", 0, 1,100, 10,1000, 2,200\n  kKeys[] dict_query idict2, \"keys\"\n  printarray kKeys, 1, \"%.0f\"\n  printf \"idict2 has size=%d\\n\", 1, dict_query(idict2, \"size\")\n\n  ; get values as an array\n  idict3 dict_new \"is\", 0, 10, \"foo\", 20, \"bar\", 30, \"baz\"\n  Svals[] dict_query idict3, \"values\"\n  printarray Svals\n\n\n  kVals[] dict_query idict2, \"values\"\n  printarray kVals\n\n  ; query the type of the dict\n  ktype  dict_query idict2, \"type\"\n  printf \"the type of dict %d is %d\\n\", 1, idict2, ktype  \n\n  turnoff\nendin\n\n&lt;/CsInstruments&gt;\n&lt;CsScore&gt;\ni 1 0 0.1\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/dict_query.html#see-also","title":"See also","text":"<ul> <li>dict_iter</li> <li>dict_size</li> </ul>"},{"location":"opcodes/dict_query.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/dict_set.html","title":"dict_set","text":""},{"location":"opcodes/dict_set.html#abstract","title":"Abstract","text":"<p>Set a value from a hashtable</p>"},{"location":"opcodes/dict_set.html#description","title":"Description","text":"<p>A hashtable is a mapping from a key to a value. The <code>dict_</code> family of opcodes implement a hashtable mapping either strings or integers to strings or floats. <code>dict_set</code> sets the value corresponding to a key if the key is already present, or inserts a key:value pair otherwise.</p> <p>NB: To remove a key-value pair use <code>dict_del</code></p> <p>Tip</p> <p>It is possible to set multiple values at i-time directly with dict_new</p>"},{"location":"opcodes/dict_set.html#syntax","title":"Syntax","text":"<pre><code>dict_set idict, xkey, xvalue\n</code></pre>"},{"location":"opcodes/dict_set.html#arguments","title":"Arguments","text":"<ul> <li><code>idict</code>: the handle of the dict, as returned by <code>dict_new</code></li> <li><code>xkey</code>: the key to set. Its type must match the type definition of the dict.           (a string or a possitive integer)</li> <li><code>xvalue</code>: the value to set. Its type must match the type definition of the   dict (a str or a numeric value)</li> </ul>"},{"location":"opcodes/dict_set.html#execution-time","title":"Execution Time","text":"<ul> <li>Init</li> <li>Performance</li> </ul>"},{"location":"opcodes/dict_set.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n; -odac  -iadc    ;;;RT audio out and in\n\n&lt;/CsOptions&gt;\n&lt;CsInstruments&gt;\n\nsr = 44100\nksmps = 32\nnchnls = 2\n\ninstr 1\n  ; create a local dict, mapping strings to numbers\n  idict dict_new \"sf\"\n  dict_free idict\n\n  ; set key a key:value pair\n  dict_set idict, \"bar\", 123\n\n  ; retrieve the value\n  kbar dict_get idict, \"bar\"\n\n  ; get a non-existent key, will output the default\n  kfoo dict_get idict, \"foo\", -1\n\n  printf \"&gt;&gt;&gt;&gt; bar: %f,  foo: %f \\n\", 1, kbar, kfoo\n\n  ; now create another dict, this one will outlive this note\n  idict2 dict_new \"str:str\", \"baz\", \"bazvalue\", \"foo\", \"foovalue\"\n\n  ; schedule another inst, pass this dict\n  event \"i\", 2, 0, 1, idict2\n  turnoff\nendin\n\ninstr 2\n  idict = p4\n  print_dict idict\n\n  Sbaz = dict_get(idict, \"baz\")\n  printf \"instr 2, kbaz = %s \\n\", 1, Sbaz\n\n  ; free dict at the end of this note\n  dict_free idict, 1\n  turnoff\nendin\n\n; schedule 1, 0, 1\n\n&lt;/CsInstruments&gt;\n&lt;CsScore&gt;\n\ni 1 0 2\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre> <pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n-m0\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\nsr     = 44100\nksmps  = 64\nnchnls = 2\n0dbfs  = 1\n\ngidict dict_new \"sf\"\n\nopcode argset, 0, iSk\n  ip1, Sparam, kvalue xin\n  Skey sprintf \"%.4f:%s\", ip1, Sparam\n  dict_set gidict, Skey, kvalue\nendop\n\nopcode argget, k, Si\n  Sparam, idefault xin\n  Skey sprintf \"%.4f:%s\", p1, Sparam\n  kout dict_get gidict, Skey, idefault\n  xout kout\n  ;; delete key at end of event\n  defer \"dict_set\", gidict, Sparam \nendop\n\ninstr exit\n  prints \"Exiting csound \\n\"\n  exitnow\nendin\n\ninstr 1\n  inum uniqinstance 2\n  kfreq = linseg(random(4000, 2000), p3, random(300, 350))\n  argset inum, \"freq\", kfreq\n  schedule inum, 0, 3\n  ksize dict_size gidict\n  printk2 ksize\n  atstop p1, 0, p3\nendin\n\ninstr 2\n  kfreq argget \"freq\", 1000 \n  a0 oscili 0.02, kfreq\n  a0 *= linsegr:a(0, 0.1, 1, 0.1, 0)\n  outs a0, a0\nendin\n\ninstr example_dict\n  schedule 1, 0, 0.01\n  schedule \"exit\", 10, 0.1\n  turnoff\nendin\n\n;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\ninstr 10\n  inum uniqinstance 11, 10000\n  kfreq = linseg(4000, p3, random(300, 350))\n  Schan = sprintf(\"%f_freq\", inum)\n  dict_set gidict, Schan, kfreq\n  schedule inum, 0, p3\nendin\n\ninstr 11\n  Skey sprintf \"%f_freq\", p1\n  printf \"p1=%.6f \\n\", 1,  p1\n  kfreq dict_get gidict, Skey, 1000\n  ;; delete key at end of event\n  defer \"dict_set\", gidict, Skey\n  a0 oscili 0.02, kfreq\n  a0 *= linsegr:a(0, p3*0.1, 1, p3*0.9, 0)\n  outs a0, a0\nendin\n\ninstr dictsize\n  isize = dict_size:i(gidict)\n  print isize\n  turnoff\nendin\n\ninstr example2\n  i0 = 0\n  istep = 0.01\n  idur = 0.3\n  while i0 &lt; 10000 do \n    schedule 10, i0 * istep, idur\n    i0 += 1\n    print i0\n  od\n  iendtime = (i0 + 2) * istep + idur\n  schedule \"dictsize\", iendtime-0.005, -1\n  schedule \"exit\", iendtime, -1\n  turnoff\nendin\n\n;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\ninstr 20\n  inum uniqinstance 21, 10000\n  kfreq = linseg(4000, p3, random(300, 350))\n  Schan = sprintf(\"%f_freq\", inum)\n  ; printf \"%s \\n\", 1, Schan\n  chnset kfreq, Schan\n  schedule inum, 0, p3\nendin\n\ninstr 21\n  Skey sprintf \"%f_freq\", p1\n  printf \"p1=%.6f \\n\", 1,  p1\n  kfreq chnget Skey\n  a0 oscili 0.02, kfreq\n  a0 *= linsegr:a(0, p3*0.1, 1, p3*0.9, 0)\n  outs a0, a0\nendin\n\ninstr example3\n  ; the same as example2 but with channels\n  i0 = 0\n  istep = 0.01\n  idur = 0.3\n  while i0 &lt; 10000 do \n    schedule 20, i0 * istep, idur\n    i0 += 1\n    print i0\n\n  od\n  schedule \"exit\", (i0 + 1) * istep + idur, -1\n  turnoff\nendin\n\n; schedule \"example_dict\", 0, 1\nschedule \"example2\", 0, 1\n; schedule \"example3\", 0, 1\n\n\n&lt;/CsInstruments&gt;\ne 10\n&lt;CsScore&gt;\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/dict_set.html#see-also","title":"See also","text":"<ul> <li>dict_new</li> <li>dict_get</li> <li>dict_del</li> <li>defer</li> <li>dict_free</li> </ul>"},{"location":"opcodes/dict_set.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019 Last update: 2021</p>"},{"location":"opcodes/dict_size.html","title":"dict_size","text":""},{"location":"opcodes/dict_size.html#abstract","title":"Abstract","text":"<p>Returns the number of key:value pairs in a dict</p>"},{"location":"opcodes/dict_size.html#description","title":"Description","text":"<p>A hashtable is a mapping from a key to a value. The <code>dict_</code> family of opcodes  implement a hashtable mapping either strings or integers to strings or floats. </p> <p><code>dict_size</code> returns the number of such key:value pairs inside a dict. If the handle passed does not point to a valid dict, <code>dict_size</code> returns -1. It is thus possible to use it to check that the passed handle is valid (similar to <code>dict_query idict \"exists\"</code>, see dict_query)</p> <p><code>dict_size</code> can be used together with dict_iter to iterate over the key:value pairs </p>"},{"location":"opcodes/dict_size.html#syntax","title":"Syntax","text":"<pre><code>isize dict_size idict\nksize dict_size idict\n</code></pre> <p><code>dict_size</code> executes both at i-time and k-time. </p>"},{"location":"opcodes/dict_size.html#arguments","title":"Arguments","text":"<ul> <li><code>\u00ecdict</code>: the handle of the dict, as returned by <code>dict_new</code></li> </ul>"},{"location":"opcodes/dict_size.html#output","title":"Output","text":"<ul> <li><code>ksize</code>: the number of key:value pairs in the dict</li> </ul>"},{"location":"opcodes/dict_size.html#execution-time","title":"Execution Time","text":"<ul> <li>Init </li> <li>Performance</li> </ul>"},{"location":"opcodes/dict_size.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n\n--nosound\n\n&lt;/CsOptions&gt;\n&lt;CsInstruments&gt;\n\nsr = 44100\nksmps = 32\nnchnls = 2\n\ninstr 1 \n  ; create a local dict, mapping strings to numbers\n  idict dict_new \"sf\"\n\n  ; set key a key:value pair\n  dict_set idict, \"bar\", 123\n\n  ksize = dict_size(idict)\n  printf \"size: %d\", 1, ksize\n\n  dict_set idict, \"foo\", 4\n  ksize = dict_size(idict)\n  printf \"size: %d\", 1, ksize\n\n  ; size does not change now\n  dict_set idict, \"foo\", 10\n  ksize = dict_size(idict)\n  printf \"size: %d\", 1, ksize\n\n  ; we delete a key, size is reduced\n  dict_set idict, \"foo\"\n  ksize = dict_size(idict)\n  printf \"size: %d\", 1, ksize\n\n  turnoff\nendin\n\n\n&lt;/CsInstruments&gt;\n&lt;CsScore&gt;\n\ni 1 0 1\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt; \n</code></pre>"},{"location":"opcodes/dict_size.html#see-also","title":"See also","text":"<ul> <li>dict_iter</li> <li>dict_set</li> </ul>"},{"location":"opcodes/dict_size.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/diode_ringmod.html","title":"diode_ringmod","text":""},{"location":"opcodes/diode_ringmod.html#abstract","title":"Abstract","text":"<p>A ring modulator with optional non-linearities</p>"},{"location":"opcodes/diode_ringmod.html#description","title":"Description","text":"<p><code>diode_ringmod</code> is a ring modulator with optional non-linearities. It implements a built-in sinusoidal carrier signal. The carrier is passed through a diode simulation prior to being multiplied with the input. This signal passes through a feedback stage.</p> <pre><code>Sinewave : Diode Rect (abs(x)*2-0.2) : _ * Input : Feedback\n</code></pre> <p><code>knonlinearities</code> controls the amount of jitter in the carrier's freq and feedback amount. <code>diode_ringmod</code> is a port of Loser's ringmodulator jsfx plugin distributed with <code>REAPER</code></p>"},{"location":"opcodes/diode_ringmod.html#syntax","title":"Syntax","text":"<pre><code>aout diode_ringmod ain, kfreq, kdiode=0, kfeedback=0, knonlinear=0, koversample=0\n</code></pre>"},{"location":"opcodes/diode_ringmod.html#arguments","title":"Arguments","text":"<ul> <li><code>ain</code>: the input signal</li> <li><code>kfreq</code>: the carrier's frequency (a sine wave)</li> <li><code>kdiode</code>: if 1, the carrier is passed through a diode rectification stage</li> <li><code>kfeedback</code>: the amount of feedback (between 0 and 1, 0=no feedback)</li> <li><code>knonlinear</code>: the amount of non linearities (between 0 and 1, 0=no non linearities)</li> <li><code>koversample</code>: if 1, oversampling x 2 is performed</li> </ul>"},{"location":"opcodes/diode_ringmod.html#output","title":"Output","text":"<ul> <li><code>aout</code>: audio output of the ring modulator</li> </ul>"},{"location":"opcodes/diode_ringmod.html#execution-time","title":"Execution Time","text":"<ul> <li>Performance (audio)</li> </ul>"},{"location":"opcodes/diode_ringmod.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n\n&lt;CsInstruments&gt;\n\n/*\n\n    This is the example file for diode_ringmod\n\n    To be run inside CsoundQt\n\n    NB: diode_ringmod is a port of the jsfx plugin\n    Loser/ringmodulator, which implements diode rectification\n    and non linear behavior in the feedback path. \n\n    aout diode_ringmode a1, kmodfreq, kdiode=1, kfeedback=0, knonlin=0.2, koversample=0\n\n    kmodfreq: frequency of the mod. signal\n    kdiode: if 1, a diode rectification stage is applied to the mod. signal\n    kfeedback: range is 0 to 1.\n    knonlin: range 0 to 1, implements non-linearities in feedback and mod. freq (for \n        the first case only, which used the builtin oscillator)\n    koversample: if 1, 2x oversampling is used.\n\n*/\n\nsr     = 44100\nksmps  = 64\nnchnls = 2\n0dbfs  = 1\n\nchn_k \"modmidi\", \"r\"\nchn_k \"feedback\", \"r\"\nchn_k \"nonlinear\", \"r\"\nchn_k \"oversample\", \"r\"\nchn_k \"diode\", \"r\"\n\ngaOuts[] init 2\n\n\nmassign 1, 1\ninstr 1\n  imidinote notnum\n  ivel1 ampmidi 127\n  ifreq mtof imidinote\n  idb bpf ivel1, 0, -120, 64, -20, 90, -12, 127, 0\n  iamp = ampdb(idb) * 0.2\n  asig vco2 iamp, ifreq\n  ; asig oscili iamp, ifreq\n  aenv adsr 0.01, 0.1, 0.8, 0.2\n  asig *= aenv\n  gaOuts[0] = gaOuts[0] + asig\n\nendin\n\ninstr 100\n  kmodmidi = int(chnget:k(\"modmidi\") * 4)/4\n  if changed(kmodmidi) == 1 then\n    outvalue \"note\", mton(kmodmidi)\n  endif\n  kdiode chnget \"diode\"\n  kfeedback chnget \"feedback\"\n  knonlinear chnget \"nonlinear\"\n  koversample chnget \"oversample\"\n  kmodfreq = mtof:k(kmodmidi)\n  a1 = gaOuts[0]\n  a2 diode_ringmod a1, kmodfreq, kdiode, kfeedback, knonlinear, koversample\n  outs a2, a2\n  gaOuts[0] = 0\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\ni 100 0 3600\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n\n\n&lt;bsbPanel&gt;\n &lt;label&gt;Widgets&lt;/label&gt;\n &lt;objectName/&gt;\n &lt;x&gt;100&lt;/x&gt;\n &lt;y&gt;100&lt;/y&gt;\n &lt;width&gt;320&lt;/width&gt;\n &lt;height&gt;240&lt;/height&gt;\n &lt;visible&gt;true&lt;/visible&gt;\n &lt;uuid/&gt;\n &lt;bgcolor mode=\"nobackground\"&gt;\n  &lt;r&gt;255&lt;/r&gt;\n  &lt;g&gt;255&lt;/g&gt;\n  &lt;b&gt;255&lt;/b&gt;\n &lt;/bgcolor&gt;\n &lt;bsbObject version=\"2\" type=\"BSBKnob\"&gt;\n  &lt;objectName&gt;modmidi&lt;/objectName&gt;\n  &lt;x&gt;19&lt;/x&gt;\n  &lt;y&gt;19&lt;/y&gt;\n  &lt;width&gt;100&lt;/width&gt;\n  &lt;height&gt;100&lt;/height&gt;\n  &lt;uuid&gt;{4c2b5117-afe9-47b7-b0e7-ee5d8cc56120}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;0&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;minimum&gt;24.00000000&lt;/minimum&gt;\n  &lt;maximum&gt;100.00000000&lt;/maximum&gt;\n  &lt;value&gt;69.18960000&lt;/value&gt;\n  &lt;mode&gt;lin&lt;/mode&gt;\n  &lt;mouseControl act=\"\"&gt;continuous&lt;/mouseControl&gt;\n  &lt;resolution&gt;0.01000000&lt;/resolution&gt;\n  &lt;randomizable group=\"0\"&gt;false&lt;/randomizable&gt;\n  &lt;color&gt;\n   &lt;r&gt;245&lt;/r&gt;\n   &lt;g&gt;124&lt;/g&gt;\n   &lt;b&gt;0&lt;/b&gt;\n  &lt;/color&gt;\n  &lt;textcolor&gt;#f37b00&lt;/textcolor&gt;\n  &lt;border&gt;1&lt;/border&gt;\n  &lt;borderColor&gt;#f47b00&lt;/borderColor&gt;\n  &lt;showvalue&gt;true&lt;/showvalue&gt;\n  &lt;flatstyle&gt;true&lt;/flatstyle&gt;\n  &lt;integerMode&gt;false&lt;/integerMode&gt;\n &lt;/bsbObject&gt;\n &lt;bsbObject version=\"2\" type=\"BSBLabel\"&gt;\n  &lt;objectName/&gt;\n  &lt;x&gt;24&lt;/x&gt;\n  &lt;y&gt;119&lt;/y&gt;\n  &lt;width&gt;95&lt;/width&gt;\n  &lt;height&gt;50&lt;/height&gt;\n  &lt;uuid&gt;{2cea6dc5-e69f-4042-a4ea-46cface19e43}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;-3&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;label&gt;Mod. Midinote&lt;/label&gt;\n  &lt;alignment&gt;center&lt;/alignment&gt;\n  &lt;valignment&gt;top&lt;/valignment&gt;\n  &lt;font&gt;Liberation Sans&lt;/font&gt;\n  &lt;fontsize&gt;16&lt;/fontsize&gt;\n  &lt;precision&gt;3&lt;/precision&gt;\n  &lt;color&gt;\n   &lt;r&gt;241&lt;/r&gt;\n   &lt;g&gt;122&lt;/g&gt;\n   &lt;b&gt;0&lt;/b&gt;\n  &lt;/color&gt;\n  &lt;bgcolor mode=\"nobackground\"&gt;\n   &lt;r&gt;255&lt;/r&gt;\n   &lt;g&gt;255&lt;/g&gt;\n   &lt;b&gt;255&lt;/b&gt;\n  &lt;/bgcolor&gt;\n  &lt;bordermode&gt;false&lt;/bordermode&gt;\n  &lt;borderradius&gt;1&lt;/borderradius&gt;\n  &lt;borderwidth&gt;0&lt;/borderwidth&gt;\n &lt;/bsbObject&gt;\n &lt;bsbObject version=\"2\" type=\"BSBKnob\"&gt;\n  &lt;objectName&gt;feedback&lt;/objectName&gt;\n  &lt;x&gt;134&lt;/x&gt;\n  &lt;y&gt;19&lt;/y&gt;\n  &lt;width&gt;100&lt;/width&gt;\n  &lt;height&gt;100&lt;/height&gt;\n  &lt;uuid&gt;{c4b6071d-88bf-451a-9568-110640ac735e}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;0&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;minimum&gt;0.00000000&lt;/minimum&gt;\n  &lt;maximum&gt;1.00000000&lt;/maximum&gt;\n  &lt;value&gt;0.55000000&lt;/value&gt;\n  &lt;mode&gt;lin&lt;/mode&gt;\n  &lt;mouseControl act=\"\"&gt;continuous&lt;/mouseControl&gt;\n  &lt;resolution&gt;0.01000000&lt;/resolution&gt;\n  &lt;randomizable group=\"0\"&gt;false&lt;/randomizable&gt;\n  &lt;color&gt;\n   &lt;r&gt;245&lt;/r&gt;\n   &lt;g&gt;124&lt;/g&gt;\n   &lt;b&gt;0&lt;/b&gt;\n  &lt;/color&gt;\n  &lt;textcolor&gt;#f37b00&lt;/textcolor&gt;\n  &lt;border&gt;1&lt;/border&gt;\n  &lt;borderColor&gt;#f47b00&lt;/borderColor&gt;\n  &lt;showvalue&gt;true&lt;/showvalue&gt;\n  &lt;flatstyle&gt;true&lt;/flatstyle&gt;\n  &lt;integerMode&gt;false&lt;/integerMode&gt;\n &lt;/bsbObject&gt;\n &lt;bsbObject version=\"2\" type=\"BSBLabel\"&gt;\n  &lt;objectName/&gt;\n  &lt;x&gt;139&lt;/x&gt;\n  &lt;y&gt;119&lt;/y&gt;\n  &lt;width&gt;95&lt;/width&gt;\n  &lt;height&gt;31&lt;/height&gt;\n  &lt;uuid&gt;{54f75bbf-7d81-4bbe-b60a-f5531ee83730}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;-3&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;label&gt;Feedback&lt;/label&gt;\n  &lt;alignment&gt;center&lt;/alignment&gt;\n  &lt;valignment&gt;top&lt;/valignment&gt;\n  &lt;font&gt;Liberation Sans&lt;/font&gt;\n  &lt;fontsize&gt;16&lt;/fontsize&gt;\n  &lt;precision&gt;3&lt;/precision&gt;\n  &lt;color&gt;\n   &lt;r&gt;241&lt;/r&gt;\n   &lt;g&gt;122&lt;/g&gt;\n   &lt;b&gt;0&lt;/b&gt;\n  &lt;/color&gt;\n  &lt;bgcolor mode=\"nobackground\"&gt;\n   &lt;r&gt;255&lt;/r&gt;\n   &lt;g&gt;255&lt;/g&gt;\n   &lt;b&gt;255&lt;/b&gt;\n  &lt;/bgcolor&gt;\n  &lt;bordermode&gt;false&lt;/bordermode&gt;\n  &lt;borderradius&gt;1&lt;/borderradius&gt;\n  &lt;borderwidth&gt;0&lt;/borderwidth&gt;\n &lt;/bsbObject&gt;\n &lt;bsbObject version=\"2\" type=\"BSBCheckBox\"&gt;\n  &lt;objectName&gt;diode&lt;/objectName&gt;\n  &lt;x&gt;359&lt;/x&gt;\n  &lt;y&gt;19&lt;/y&gt;\n  &lt;width&gt;40&lt;/width&gt;\n  &lt;height&gt;40&lt;/height&gt;\n  &lt;uuid&gt;{174798b9-e1f6-41a4-9218-3f0615298d18}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;0&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;selected&gt;true&lt;/selected&gt;\n  &lt;label/&gt;\n  &lt;pressedValue&gt;1&lt;/pressedValue&gt;\n  &lt;randomizable group=\"0\"&gt;false&lt;/randomizable&gt;\n &lt;/bsbObject&gt;\n &lt;bsbObject version=\"2\" type=\"BSBLabel\"&gt;\n  &lt;objectName/&gt;\n  &lt;x&gt;399&lt;/x&gt;\n  &lt;y&gt;24&lt;/y&gt;\n  &lt;width&gt;95&lt;/width&gt;\n  &lt;height&gt;31&lt;/height&gt;\n  &lt;uuid&gt;{b189b7d6-b223-4886-ad7c-f97e12fdd35e}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;-3&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;label&gt;Diode&lt;/label&gt;\n  &lt;alignment&gt;left&lt;/alignment&gt;\n  &lt;valignment&gt;center&lt;/valignment&gt;\n  &lt;font&gt;Liberation Sans&lt;/font&gt;\n  &lt;fontsize&gt;16&lt;/fontsize&gt;\n  &lt;precision&gt;3&lt;/precision&gt;\n  &lt;color&gt;\n   &lt;r&gt;241&lt;/r&gt;\n   &lt;g&gt;122&lt;/g&gt;\n   &lt;b&gt;0&lt;/b&gt;\n  &lt;/color&gt;\n  &lt;bgcolor mode=\"nobackground\"&gt;\n   &lt;r&gt;255&lt;/r&gt;\n   &lt;g&gt;255&lt;/g&gt;\n   &lt;b&gt;255&lt;/b&gt;\n  &lt;/bgcolor&gt;\n  &lt;bordermode&gt;false&lt;/bordermode&gt;\n  &lt;borderradius&gt;1&lt;/borderradius&gt;\n  &lt;borderwidth&gt;0&lt;/borderwidth&gt;\n &lt;/bsbObject&gt;\n &lt;bsbObject version=\"2\" type=\"BSBCheckBox\"&gt;\n  &lt;objectName&gt;oversample&lt;/objectName&gt;\n  &lt;x&gt;359&lt;/x&gt;\n  &lt;y&gt;64&lt;/y&gt;\n  &lt;width&gt;40&lt;/width&gt;\n  &lt;height&gt;40&lt;/height&gt;\n  &lt;uuid&gt;{155ab1d9-3b3d-4af4-afea-3079c08c79cc}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;0&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;selected&gt;true&lt;/selected&gt;\n  &lt;label/&gt;\n  &lt;pressedValue&gt;1&lt;/pressedValue&gt;\n  &lt;randomizable group=\"0\"&gt;false&lt;/randomizable&gt;\n &lt;/bsbObject&gt;\n &lt;bsbObject version=\"2\" type=\"BSBLabel\"&gt;\n  &lt;objectName/&gt;\n  &lt;x&gt;399&lt;/x&gt;\n  &lt;y&gt;69&lt;/y&gt;\n  &lt;width&gt;140&lt;/width&gt;\n  &lt;height&gt;31&lt;/height&gt;\n  &lt;uuid&gt;{40e11ba9-381e-4aa0-bdbc-17d726043784}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;-3&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;label&gt;Oversample (2x)&lt;/label&gt;\n  &lt;alignment&gt;left&lt;/alignment&gt;\n  &lt;valignment&gt;center&lt;/valignment&gt;\n  &lt;font&gt;Liberation Sans&lt;/font&gt;\n  &lt;fontsize&gt;16&lt;/fontsize&gt;\n  &lt;precision&gt;3&lt;/precision&gt;\n  &lt;color&gt;\n   &lt;r&gt;241&lt;/r&gt;\n   &lt;g&gt;122&lt;/g&gt;\n   &lt;b&gt;0&lt;/b&gt;\n  &lt;/color&gt;\n  &lt;bgcolor mode=\"nobackground\"&gt;\n   &lt;r&gt;255&lt;/r&gt;\n   &lt;g&gt;255&lt;/g&gt;\n   &lt;b&gt;255&lt;/b&gt;\n  &lt;/bgcolor&gt;\n  &lt;bordermode&gt;false&lt;/bordermode&gt;\n  &lt;borderradius&gt;1&lt;/borderradius&gt;\n  &lt;borderwidth&gt;0&lt;/borderwidth&gt;\n &lt;/bsbObject&gt;\n &lt;bsbObject version=\"2\" type=\"BSBKnob\"&gt;\n  &lt;objectName&gt;nonlinear&lt;/objectName&gt;\n  &lt;x&gt;249&lt;/x&gt;\n  &lt;y&gt;19&lt;/y&gt;\n  &lt;width&gt;100&lt;/width&gt;\n  &lt;height&gt;100&lt;/height&gt;\n  &lt;uuid&gt;{f6f711dd-c93a-4db7-8483-6d84f6d614a2}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;0&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;minimum&gt;0.00000000&lt;/minimum&gt;\n  &lt;maximum&gt;1.00000000&lt;/maximum&gt;\n  &lt;value&gt;0.35000000&lt;/value&gt;\n  &lt;mode&gt;lin&lt;/mode&gt;\n  &lt;mouseControl act=\"\"&gt;continuous&lt;/mouseControl&gt;\n  &lt;resolution&gt;0.01000000&lt;/resolution&gt;\n  &lt;randomizable group=\"0\"&gt;false&lt;/randomizable&gt;\n  &lt;color&gt;\n   &lt;r&gt;245&lt;/r&gt;\n   &lt;g&gt;124&lt;/g&gt;\n   &lt;b&gt;0&lt;/b&gt;\n  &lt;/color&gt;\n  &lt;textcolor&gt;#f37b00&lt;/textcolor&gt;\n  &lt;border&gt;1&lt;/border&gt;\n  &lt;borderColor&gt;#f47b00&lt;/borderColor&gt;\n  &lt;showvalue&gt;true&lt;/showvalue&gt;\n  &lt;flatstyle&gt;true&lt;/flatstyle&gt;\n  &lt;integerMode&gt;false&lt;/integerMode&gt;\n &lt;/bsbObject&gt;\n &lt;bsbObject version=\"2\" type=\"BSBLabel\"&gt;\n  &lt;objectName/&gt;\n  &lt;x&gt;254&lt;/x&gt;\n  &lt;y&gt;119&lt;/y&gt;\n  &lt;width&gt;95&lt;/width&gt;\n  &lt;height&gt;50&lt;/height&gt;\n  &lt;uuid&gt;{538a713d-805c-47a9-b626-c22f06771d2c}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;-3&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;label&gt;Non-linearities&lt;/label&gt;\n  &lt;alignment&gt;center&lt;/alignment&gt;\n  &lt;valignment&gt;top&lt;/valignment&gt;\n  &lt;font&gt;Liberation Sans&lt;/font&gt;\n  &lt;fontsize&gt;16&lt;/fontsize&gt;\n  &lt;precision&gt;3&lt;/precision&gt;\n  &lt;color&gt;\n   &lt;r&gt;241&lt;/r&gt;\n   &lt;g&gt;122&lt;/g&gt;\n   &lt;b&gt;0&lt;/b&gt;\n  &lt;/color&gt;\n  &lt;bgcolor mode=\"nobackground\"&gt;\n   &lt;r&gt;255&lt;/r&gt;\n   &lt;g&gt;255&lt;/g&gt;\n   &lt;b&gt;255&lt;/b&gt;\n  &lt;/bgcolor&gt;\n  &lt;bordermode&gt;false&lt;/bordermode&gt;\n  &lt;borderradius&gt;1&lt;/borderradius&gt;\n  &lt;borderwidth&gt;0&lt;/borderwidth&gt;\n &lt;/bsbObject&gt;\n &lt;bsbObject version=\"2\" type=\"BSBDisplay\"&gt;\n  &lt;objectName&gt;note&lt;/objectName&gt;\n  &lt;x&gt;34&lt;/x&gt;\n  &lt;y&gt;177&lt;/y&gt;\n  &lt;width&gt;80&lt;/width&gt;\n  &lt;height&gt;36&lt;/height&gt;\n  &lt;uuid&gt;{cc33e535-60c1-44e6-b835-f1991d685c82}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;-3&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;label&gt;4A&lt;/label&gt;\n  &lt;alignment&gt;center&lt;/alignment&gt;\n  &lt;valignment&gt;center&lt;/valignment&gt;\n  &lt;font&gt;Liberation Sans&lt;/font&gt;\n  &lt;fontsize&gt;24&lt;/fontsize&gt;\n  &lt;precision&gt;3&lt;/precision&gt;\n  &lt;color&gt;\n   &lt;r&gt;255&lt;/r&gt;\n   &lt;g&gt;170&lt;/g&gt;\n   &lt;b&gt;0&lt;/b&gt;\n  &lt;/color&gt;\n  &lt;bgcolor mode=\"nobackground\"&gt;\n   &lt;r&gt;255&lt;/r&gt;\n   &lt;g&gt;255&lt;/g&gt;\n   &lt;b&gt;255&lt;/b&gt;\n  &lt;/bgcolor&gt;\n  &lt;bordermode&gt;false&lt;/bordermode&gt;\n  &lt;borderradius&gt;1&lt;/borderradius&gt;\n  &lt;borderwidth&gt;0&lt;/borderwidth&gt;\n &lt;/bsbObject&gt;\n&lt;/bsbPanel&gt;\n&lt;bsbPresets&gt;\n&lt;/bsbPresets&gt;\n</code></pre>"},{"location":"opcodes/diode_ringmod.html#see-also","title":"See also","text":"<ul> <li>hilbert</li> </ul>"},{"location":"opcodes/diode_ringmod.html#reference","title":"Reference","text":"<ul> <li>https://en.wikipedia.org/wiki/Ring_modulation</li> </ul>"},{"location":"opcodes/diode_ringmod.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/extendarray.html","title":"extendarray","text":""},{"location":"opcodes/extendarray.html#abstract","title":"Abstract","text":"<p>Extend one array with the contents of a second array, in place</p>"},{"location":"opcodes/extendarray.html#description","title":"Description","text":"<p><code>extendarray</code> concatenates two arrays, placing the results in the first array. It works either at init or performance time, depending on the arrays passed.</p>"},{"location":"opcodes/extendarray.html#syntax","title":"Syntax","text":"<pre><code>extendarray iArray1[], iArray2\nextendarray kArray1[], kArray2\nextendarray kArray1[], iArray2\nextendarray SArray1[], SArray2\n</code></pre>"},{"location":"opcodes/extendarray.html#arguments","title":"Arguments","text":"<ul> <li>xArray1: the first array and the array where the result is placed</li> <li>xArray2: the second array</li> </ul>"},{"location":"opcodes/extendarray.html#output","title":"Output","text":""},{"location":"opcodes/extendarray.html#execution-time","title":"Execution Time","text":"<ul> <li>Init (if all arguments are of i type)</li> <li>Performance (for k or S types)</li> </ul>"},{"location":"opcodes/extendarray.html#examples","title":"Examples","text":"<pre><code>iArr1[] fillarray 0, 1, 2\niArr2[] fillarray 3, 4, 5\nextendarray iArr1, iArr2\n; iArr1 is now [0, 1, 2, 3, 4, 5]\n</code></pre>"},{"location":"opcodes/extendarray.html#see-also","title":"See also","text":"<ul> <li>setslice</li> <li>setrow</li> <li>slicearray)</li> <li>ftset</li> <li>ftslice</li> </ul>"},{"location":"opcodes/extendarray.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2020</p>"},{"location":"opcodes/fileexists.html","title":"file_exists","text":""},{"location":"opcodes/fileexists.html#abstract","title":"Abstract","text":"<p>Returns 1 if a file exists and can be read</p>"},{"location":"opcodes/fileexists.html#description","title":"Description","text":"<p><code>file_exists</code> checks if a given file path exists and returns 1 if it does, 0 otherwise. It doesn't check any search path of csound and does not expand any variables  (like \"~\" in unix). </p>"},{"location":"opcodes/fileexists.html#syntax","title":"Syntax","text":"<pre><code>iexists  fileexists  Spath\n</code></pre>"},{"location":"opcodes/fileexists.html#arguments","title":"Arguments","text":"<ul> <li><code>Spath</code>: the path to check</li> </ul>"},{"location":"opcodes/fileexists.html#output","title":"Output","text":"<ul> <li><code>iexists</code>: 1 if the file exists, 0 otherwise</li> </ul>"},{"location":"opcodes/fileexists.html#execution-time","title":"Execution Time","text":"<ul> <li>Init</li> </ul>"},{"location":"opcodes/fileexists.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\n\n/*\n    Example file for file_exists\n\n    file_exists returns 1 if a given path refers to an existing file\n\n*/\n\nksmps  = 64\nnchnls = 2\n0dbfs  = 1\n\ninstr 1\n    iexists file_exists \"file_exists.csd\"\n    print iexists\n    turnoff\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\ni1 0 1\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/fileexists.html#see-also","title":"See also","text":"<ul> <li>filevalid</li> <li>system</li> </ul>"},{"location":"opcodes/fileexists.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/filereadmeta.html","title":"filereadmeta","text":""},{"location":"opcodes/filereadmeta.html#abstract","title":"Abstract","text":"<p>Read metadata from a soundfile</p>"},{"location":"opcodes/filereadmeta.html#description","title":"Description","text":"<p>Reads metadata from a soundfile via libsndfile. Only a subset of keys, standardized across different fileformats is supported:</p> <ul> <li>title</li> <li>comment</li> <li>artist</li> <li>album</li> <li>tracknumber</li> <li>software</li> </ul> <p>The opcode has two forms: 1) a specific key is queried, in which case the opcode returns the string for that key, or an empty string if that key is not present; 2) no key is given and all the metadata is returned in two string arrays, one with all the keys and second with their corresponding values.</p>"},{"location":"opcodes/filereadmeta.html#syntax","title":"Syntax","text":"<pre><code>Svalue filereadmeta Ssndfile, Skey\nSkeys[], Svalues[] filereadmeta Ssndfile\n</code></pre>"},{"location":"opcodes/filereadmeta.html#arguments","title":"Arguments","text":"<ul> <li>Ssndfile: the path to a soundfile</li> <li>Skey: a metadata key to query</li> </ul>"},{"location":"opcodes/filereadmeta.html#output","title":"Output","text":"<ul> <li>Svalue: the string value for the given metadata key. It will be   empty if the key is not present</li> <li>Skeys: the keys present in the metadata</li> <li>Svalues: the string values corresponding to each key in Skeys</li> </ul>"},{"location":"opcodes/filereadmeta.html#execution-time","title":"Execution Time","text":"<ul> <li>Init</li> </ul>"},{"location":"opcodes/filereadmeta.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n--nosound\n\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\n/*\n    Svalue filereadmeta Ssndfile, Skey\n\n    Read metadata from sndfile. Skey can be one of \"comment\", \"title\",\n    \"artist\", \"album\", \"tracknumber\". If the given key is not present\n    an empty value is returned. \n\n*/\n\ninstr 1\n    Scomment filereadmeta \"sfwithmeta.flac\", \"comment\"\n    prints \"Comment: %s\\n\", Scomment\n    Stitle filereadmeta \"sfwithmeta.flac\", \"artist\"\n    prints \"Artist: %s\\n\", Stitle\n    turnoff\nendin\n\ninstr 2\n    Skeys[], Svalues[] filereadmeta \"sfwithmeta.flac\"\n    i0 = 0\n    while i0 &lt; lenarray(Skeys) do\n      prints \"%s = %s\\n\", Skeys[i0], Svalues[i0]\n      i0 += 1\n    od\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\ni1 0 0.1\ni2 0 0.1\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/filereadmeta.html#see-also","title":"See also","text":"<ul> <li>filesr</li> <li>filenchnls</li> <li>filenlen</li> <li>pathAbsolute</li> <li>findFileInPath</li> </ul>"},{"location":"opcodes/filereadmeta.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2021</p>"},{"location":"opcodes/findFileInPath.html","title":"findFileInPath","text":""},{"location":"opcodes/findFileInPath.html#abstract","title":"Abstract","text":"<p>Find a file inside the search paths of the csound environment</p>"},{"location":"opcodes/findFileInPath.html#description","title":"Description","text":"<p>Search for an existing file as csound would search when ,for example, loading a sample. Returns the absolute path</p>"},{"location":"opcodes/findFileInPath.html#syntax","title":"Syntax","text":"<pre><code>Spath findFileInPath Sfile\n</code></pre>"},{"location":"opcodes/findFileInPath.html#arguments","title":"Arguments","text":"<ul> <li><code>Sfile</code>: a relative path to an existing file</li> </ul>"},{"location":"opcodes/findFileInPath.html#output","title":"Output","text":"<ul> <li><code>Sout</code>: the absolute path, or \"\" if not found</li> </ul>"},{"location":"opcodes/findFileInPath.html#execution-time","title":"Execution Time","text":"<ul> <li>Init </li> </ul>"},{"location":"opcodes/findFileInPath.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n--nosound\n\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\n/*\n    Sabspath findFileInPath Sfile\n\n    Searched for Sfile, first in the current directory, then in the\n    directories specified in SSDIR. Returns the absolute path or \n    an empty string to signal that the file was not found.\n\n*/\n\nsr     = 44100\nksmps  = 64\nnchnls = 2\n0dbfs  = 1\n\ninstr 1\n    ; find the directory of this script\n    Spath findFileInPath \"findFileInPath.csd\"\n    if strlen(Spath) == 0 then\n      initerror \"Could not find file\"\n    endif\n\n    Sdir, Sbase pathSplit Spath\n    prints \"Spath: %s\\nFolder: %s \\n\", Spath, Sdir\n\n    Svalue getEnvVar \"SSDIR\"\n    prints \"SSDIR: %s \\n\", Svalue\n\n    Sscriptdir scriptDir\n    prints \"Directory of current script: %s \\n\", Sscriptdir\n\n    turnoff\n\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\ni1 0 1\n; f0 3600\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/findFileInPath.html#see-also","title":"See also","text":"<ul> <li>scriptDir</li> </ul>"},{"location":"opcodes/findFileInPath.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2020</p>"},{"location":"opcodes/findarray.html","title":"findarray","text":""},{"location":"opcodes/findarray.html#abstract","title":"Abstract","text":"<p>Find an element in an array</p>"},{"location":"opcodes/findarray.html#description","title":"Description","text":"<p><code>findarray</code> finds the index of an element in an array. If the element is not found it returns -1</p>"},{"location":"opcodes/findarray.html#syntax","title":"Syntax","text":"<pre><code>iindex findarray iarr[], ival, itolerance=1e-12\nkindex findarray karr[], kval, itolerance=1e-12\niindex findarray Sarr[], Sval\nkindex findarray Sarr[], Sval\n</code></pre>"},{"location":"opcodes/findarray.html#arguments","title":"Arguments","text":"<ul> <li>iarr / karr / Sarr: A 1D array to search</li> <li>ival / kval / Sval: the value to search</li> <li>itolerance: A tolerance value. When using floats it is not recommended to  check for equality but to check if two values are close enough</li> </ul>"},{"location":"opcodes/findarray.html#output","title":"Output","text":"<ul> <li>iindex / kindex: the index of the value inside the array, or -1 if the value is not found</li> </ul>"},{"location":"opcodes/findarray.html#execution-time","title":"Execution Time","text":"<ul> <li>Init </li> <li>Performance</li> </ul>"},{"location":"opcodes/findarray.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n--nosound\n; -odac\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\n\n/*\n\nDescription\n===========\n\nfindarray return the index of the first element which is equal to the \ngiven number. If the number is not found, the return value is -1\n\nSyntax\n======\n\n    kidx findarray karray[], kvalue/ivalue [, iepsilon=1e-12]\n    kidx findarray iarray[], kvalue [, iepsilon=1e-12]\n    idx  findarray iarray[], ivalue [, iepsilon=1e-12]\n    idx  findarray Sarray[], Svalue\n    kidx findarray Sarray[], Svalue\n*/\n\nksmps = 64\nnchnls = 2\n0dbfs  = 1\n\ninstr 1\n    karr[] fillarray 0, 0.5, 0.3, 10, 0.8\n    kidx findarray karr, 0.3\n    println \"kidx: %d\", kidx\n\n    karr2[] genarray_i 0, 100, 0.1\n    kidx2 findarray karr2, 70.8\n    println \"kidx2: %d\", kidx2\n    turnoff\nendin\n\ninstr 2\n    Sarr[] strsplit \"Zero One Two Three Four Five Six Seven Eight Nine\", \" \"\n    idx1 findarray Sarr, \"Three\"\n    idx2 findarray Sarr, \"Foo\"\n    prints \"Indexx of Three: %d, index of Foo: %d\\n\", idx1, idx2\n\n    turnoff\n\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\ni 1 0   0.1\ni 2 0.1 0.1\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/findarray.html#see-also","title":"See also","text":"<ul> <li>ftfind</li> <li>strsplit</li> <li>dict_get</li> </ul>"},{"location":"opcodes/findarray.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2021</p>"},{"location":"opcodes/frac2int.html","title":"frac2int","text":""},{"location":"opcodes/frac2int.html#abstract","title":"Abstract","text":"<p>Convert the fractional part of a number into an integer</p>"},{"location":"opcodes/frac2int.html#description","title":"Description","text":"<p><code>frac2int</code> can be used to convert the fractional part of a number (as passed, for example, as <code>p1</code>) back to an integer.</p>"},{"location":"opcodes/frac2int.html#syntax","title":"Syntax","text":"<pre><code>iInt frac2int iFloat, iMul\nkInt frac2int kFloat, kMul\n</code></pre>"},{"location":"opcodes/frac2int.html#arguments","title":"Arguments","text":"<ul> <li><code>iFloat</code> / <code>kFloat</code>: a number with a fractional part (for example, a   fractional <code>p1</code>)</li> <li><code>iMul</code> / <code>kMul</code>: the factor used to convert the initial integer into a   fraction (see example)</li> </ul>"},{"location":"opcodes/frac2int.html#output","title":"Output","text":"<ul> <li><code>iInt</code> / <code>kInt</code>: the integer value corresponding to the fractional part</li> </ul> <p>Note</p> <p>The integral part of the passed value is discarded</p> <pre><code>ival = 10 + 123 / 1000     ; =&gt; 10.123\nival2 frac2int ival, 1000  ; =&gt; 123\n</code></pre>"},{"location":"opcodes/frac2int.html#execution-time","title":"Execution Time","text":"<ul> <li>Init</li> <li>Performance</li> </ul>"},{"location":"opcodes/frac2int.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n--nosound\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\n\ninstr 1\n  inum frac2int 1.45, 100\n  print inum\n  turnoff\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\ni1 0 0.1\n; f0 3600\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/frac2int.html#see-also","title":"See also","text":"<ul> <li>frac</li> </ul>"},{"location":"opcodes/frac2int.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/ftfill.html","title":"ftfill","text":""},{"location":"opcodes/ftfill.html#abstract","title":"Abstract","text":"<p>create a table and fill it with values (like fillarray but for f-tables)</p>"},{"location":"opcodes/ftfill.html#description","title":"Description","text":"<p><code>ftfill</code> is a shortcut opcode to create a table and fill it with values. It explicitely disallows the user to set the table-number manually. </p>"},{"location":"opcodes/ftfill.html#syntax","title":"Syntax","text":"<pre><code>itabnum ftfill i0, [i1, i2, ...]\n</code></pre>"},{"location":"opcodes/ftfill.html#arguments","title":"Arguments","text":"<ul> <li>ix: The value(s) to place in the f-table</li> </ul>"},{"location":"opcodes/ftfill.html#output","title":"Output","text":"<ul> <li>itabnum: the number of the generated f-table</li> </ul>"},{"location":"opcodes/ftfill.html#execution-time","title":"Execution Time","text":"<ul> <li>Init </li> </ul>"},{"location":"opcodes/ftfill.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n; -odac\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\n\n/*\n\nDescription\n===========\n\nftfill creates a table and fills it with values. Like fillarray, but for f-tables.\n\n\nSyntax\n======\n\n    itabnum ftfill x0, [x1, x2, ...]\n\n**NB**: this is the same as ``itabnum ftgen 0, 0, 0, -2, x0, x1, x2, ...``\n\n*/\n\nksmps = 32\nnchnls = 2\n0dbfs  = 1\n\ninstr example1\n    itime2midi1 ftfill 0, 64, 4, 62, 5, 62, 6, 67\n    itime2midi2 ftfill 0, 60, 4, 60, 5, 59, 6, 59\n    ftprint itime2midi1\n    ftfree itime2midi1, 1\n    ftfree itime2midi2, 1\n    ; step=2, bisect the column 0.\n    kt = timeinsts() \n    kidx1 bisect kt, itime2midi1, 2\n    kidx2 bisect kt, itime2midi2, 2\n\n    ; -1: cosine interpolation, step size=2, offset=1\n    kmidi1 interp1d kidx1, itime2midi1, \"cos\", 2, 1\n    kmidi2 interp1d kidx2, itime2midi2, \"cos\", 2, 1\n\n    a0 squinewave a(mtof(kmidi1)), a(0.1), a(0.1)\n    a1 squinewave a(mtof(kmidi2)), a(0.2), a(0.5)\n    igain = 0.1\n    ifade = 0.2\n    aenv = linseg:a(0, ifade, igain, p3-ifade*2-0.1, igain, ifade, 0)\n    outch 1, a0*aenv, 2, a1*aenv\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\ni \"example1\" 0 1\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/ftfill.html#see-also","title":"See also","text":"<ul> <li>ftgen</li> <li>fillarray</li> <li>ftnew</li> <li>ftfree</li> </ul>"},{"location":"opcodes/ftfill.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/ftfind.html","title":"ftfind","text":""},{"location":"opcodes/ftfind.html#abstract","title":"Abstract","text":"<p>Find an element in a table</p>"},{"location":"opcodes/ftfind.html#description","title":"Description","text":"<p><code>ftfind</code> finds the index of an element in table. If the element is not found it returns -1</p>"},{"location":"opcodes/ftfind.html#syntax","title":"Syntax","text":"<pre><code>iindex ftfind itab, ival, itolerance=1e-12\nkindex ftfind ktab, kval, itolerance=1e-12\n</code></pre>"},{"location":"opcodes/ftfind.html#arguments","title":"Arguments","text":"<ul> <li>itab / ktab: A table</li> <li>ival / kval: The value to find</li> <li>itolerance: A tolerance value. When using floats it is not recommended to  check for equality but to check if two values are close enough</li> </ul>"},{"location":"opcodes/ftfind.html#output","title":"Output","text":"<ul> <li>iindex / kindex: the index of the value inside the table, or -1 if the value is not found</li> </ul>"},{"location":"opcodes/ftfind.html#execution-time","title":"Execution Time","text":"<ul> <li>Init </li> <li>Performance</li> </ul>"},{"location":"opcodes/ftfind.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n--nosound\n; -odac\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\n\n/*\n\nDescription\n===========\n\nftfind return the index of the first element in a table which is equal \nto the given number. If the number is not found, the return value is -1\n\nSyntax\n======\n\n    kidx ftfind ktabnum, kvalue, iepsilon=1e-12\n    iidx ftfind itabnum, ivalue, iepsilon=1e-12\n\n*/\n\nksmps = 64\nnchnls = 2\n0dbfs  = 1\n\ninstr 10\n    itabnum ftfill 0, 0.5, 0.3, 10, 0.8\n    iidx ftfind itabnum, 0.3\n    prints \"iidx: %d \\n\", iidx\n\n    turnoff\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\ni 10 0 0.1\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/ftfind.html#see-also","title":"See also","text":"<ul> <li>findarray</li> </ul>"},{"location":"opcodes/ftfind.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2021</p>"},{"location":"opcodes/ftnew.html","title":"ftnew","text":""},{"location":"opcodes/ftnew.html#abstract","title":"Abstract","text":"<p>creates a new table of a given size</p>"},{"location":"opcodes/ftnew.html#description","title":"Description","text":"<p><code>ftnew</code> is a shortcut opcode to create a new table of a given size. It is possible to set the elements to an initial value (default=0).  It explicitely disallows the user to set the table-number manually. </p>"},{"location":"opcodes/ftnew.html#syntax","title":"Syntax","text":"<pre><code>itabnum ftnew isize, [idefault=0]\n</code></pre>"},{"location":"opcodes/ftnew.html#arguments","title":"Arguments","text":"<ul> <li>isize: The size of the table.</li> <li>idefault: The initial value for all items in the table (default=0)</li> </ul>"},{"location":"opcodes/ftnew.html#output","title":"Output","text":"<ul> <li>itabnum: the number of the generated f-table</li> </ul>"},{"location":"opcodes/ftnew.html#execution-time","title":"Execution Time","text":"<ul> <li>Init </li> </ul>"},{"location":"opcodes/ftnew.html#examples","title":"Examples","text":"<pre><code>; create a table from an array of any size\nixs[] fillarray 0, 1, 2, 3, 4, 5\nitab ftnew lenarray(ixs)\ncopya2ftab ixs,itab\n</code></pre>"},{"location":"opcodes/ftnew.html#see-also","title":"See also","text":"<ul> <li>ftgen</li> <li>fillarray</li> <li>ftfill</li> <li>ftfree</li> </ul>"},{"location":"opcodes/ftnew.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2021</p>"},{"location":"opcodes/ftsetparams.html","title":"ftsetparams","text":""},{"location":"opcodes/ftsetparams.html#abstract","title":"Abstract","text":"<p>Set metadata parameters of a table, as if it was loaded via GEN1</p>"},{"location":"opcodes/ftsetparams.html#description","title":"Description","text":"<p><code>ftsetparams</code> can be used to set the parameters set via when reading a table via GEN1 (samplerate, number of channels, looping, etc). This are necessary by some opcodes (loscil, for example) to play correctly. Together with <code>ftslice</code> it can be used to extract a channel of a multichannel table preserving the table metadata.</p>"},{"location":"opcodes/ftsetparams.html#syntax","title":"Syntax","text":"<pre><code>ftsetparams ift, isamplerate, inumchannels, iloopstart=0, ibasenote=60\n</code></pre>"},{"location":"opcodes/ftsetparams.html#arguments","title":"Arguments","text":"<ul> <li><code>ift</code>: the table number to modify</li> <li><code>isamplerate</code>: the sample rate of the data saved in the table</li> <li><code>inumchannels</code>: the number of channels of the audio sample</li> <li><code>iloopstart</code>: if this is a loop, start of the sustain part</li> <li><code>ibasenote</code>: pitch of the sample, as midinote</li> </ul>"},{"location":"opcodes/ftsetparams.html#output","title":"Output","text":""},{"location":"opcodes/ftsetparams.html#execution-time","title":"Execution Time","text":"<ul> <li>Init</li> </ul>"},{"location":"opcodes/ftsetparams.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n-odac \n&lt;/CsOptions&gt;\n&lt;CsInstruments&gt;\n\nsr = 44100\nksmps = 64\nnchnls = 2\n0dbfs = 1\n\ngifunc0 ftgen 0, 0, 0, -1, \"musicbox.flac\", 0, 0, 0\n\ngi1 ftgen 0, 0, nsamp(gifunc0), 2, 0\nftslicei gifunc0, gi1, 0, 0, 2\nftsetparams gi1, ftsr:i(gifunc0), 1\n\ngi2 ftgen 0, 0, nsamp(gifunc0), 2, 0\nftslicei gifunc0, gi2, 1, 0, 2\nftsetparams gi2, ftsr:i(gifunc0), 1\n\ninstr 1\n    a0, a1 loscil 1, 1, gifunc0, 1\n    outch 1, a0, 2, a1\nendin\n\ninstr 2\n    a0 loscil 1, 1, gi1, 1\n    a1 loscil 1, 1, gi2, 1\n    outch 1, a0, 2, a1\nendin\n\n; schedule(1, 0, -1)\nschedule(2, 0, -1)\n&lt;/CsInstruments&gt;\n&lt;CsScore&gt;\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/ftsetparams.html#see-also","title":"See also","text":"<ul> <li>ftslice</li> <li>ftslicei</li> <li>loscil</li> <li>ftsr</li> <li>ftchnls</li> </ul>"},{"location":"opcodes/ftsetparams.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2020</p>"},{"location":"opcodes/gaintovel.html","title":"gaintovel","text":""},{"location":"opcodes/gaintovel.html#abstract","title":"Abstract","text":"<p>Map amplitude 0-1 to velocity (0-127)</p>"},{"location":"opcodes/gaintovel.html#description","title":"Description","text":"<p>Given a linear amplitude in the range 0-1, returns a corresponding velocity following an exponential curve defined by an exponent, a minimum gain and a minimum velocity. A gain of 0 will always result in a velocity of 0, any gain between 0 and the min. gain will be mapped to the min. velocity, and in the range between min. gain and 1., it will be mapped to min. velocity - 127 following the given exponential curve. Normally the exponent would be a number between 0 and 1, but the value depends highly upon the actual context in which the resulting velocity will be used. In general, an exponent higher than 1 will result in more sensitivity to higher gains, an exponent between (0, 1) will result in higher sensitivity to lower gains.</p> <p>For reference, the formula used is:</p> <pre><code>relgain = (gain - mingain) / (1. - mingain)  ;; This will be a value between 0 and 1\nvel = (relgain ^ exp) * (127 - minvel) + minvel\n</code></pre>"},{"location":"opcodes/gaintovel.html#syntax","title":"Syntax","text":"<p>MYFLT vel;     MYFLT gain;     MYFLT mingain;     MYFLT exp;     MYFLT minvel;     MYFLT round;</p> <pre><code>ivel gaintovel igain, imingain, iexp, iminvel=1, iround=0\nkvel gaintovel kgain, kmingain, kexp, kminvel=1, kround=0\n</code></pre>"},{"location":"opcodes/gaintovel.html#arguments","title":"Arguments","text":"<ul> <li>kgain: the amplitude, in the range 0-1</li> <li>kmingain: the gain (linear amplitude in the range 0-1) corresponding to min. velocity</li> <li>kexp: the exponent of the mapping curve.</li> <li>kminvel: min. velocity, corresponding to min. gain. All values between 0 and   this value will never be assigned</li> <li>kround: 0=do not round, 1=round to nearest integer</li> </ul>"},{"location":"opcodes/gaintovel.html#output","title":"Output","text":"<ul> <li>kvel: velocity in the range 0-127</li> </ul>"},{"location":"opcodes/gaintovel.html#execution-time","title":"Execution Time","text":"<ul> <li>Init</li> <li>Performance</li> </ul>"},{"location":"opcodes/gaintovel.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n--nosound\n\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\n\n0dbfs = 1\n\ninstr 1\n  prints \"&gt;&gt; Instr 1\\n\"\n  imindb = -60\n  idb = -40\n  while idb &lt;= 0 do\n    igain = db(idb)\n    ivel = gaintovel(igain, db(imindb), 1/3)\n    prints \"&gt;&gt; Gain: %d dB, \\tamplitude: %f, \\tvelocity: %f\\n\", idb, igain, ivel\n    idb += 2\n  od\n  turnoff\nendin\n\n\n&lt;/CsInstruments&gt;\n&lt;CsScore&gt;\n\ni1 0 1\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/gaintovel.html#see-also","title":"See also","text":"<ul> <li>linlin</li> <li>ampmidicurve</li> <li>ampmidid</li> </ul>"},{"location":"opcodes/gaintovel.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2024</p>"},{"location":"opcodes/getEnvVar.html","title":"getEnvVar","text":""},{"location":"opcodes/getEnvVar.html#abstract","title":"Abstract","text":"<p>Get the value of an environment variable</p>"},{"location":"opcodes/getEnvVar.html#description","title":"Description","text":"<p>getEnvVar first checks csound own environment and if the variable is not defined checks the global environment. If the variable is not defined, returns an empty string</p> <p>Note</p> <p>Csound updates its environment when passed flags like <code>--env:NAME=value</code> or <code>--env:NAME+=value</code>. Also csound adds the directory of an orchestra loaded at start time to its own path variables, like SSDIR, SADIR, etc. This opcode will reflect those changes</p>"},{"location":"opcodes/getEnvVar.html#syntax","title":"Syntax","text":"<pre><code>Svalue getEnvVar Svarname\n</code></pre>"},{"location":"opcodes/getEnvVar.html#arguments","title":"Arguments","text":"<ul> <li>`Svarname': The name of the env variable, something like \"SSDIR\" or \"USER\" </li> </ul>"},{"location":"opcodes/getEnvVar.html#output","title":"Output","text":"<ul> <li><code>Svalue</code>: the value of the variable, if defined (an empty string otherwise)</li> </ul>"},{"location":"opcodes/getEnvVar.html#execution-time","title":"Execution Time","text":"<ul> <li>Init </li> </ul>"},{"location":"opcodes/getEnvVar.html#examples","title":"Examples","text":"<pre><code>; Get the value of the HOME env variable\nShome getEnvVar \"HOME\"\n\n; and the actual value of INCDIR\nSincdir getEnvVar \"INCDIR\"\n\nprints \"HOME: %s, INCDIR: %s \\n\", Shome, Sincdir\n</code></pre>"},{"location":"opcodes/getEnvVar.html#see-also","title":"See also","text":"<ul> <li>system</li> </ul>"},{"location":"opcodes/getEnvVar.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2020</p>"},{"location":"opcodes/getrowlin.html","title":"getrowlin","text":""},{"location":"opcodes/getrowlin.html#abstract","title":"Abstract","text":"<p>opy a row from a 2D array or table, with interpolation between rows</p>"},{"location":"opcodes/getrowlin.html#description","title":"Description","text":"<p>Given a 2D array (i- or k- array), or a table representing a 2D matrix, get a row of this matrix (possibly a slice). If krow is not an integer, the values are the result of the interpolation between the two adjacent rows. Assuming such a 2D matrix containing multiple rows of sampled streams (for instance, the amplitudes of a set of oscillators, sampled at a regular interval), this opcode extracts one row of that data with linear interpolation between adjacent rows (if the row is not a round number) and places the result in a 1D array</p>"},{"location":"opcodes/getrowlin.html#syntax","title":"Syntax","text":"<pre><code>kOut[] getrowlin kMtx[], krow, kstart=0, kend=0, kstep=1 \nkOut[] getrowlin krow, ifn, inumcols, iskip=0, istart=0, iend=0, istep=1\n</code></pre>"},{"location":"opcodes/getrowlin.html#arguments","title":"Arguments","text":"<ul> <li>kMtx[]: a 2D array</li> <li>krow: the row to read (can be a fractional number, in which case   interpolation with the next row is performed)</li> <li>kstart: start index to read from the row (default = 0) </li> <li>kend: end index to read from the row (not inclusive) </li> <li>kstep: step used to read the along the row (default = 1) </li> <li>iskip: in the case of using a table as input, iskip indicates   the start of the sampled data (skipping a possible header in the   data) (default = 0)</li> <li>inumcols: in the case of using a table as input, inumcols   indicates the number of columns of the 2D matrix.</li> </ul>"},{"location":"opcodes/getrowlin.html#output","title":"Output","text":"<ul> <li>kOut[]: the interpolated row</li> </ul>"},{"location":"opcodes/getrowlin.html#execution-time","title":"Execution Time","text":"<ul> <li>Performance</li> </ul>"},{"location":"opcodes/getrowlin.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n-odac\n&lt;/CsOptions&gt;\n&lt;CsInstruments&gt;\n\n/*\n\nThis example uses the analysis file fox.mtx which was produced with \nloristrck_pack, see https://github.com/gesellkammer/loristrck\nThe file is in fact a wav file, with the difference that the wav format is used \nas a binary exchange format\n\n*/\n\nsr = 44100\nksmps = 128\nnchnls = 2\n0dbfs = 1.0\n\ngispectrum ftgen 0, 0, 0, -1, \"fox.mtx\", 0, 0, 0\n\ninstr 1\n  ifn = gispectrum\n  iskip      tab_i 0, ifn\n  inumrows   tab_i 1, ifn\n  inumcols   tab_i 2, ifn\n  it0 = tab_i(iskip, ifn)\n  it1 = tab_i(iskip+inumcols, ifn)\n  idt = it1 - it0\n  inumpartials = (inumcols-1) / 3 \n  imaxrow = inumrows - 2\n  it = ksmps / sr\n  igain init 1\n  ispeed init 0.3\n  idur = imaxrow * idt / ispeed\n  kGains[] init inumpartials\n  kfilter init 0\n  ifreqscale init 1\n\n  kt timeinsts\n  kplayhead = phasor:k(ispeed/idur)*idur\n  krow = kplayhead / idt\n  ; each row has the format frametime, freq0, amp0, bandwidth0, freq1, amp1, bandwidth1, ...\n  kF[] getrowlin krow, ifn, inumcols, iskip, 1, 0, 3\n  kA[] getrowlin krow, ifn, inumcols, iskip, 2, 0, 3\n  kB[] getrowlin krow, ifn, inumcols, iskip, 3, 0, 3\n\n  if(kt &gt; idur*0.6) then\n    if metro(0) == 1 then\n      println \"Applying filter: bandpass between 1000-1500 Hz\"\n    endif\n    kfilter = 1\n  endif\n\n  ifilterGain = 3    \n  if (kfilter == 1) then\n    kGains bpf kF, 990, 0.001, 1000, ifilterGain, 1500, ifilterGain, 1510, 0.01\n    kA *= kGains\n  endif \n\n  iflags = 0    ; uniform noise, no interpolation\n  aout beadsynt kF, kA, kB, -1, iflags, ifreqscale\n\n  if(kt &gt; idur) then\n    event \"e\", 0, 0, 0\n  endif\n  aenv cosseg 0, 0.02, igain, idur-0.02-0.1, igain, 0.1, 0\n  aout *= aenv\n  outs aout, aout\nendin\n\nschedule 1, 0, -1\n\n&lt;/CsInstruments&gt;\n&lt;CsScore&gt;\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/getrowlin.html#see-also","title":"See also","text":"<ul> <li>tabrowlin</li> <li>slicearray</li> <li>beadsynt</li> </ul>"},{"location":"opcodes/getrowlin.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/initerror.html","title":"initerror","text":""},{"location":"opcodes/initerror.html#abstract","title":"Abstract","text":"<p>Throws an error message at init</p>"},{"location":"opcodes/initerror.html#description","title":"Description","text":"<p>Use initerror to stop the current event with an init error</p>"},{"location":"opcodes/initerror.html#syntax","title":"Syntax","text":"<pre><code>initerror Smessage\n</code></pre>"},{"location":"opcodes/initerror.html#arguments","title":"Arguments","text":"<ul> <li><code>Smessage</code>: the text message to show. Use sprintf to construct a message if needed</li> </ul>"},{"location":"opcodes/initerror.html#output","title":"Output","text":""},{"location":"opcodes/initerror.html#execution-time","title":"Execution Time","text":"<ul> <li>Init</li> </ul>"},{"location":"opcodes/initerror.html#examples","title":"Examples","text":"<pre><code>if imidi &gt; 128 then\n    initerror sprintf(\"Received an invalid midi value (%d)\", imidi)\nendif\n</code></pre>"},{"location":"opcodes/initerror.html#see-also","title":"See also","text":"<ul> <li>throwerror</li> </ul>"},{"location":"opcodes/initerror.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2020</p>"},{"location":"opcodes/interp1d.html","title":"interp1d","text":""},{"location":"opcodes/interp1d.html#abstract","title":"Abstract","text":"<p>Interpolate between elements of an array/table</p>"},{"location":"opcodes/interp1d.html#description","title":"Description","text":"<p>Given a fractional index into an arra/table, interpolate between adjacent items. In the case of a table, a specific column of the table can be selected for performing interpolation. In this case, the index indicates the \"row\", the step value determines the size of each row, and the offset determines which column is used  when interpolating. Possible interpolation modes are: linear, cos,  floor, exponential and cubic. Together with <code>bisect</code> it can be used to generate any possible  breakpoint-function configuration.</p> <p>NB: interp1d performs the opossite operation of <code>bisect</code></p> <p>NB2: when used with a table the <code>param</code> value can be given within the string,  as \"exp=1.5\" or \"smooth=0.7\". For example, <code>kout = interp1d(kidx, itab, \"exp=1.5\")</code></p> <p>Note</p> <p>At the moment the interpolation mode is set at init time and can't be modified</p>"},{"location":"opcodes/interp1d.html#syntax","title":"Syntax","text":"<pre><code>kout   interp1d kidx, xarr[], Smode=\"linear\", kparam=0\naout   interp1d aidx, xarr[], Smode=\"linear\", kparam=0\niout   interp1d iidx, iarr[], Smode=\"linear\", kparam=0\nkout[] interp1d kidx[], xarr[], Smode=\"linear\", kparam=0\niout[] interp1d iidx[], iarr[], Smode=\"linear\", kparam=0\n\nkout   interp1d kidx, ktab, Smode=\"linear\", kstep=1, koffset=0\naout   interp1d aidx, ktab, Smode=\"linear\", kstep=1, koffset=0\niout   interp1d iidx, itab, Smode=\"linear\", kstep=1, koffset=0\nkout[] interp1d kidx[], ktab, Smode=\"linear\", kstep=1, koffset=0\niout[] interp1d iidx[], ktab, Smode=\"linear\", kstep=1, koffset=0\n</code></pre>"},{"location":"opcodes/interp1d.html#arguments","title":"Arguments","text":"<ul> <li><code>idx</code>: the index into the array/table. For example, using linear interpolation (see mode)     an index of 1.5 will interpolate halfway between arr[1] and arr[2] </li> <li><code>arr</code>: the array (1D) holding the data. </li> <li><code>tab</code>: the table holding the data</li> <li><code>mode</code>: the interpolation mode. Possible interpolations modes are: \"linear\", \"cos\", \"floor\",    \"cubic\", \"smooth\" (smoothstep, see https://en.wikipedia.org/wiki/Smoothstep),    \"smoother\" (perlin's smootherstep) or \"exp\" (exponential). \"smoother\" interpolation is almost   equal to \"smooth\" with param=0.7.</li> <li><code>param</code>: a parameter used by the interpolation mode. In \"exp\" mode, param sets the exponent   (2 will result in a quadratic curve). In \"smooth\" mode, param sets the number of extra   smoothsteps (default=0). Fractional smoothsteps are possible (see )</li> </ul>"},{"location":"opcodes/interp1d.html#output","title":"Output","text":"<ul> <li><code>out</code>: the result of interpolating the array/table at the given index.</li> </ul>"},{"location":"opcodes/interp1d.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n; -odac\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\n\n/*\n\nAbstract\n========\n\nInterpolate between elements of an array/table\n\nSyntax\n======\n\n    kout   interp1d kidx, xarr[], Smode=\"linear\", kparam=0\n    aout   interp1d aidx, xarr[], Smode=\"linear\", kparam=0\n    iout   interp1d iidx, iarr[], Smode=\"linear\", kparam=0\n    kout[] interp1d kidx[], xarr[], Smode=\"linear\", kparam=0\n    iout[] interp1d iidx[], iarr[], Smode=\"linear\", kparam=0\n\n    kout   interp1d kidx, ktab, Smode=\"linear\", kstep=1, koffset=0\n    aout   interp1d aidx, ktab, Smode=\"linear\", kstep=1, koffset=0\n    iout   interp1d iidx, itab, Smode=\"linear\", kstep=1, koffset=0\n    kout[] interp1d kidx[], ktab, Smode=\"linear\", kstep=1, koffset=0\n    iout[] interp1d iidx[], ktab, Smode=\"linear\", kstep=1, koffset=0\n\n    **NB**: interp1d performs the opposite operation of `bisect`\n\nSee Also\n========\n\nbisect, bpf, linlin, getrowlin, linenv\n*/\n\nksmps = 10\nnchnls = 2\n0dbfs  = 1\n\ninstr example1\n    ixs[] fillarray 0, 10, 16, 18, 28\n    ; interpolate ixs between at index 1.5, interpolating linearly between \n    ; ixs[1] and ixs[2]\n    iout interp1d 1.5, ixs\n    print iout  ; -&gt; 13.\n\n    ; scan ixs at k-rate\n    kidx = line:k(0, p3, lenarray:i(ixs)-1)\n    kout2 interp1d kidx, ixs\n    println \"kidx: %f, kout2: %f\", kidx, kout2\nendin\n\ninstr example2\n    ; used together with bisect can create multiple piecewise interpolation configurations\n    itimes[] fillarray 0,   4,   5,    10\n    imidi1[] fillarray 64, 64,   63.5, 64.5\n    imidi2[] fillarray 64, 63.4, 63.4, 63\n    iamps[]  fillarray 0,   0.8,   0.8,    0\n\n    kidx bisect timeinsts(), itimes\n    kamp interp1d kidx, iamps, \"cos\"\n    aamp interp kamp\n    a1 oscili aamp, mtof(interp1d(kidx, imidi1, \"cubic\"))\n    a2 oscili aamp, mtof(interp1d(kidx, imidi2))\n    println \"amp: %f\", rms:k(aamp)\n    outch 1, a1, 2, a2\nendin\n\ninstr example3\n    ; a table can also be used with interp1d / bisect. A table can hold\n    ; both x and y coordinates as pairs\n    itime2midi1 ftfill 0, 64, 4, 62, 5, 62, 6, 67\n    itime2midi2 ftfill 0, 60, 4, 60, 5, 59, 6, 59\n    ftfree itime2midi1, 1\n    ftfree itime2midi2, 1\n    ; step=2, bisect the column 0.\n    kt = timeinsts() \n    kidx1 bisect kt, itime2midi1, 2\n    kidx2 bisect kt, itime2midi2, 2\n\n    ; -1: cosine interpolation, step size=2, offset=1\n    kmidi1 interp1d kidx1, itime2midi1, \"cos\", 2, 1\n    kmidi2 interp1d kidx2, itime2midi2, \"cos\", 2, 1\n\n    a0 squinewave a(mtof(kmidi1)), a(0.1), a(0.1)\n    a1 squinewave a(mtof(kmidi2)), a(0.2), a(0.5)\n    igain = 0.1\n    ifade = 0.2\n    aenv = linseg:a(0, ifade, igain, p3-ifade*2-0.1, igain, ifade, 0)\n    outch 1, a0*aenv, 2, a1*aenv\nendin\n\ninstr example4\n    ; test all curves, save to csv\n    ifile fiopen \"interp1d.csv\", 0\n    fprints ifile, \"# kx, kidx, klin, kcos, kfloor, kcub, kexp, ksmooth, ksmooth2, ksmoother\\n\" \n\n    ixs[] fillarray 0, 1,  4, 5,  6.4, 8\n    iys[] fillarray 0, 10, 2, 20, 3.2, 16\n    kx line 0, p3, ixs[lenarray(ixs)-1]\n    kidx bisect kx, ixs\n    klin = interp1d(kidx, iys, \"linear\")\n    kcos interp1d kidx, iys, \"cos\"\n    kfloor interp1d kidx, iys, \"floor\"\n    kcub = lag(interp1d(kidx, iys, \"cubic\"), 0.1)\n    kexp interp1d kidx, iys, \"exp\", 2\n    ksmooth interp1d kidx, iys, \"smooth\", 0 \n    ksmooth2 interp1d kidx, iys, \"smooth\", 1\n    ksmoother interp1d kidx, iys, \"smoother\"\n\n    ; kx, kidx, klin, kcos, kfloor, kcub, kexp[O[I]]\n    fprintks ifile, \"%g, %g, %g, %g, %g, %g, %g, %g, %g, %g\\n\", kx, kidx, klin, kcos, kfloor, kcub, kexp, ksmooth, ksmooth2, ksmoother\nendin\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\n; Uncomment to perform each example\n\n; i \"example1\" 0 1\n; i \"example2\" 0 10\n;i \"example3\"  0 7\ni \"example4\" 0 2\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/interp1d.html#see-also","title":"See Also","text":"<ul> <li>bisect</li> <li>bpf</li> <li>linlin</li> <li>getrowlin</li> <li>linenv</li> </ul>"},{"location":"opcodes/jsfx.html","title":"jsfx","text":""},{"location":"opcodes/jsfx.html#abstract","title":"Abstract","text":"<p>Instantiates and runs a jsfx script </p>"},{"location":"opcodes/jsfx.html#description","title":"Description","text":"<p><code>jsfx</code> allows to instantiate and run a jsfx audio plugin within csound. </p> <p>There are two ways to run a jsfx script in csound. The simplest way is implemented in this plugin, <code>jsfx</code>, which allows to compile and control a jsfx plugin in one opcode. As an alternative, it is also possible to decouple these actions, first  compiling a script (see jsfx_new) and then calling <code>jsfx_setslider</code> and <code>jsfx_play</code>. Afterwords, slider values can be read via <code>jsfx_getslider</code></p> <p>jsfx</p> <p><code>jsfx</code> is an audio programming language implemented pritarily as part of the DAW <code>REAPER</code>.  It is a scriptiong language with a built-in jit compiler which translates it to  machine code on the fly. It allows the user to operate at the sample level (like  defining an udo with <code>setksmps 1</code> but more efficient). It is around 2x to 2.5x slower than hand-coded C.</p> <p>jsfx inputs and outputs</p> <p>A jsfx script has a certain number of audio input / output channels, and a series of  \"sliders\", which are parameters operating at control rate. A script can also use these sliders to send control values, which can be read in csound via jsfx_getslider See https://www.reaper.fm/sdk/js/js.php for more information about the syntax, etc.</p>"},{"location":"opcodes/jsfx.html#syntax","title":"Syntax","text":"<pre><code>ihandle, aout1 [, aout2, ...]  jsfx Spath, ain1 [, ain2, ...] [, id0, kval1, id1, kval2, ...]\n</code></pre>"},{"location":"opcodes/jsfx.html#arguments","title":"Arguments","text":"<ul> <li>Spath: the path to the jsfx script. Either an absolute path, a relative path to the    .csd file, or a filename alone, in which case it will be searched first in the current dir   and in $SSDIR, if defined.</li> <li>ain1, ain2, etc: audio input channels. It is recommended that the number of input   streams matches the number of channels expected in the plugin. If you pass less that the    expected channels, the rest will be zeroed, and if passing more, only the number of    audio channels expected by the plugin will actually be processed</li> <li>idx, kvalx: a jsfx script allows to define up to 64 control parameters, which are   called <code>slider</code>s. Each slider has an idx (starting from 1) and a value. Here you can control   as many sliders as you need. Each slider consists of a pair of values, an id (i- value)    identifying the slider (this corresponds to the sliderx value in the jsfx script) and the   value itself (a k- value)</li> </ul>"},{"location":"opcodes/jsfx.html#output","title":"Output","text":"<ul> <li>ihandle: a handle to the jsfx plugin created, which allows to operate on it later,   for instance to read slider values via jsfx_getslider</li> <li>aout1, aout2: audio output channels. It is recommended that the number of output   streams matches the number of channels expected in the plugin. If you pass less that the    expected channels, the rest will be zeroed, and if passing more, only the number of    audio channels expected by the plugin will actually be processed</li> </ul>"},{"location":"opcodes/jsfx.html#execution-time","title":"Execution Time","text":"<ul> <li>Performance (audio)</li> </ul>"},{"location":"opcodes/jsfx.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n-odac \n\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\nsr     = 44100\nksmps  = 64\nnchnls = 2\n0dbfs  = 1\n\n;; This is the example file for jsfx opcode\n\ngisnd ftgen 0, 0, 0, -1, \"bourre-fragment-1.flac\", 0, 0, 1\n\n\nFLpanel \"jsfx - tubeharmonics\", 400, 500, 50, 50\nFLcolor 150, 100, 150, 200, 100, 250\n\niw, ih = 300, 30\niline = ih * 2\niy, ix = ih, ih * 0.5\n;                                    min max  exp\ngkwhich, i0 FLslider \"source\",       0,    2,   0, 3,  -1, iw, ih, ix, iy\niy += iline\niv1 FLvalue \"\", 50, 30, 322, iy\ngkeven, i1 FLslider \"even harmonics\",0,    1,   0, 3, iv1, iw, ih, ix, iy\niy += iline\niv2 FLvalue \"\", 50, 30, 322, iy\ngkodd,  i2 FLslider \"odd harmonics\", 0,    1,   0, 3, iv2, iw, ih, ix, iy\niy += iline\niv3 FLvalue \"\", 50, 30, 322, iy\ngkflct, i3 FLslider \"fluctuation\",   0,    1,   0, 3, iv3, iw, ih, ix, iy\niy += iline\niv4 FLvalue \"\", 50, 30, 322, iy\ngkinpt, i4 FLslider \"Input (dB)\",  -12,  12,  0, 3, iv4, iw, ih, ix, iy\niy += iline\niv5 FLvalue \"\", 50, 30, 322, iy\ngkout,  i5 FLslider \"Output (dB)\", -12,  12,  0, 3, iv5, iw, ih, ix, iy\niy += iline\nFLcolor 150, 100, 150, 200, 200, 100\ngkdump, i6 FLbutton \"Dump variables\", 1, 0, 2, iw/2, ih, ix, iy, -1 \nFLpanelEnd\nFLrun\n\nopcode loopsamp, a, i\n  ift xin\n  iloopend = nsamp(ift) / sr\n  asig flooper2 1, 1, 0, iloopend, 0.1, ift\n  xout asig\nendop\n\nopcode select3, a, kaaa\n  kwhich, a1, a2, a3 xin\n  if(kwhich &lt; 1) then\n    asig = a1*(1-kwhich) + a2*kwhich\n  else\n    asig = a2*(2-kwhich) + a3*(kwhich-1)\n  endif\n  xout asig\nendop\n\ninstr 1\n  a1 loopsamp gisnd\n  a3 vco2 0.5, ntof:i(\"3C\")\n  a2 oscili 0.5, 1000\n  asig select3 gkwhich, a1, a2, a3\n  ih, a1 jsfx \"tubeharmonics.jsfx\", asig, 1, gkeven, 2, gkodd, 3, gkflct, 4, gkinpt, 5, gkout\n  if gkdump == 1 then\n    jsfx_dump ih, metro(4)\n  endif\n  outs a1, a1\nendin\n\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\ni1 0 3600\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/jsfx.html#see-also","title":"See also","text":"<ul> <li>jsfx_new</li> <li>jsfx_play</li> <li>jsfx_setslider</li> <li>jsfx_getslider</li> </ul>"},{"location":"opcodes/jsfx.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p> <p>Uses the open-source implementation of the jsfx language by Pascal Gauthier et al. Based heavily on the pd external <code>jsfx~</code>.</p> <p>https://github.com/asb2m10/jsusfx</p>"},{"location":"opcodes/jsfx_getslider.html","title":"jsfx_setslider","text":""},{"location":"opcodes/jsfx_getslider.html#abstract","title":"Abstract","text":"<p>Gets a slider value of a jsfx instance</p>"},{"location":"opcodes/jsfx_getslider.html#description","title":"Description","text":"<p>With <code>jsfx_getslider</code> it is possible to get the current values of any slider defined in a jsfx script, mostly after calling <code>jsfx</code> or <code>jsfx_play</code>. A jsfx plugin defines a series of up to 64 sliders, which are control parameters used by the script. A slider can also be used to output values to the caller, for  example to indicate the gain reduction in a compressor plugin, or the frequency in a pitch tracking plugin. </p> <p>A slider definition in a jsfx script has the form:</p> <pre><code>slider7:0&lt;0,20,0.01&gt;Gain Reduction\n</code></pre> <p>This defines a control parameter with default value <code>0</code>, between <code>0</code> and <code>20</code>, with a precission (an increment) of <code>0.01</code> and a label \"Gain Reduction\". To read the value of that slider:</p> <pre><code>kgainreduction = jsfx_getslider(ihandle, 7)\n</code></pre> <p>jsfx sliders</p> <p>Any slider which is not set via jsfx_setslider retains its default value. A value will  always be confined to the range in the slider definition and will also be  quantized to the increment in the slider definition. To disable any quantization, set the increment to 0 in the jsfx script</p> <p>jsfx</p> <p><code>jsfx</code> is an audio programming language implemented primarily as part of the DAW <code>REAPER</code>.  It is a scripting language with a built-in compiler which translates it to  machine code. It allows to operate at the sample level (like defining an udo with  <code>setksmps 1</code> but more efficient). It is around 2x to 2.5x slower than hand-coded C. See https://www.reaper.fm/sdk/js/js.php for more information about the syntax, etc.</p>"},{"location":"opcodes/jsfx_getslider.html#syntax","title":"Syntax","text":"<pre><code>kvalue  jsfx_getslider ihandle, kid\n</code></pre>"},{"location":"opcodes/jsfx_getslider.html#arguments","title":"Arguments","text":"<ul> <li>ihandle: the handle created via jsfx_new or jsfx</li> <li>kidx: the slider number (this corresponds to the sliderx value in the jsfx script)</li> </ul>"},{"location":"opcodes/jsfx_getslider.html#output","title":"Output","text":"<ul> <li>kvalue: value of the slider</li> </ul>"},{"location":"opcodes/jsfx_getslider.html#execution-time","title":"Execution Time","text":"<ul> <li>Performance</li> </ul>"},{"location":"opcodes/jsfx_getslider.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n-odac \n\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\nsr     = 44100\nksmps  = 64\nnchnls = 2\n0dbfs  = 1\n\n;; This is the example file for the opcodes jsfx_new, jsfx_play and jsfx_setslider\n\ngisnd ftgen 0, 0, 0, -1, \"bourre-fragment-1.flac\", 0, 0, 1\n\n\nFLpanel \"jsfx - tubeharmonics\", 400, 500, 50, 50\nFLcolor 150, 100, 150, 200, 100, 250\n\niw, ih = 300, 30\niline = ih * 2\niy, ix = ih, ih * 0.5\n;                                    min max  exp\ngkwhich, i0 FLslider \"source\",       0,    2,   0, 3,  -1, iw, ih, ix, iy\niy += iline\niv1 FLvalue \"\", 50, 30, 322, iy\ngkeven, i1 FLslider \"even harmonics\",0,    1,   0, 3, iv1, iw, ih, ix, iy\niy += iline\niv2 FLvalue \"\", 50, 30, 322, iy\ngkodd,  i2 FLslider \"odd harmonics\", 0,    1,   0, 3, iv2, iw, ih, ix, iy\niy += iline\niv3 FLvalue \"\", 50, 30, 322, iy\ngkflct, i3 FLslider \"fluctuation\",   0,    1,   0, 3, iv3, iw, ih, ix, iy\niy += iline\niv4 FLvalue \"\", 50, 30, 322, iy\ngkinpt, i4 FLslider \"Input (dB)\",  -12,  12,  0, 3, iv4, iw, ih, ix, iy\niy += iline\niv5 FLvalue \"\", 50, 30, 322, iy\ngkout,  i5 FLslider \"Output (dB)\", -12,  12,  0, 3, iv5, iw, ih, ix, iy\niy += iline\nFLcolor 150, 100, 150, 200, 200, 100\ngkdump, i6 FLbutton \"Dump variables\", 1, 0, 2, iw/2, ih, ix, iy, -1 \nFLpanelEnd\nFLrun\n\nFLsetVal_i 0, i0\nFLsetVal_i 0.3, i1\nFLsetVal_i 0.3, i2\nFLsetVal_i 0.1, i3\nFLsetVal_i 0, i4\nFLsetVal_i 0, i5\nFLsetVal_i 0, i6\n\n\nopcode loopsamp, a, i\n  ift xin\n  iloopend = nsamp(ift) / sr\n  asig flooper2 1, 1, 0, iloopend, 0.1, ift\n  xout asig\nendop\n\nopcode select3, a, kaaa\n  kwhich, a1, a2, a3 xin\n  if(kwhich &lt; 1) then\n    asig = a1*(1-kwhich) + a2*kwhich\n  else\n    asig = a2*(2-kwhich) + a3*(kwhich-1)\n  endif\n  xout asig\nendop\n\ninstr 1\n  a1 loopsamp gisnd\n  a3 vco2 0.5, ntof:i(\"3C\")\n  a2 oscili 0.5, 1000\n  asig select3 gkwhich, a1, a2, a3\n  ihandle jsfx_new \"tubeharmonics.jsfx\"\n  print ihandle\n  jsfx_setslider ihandle, 1, gkeven, 2, gkodd, 3, gkflct, 4, gkinpt, 5, gkout\n  aout jsfx_play ihandle, asig\n  if gkdump == 1 then\n    jsfx_dump ihandle, metro(4)\n  endif\n  k7 jsfx_getslider ihandle, 7\n  printf \"k7: %f \\r\", changed2(k7), k7\n  outs aout, aout\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\ni1 0 3600\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/jsfx_getslider.html#see-also","title":"See also","text":"<ul> <li>jsfx</li> <li>jsfx_new</li> <li>jsfx_play</li> <li>jsfx_setslider</li> </ul>"},{"location":"opcodes/jsfx_getslider.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p> <p>Uses the open-source implementation of the jsfx language by Pascal Gauthier et al. Based heavily on the pd external <code>jsfx~</code>.</p> <p>https://github.com/asb2m10/jsusfx</p>"},{"location":"opcodes/jsfx_new.html","title":"jsfx_new","text":""},{"location":"opcodes/jsfx_new.html#abstract","title":"Abstract","text":"<p>Instantiates a jsfx script </p>"},{"location":"opcodes/jsfx_new.html#description","title":"Description","text":"<p><code>jsfx_new</code> instantiates and compiles a jsfx script (at init time). It returns a handle which can be used to modify control values and perform audio io. It is also possible to instantiate and play a script with only one opcode via <code>jsfx</code>.</p> <p>jsfx</p> <p><code>jsfx</code> is an audio programming language implemented pritarily as part of the DAW <code>REAPER</code>.  It is a scriptiong language with a built-in jit compiler which translates it to  machine code on the fly. It allows the user to operate at the sample level (like  defining an udo with <code>setksmps 1</code> but more efficient). It is around 2x to 2.5x slower than hand-coded C.</p> <p>jsfx input / output</p> <p>A jsfx script has a certain number of audio input / output channels, and a series of  \"sliders\", which are parameters operating at control rate. A script can also use these sliders to send control values, which can be read in csound via jsfx_getslider See https://www.reaper.fm/sdk/js/js.php for more information about the syntax, etc.</p>"},{"location":"opcodes/jsfx_new.html#syntax","title":"Syntax","text":"<pre><code>ihandle jsfx_new Spath\n</code></pre>"},{"location":"opcodes/jsfx_new.html#arguments","title":"Arguments","text":"<ul> <li>Spath: the path to the jsfx script. Either an absolute path, a relative path to the    .csd file, or a filename alone, in which case it will be searched first in the current dir   and in $SSDIR, if defined.</li> </ul>"},{"location":"opcodes/jsfx_new.html#output","title":"Output","text":"<ul> <li>ihandle: a handle to the jsfx plugin created, which allows to operate on it later,   for instance to perform audio io via jsfx_play</li> </ul>"},{"location":"opcodes/jsfx_new.html#execution-time","title":"Execution Time","text":"<ul> <li>Init</li> </ul>"},{"location":"opcodes/jsfx_new.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n-odac \n\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\nsr     = 44100\nksmps  = 64\nnchnls = 2\n0dbfs  = 1\n\n;; This is the example file for the opcodes jsfx_new, jsfx_play and jsfx_setslider\n\ngisnd ftgen 0, 0, 0, -1, \"bourre-fragment-1.flac\", 0, 0, 1\n\n\nFLpanel \"jsfx - tubeharmonics\", 400, 500, 50, 50\nFLcolor 150, 100, 150, 200, 100, 250\n\niw, ih = 300, 30\niline = ih * 2\niy, ix = ih, ih * 0.5\n;                                    min max  exp\ngkwhich, i0 FLslider \"source\",       0,    2,   0, 3,  -1, iw, ih, ix, iy\niy += iline\niv1 FLvalue \"\", 50, 30, 322, iy\ngkeven, i1 FLslider \"even harmonics\",0,    1,   0, 3, iv1, iw, ih, ix, iy\niy += iline\niv2 FLvalue \"\", 50, 30, 322, iy\ngkodd,  i2 FLslider \"odd harmonics\", 0,    1,   0, 3, iv2, iw, ih, ix, iy\niy += iline\niv3 FLvalue \"\", 50, 30, 322, iy\ngkflct, i3 FLslider \"fluctuation\",   0,    1,   0, 3, iv3, iw, ih, ix, iy\niy += iline\niv4 FLvalue \"\", 50, 30, 322, iy\ngkinpt, i4 FLslider \"Input (dB)\",  -12,  12,  0, 3, iv4, iw, ih, ix, iy\niy += iline\niv5 FLvalue \"\", 50, 30, 322, iy\ngkout,  i5 FLslider \"Output (dB)\", -12,  12,  0, 3, iv5, iw, ih, ix, iy\niy += iline\nFLcolor 150, 100, 150, 200, 200, 100\ngkdump, i6 FLbutton \"Dump variables\", 1, 0, 2, iw/2, ih, ix, iy, -1 \nFLpanelEnd\nFLrun\n\nFLsetVal_i 0, i0\nFLsetVal_i 0.3, i1\nFLsetVal_i 0.3, i2\nFLsetVal_i 0.1, i3\nFLsetVal_i 0, i4\nFLsetVal_i 0, i5\nFLsetVal_i 0, i6\n\n\nopcode loopsamp, a, i\n  ift xin\n  iloopend = nsamp(ift) / sr\n  asig flooper2 1, 1, 0, iloopend, 0.1, ift\n  xout asig\nendop\n\nopcode select3, a, kaaa\n  kwhich, a1, a2, a3 xin\n  if(kwhich &lt; 1) then\n    asig = a1*(1-kwhich) + a2*kwhich\n  else\n    asig = a2*(2-kwhich) + a3*(kwhich-1)\n  endif\n  xout asig\nendop\n\ninstr 1\n  a1 loopsamp gisnd\n  a3 vco2 0.5, ntof:i(\"3C\")\n  a2 oscili 0.5, 1000\n  asig select3 gkwhich, a1, a2, a3\n  ihandle jsfx_new \"tubeharmonics.jsfx\"\n  print ihandle\n  jsfx_setslider ihandle, 1, gkeven, 2, gkodd, 3, gkflct, 4, gkinpt, 5, gkout\n  aout jsfx_play ihandle, asig\n  if gkdump == 1 then\n    jsfx_dump ihandle, metro(4)\n  endif\n  k7 jsfx_getslider ihandle, 7\n  printf \"k7: %f \\r\", changed2(k7), k7\n  outs aout, aout\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\ni1 0.1 3600\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/jsfx_new.html#see-also","title":"See also","text":"<ul> <li>jsfx</li> <li>jsfx_play</li> <li>jsfx_setslider</li> <li>jsfx_getslider</li> </ul>"},{"location":"opcodes/jsfx_new.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p> <p>Uses the open-source implementation of the jsfx language by Pascal Gauthier et al. Based heavily on the pd external <code>jsfx~</code>.</p> <p>https://github.com/asb2m10/jsusfx</p>"},{"location":"opcodes/jsfx_play.html","title":"jsfx_play","text":""},{"location":"opcodes/jsfx_play.html#abstract","title":"Abstract","text":"<p>Processes audio through a jsfx script </p>"},{"location":"opcodes/jsfx_play.html#description","title":"Description","text":"<p><code>jsfx_play</code> calls the actual sample processing code defined in a jsfx script.  The script must have been initialized via <code>jsfx_new</code>, which instantiates and  compiles the script and returns a handle. </p> <p>jsfx</p> <p><code>jsfx</code> is an audio programming language implemented primarily as part of the DAW <code>REAPER</code>.  It is a scriptiong language with a built-in compiler which translates it to  machine code on the fly. It allows the user to operate at the sample level (like  defining an udo with <code>setksmps 1</code> but more efficient). It is around 2x to 2.5x slower than hand-coded C.</p> <p>jsfx input / output</p> <p>A jsfx script has a certain number of audio input / output channels. The number of audio inputs / outputs passed to the script does not need to match the number of  channels defined in the script but it is advised to do so. More precisely, if a plugin is stereo, passing only one channel will not reduce the work performed by the plugin. A plugin also defines a series of \"sliders\", which are parameters operating at  control rate. A script can also use these sliders to send control values back, which  can be read in csound via jsfx_getslider See https://www.reaper.fm/sdk/js/js.php for more information about the syntax, etc.</p>"},{"location":"opcodes/jsfx_play.html#syntax","title":"Syntax","text":"<pre><code>a1 [, a2, a3, ...] jsfx_play ihandle, ain1 [, ain2, ain3, ...]\n</code></pre>"},{"location":"opcodes/jsfx_play.html#arguments","title":"Arguments","text":"<ul> <li>ain1, ain2, ...: the audio signals passed as input. The amount of channels processed   is min(expected number of streams, given number of streams)</li> </ul>"},{"location":"opcodes/jsfx_play.html#output","title":"Output","text":"<ul> <li>a1, a2, ...: the output audio generated by the plugin</li> </ul>"},{"location":"opcodes/jsfx_play.html#execution-time","title":"Execution Time","text":"<ul> <li>Performance (audio)</li> </ul>"},{"location":"opcodes/jsfx_play.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n-odac \n\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\nsr     = 44100\nksmps  = 64\nnchnls = 2\n0dbfs  = 1\n\n;; This is the example file for the opcodes jsfx_new, jsfx_play and jsfx_setslider\n\ngisnd ftgen 0, 0, 0, -1, \"bourre-fragment-1.flac\", 0, 0, 1\n\n\nFLpanel \"jsfx - tubeharmonics\", 400, 500, 50, 50\nFLcolor 150, 100, 150, 200, 100, 250\n\niw, ih = 300, 30\niline = ih * 2\niy, ix = ih, ih * 0.5\n;                                    min max  exp\ngkwhich, i0 FLslider \"source\",       0,    2,   0, 3,  -1, iw, ih, ix, iy\niy += iline\niv1 FLvalue \"\", 50, 30, 322, iy\ngkeven, i1 FLslider \"even harmonics\",0,    1,   0, 3, iv1, iw, ih, ix, iy\niy += iline\niv2 FLvalue \"\", 50, 30, 322, iy\ngkodd,  i2 FLslider \"odd harmonics\", 0,    1,   0, 3, iv2, iw, ih, ix, iy\niy += iline\niv3 FLvalue \"\", 50, 30, 322, iy\ngkflct, i3 FLslider \"fluctuation\",   0,    1,   0, 3, iv3, iw, ih, ix, iy\niy += iline\niv4 FLvalue \"\", 50, 30, 322, iy\ngkinpt, i4 FLslider \"Input (dB)\",  -12,  12,  0, 3, iv4, iw, ih, ix, iy\niy += iline\niv5 FLvalue \"\", 50, 30, 322, iy\ngkout,  i5 FLslider \"Output (dB)\", -12,  12,  0, 3, iv5, iw, ih, ix, iy\niy += iline\nFLcolor 150, 100, 150, 200, 200, 100\ngkdump, i6 FLbutton \"Dump variables\", 1, 0, 2, iw/2, ih, ix, iy, -1 \nFLpanelEnd\nFLrun\n\nFLsetVal_i 0, i0\nFLsetVal_i 0.3, i1\nFLsetVal_i 0.3, i2\nFLsetVal_i 0.1, i3\nFLsetVal_i 0, i4\nFLsetVal_i 0, i5\nFLsetVal_i 0, i6\n\n\nopcode loopsamp, a, i\n  ift xin\n  iloopend = nsamp(ift) / sr\n  asig flooper2 1, 1, 0, iloopend, 0.1, ift\n  xout asig\nendop\n\nopcode select3, a, kaaa\n  kwhich, a1, a2, a3 xin\n  if(kwhich &lt; 1) then\n    asig = a1*(1-kwhich) + a2*kwhich\n  else\n    asig = a2*(2-kwhich) + a3*(kwhich-1)\n  endif\n  xout asig\nendop\n\ninstr 1\n  a1 loopsamp gisnd\n  a3 vco2 0.5, ntof:i(\"3C\")\n  a2 oscili 0.5, 1000\n  asig select3 gkwhich, a1, a2, a3\n  ihandle jsfx_new \"tubeharmonics.jsfx\"\n  print ihandle\n  jsfx_setslider ihandle, 1, gkeven, 2, gkodd, 3, gkflct, 4, gkinpt, 5, gkout\n  aout jsfx_play ihandle, asig\n  if gkdump == 1 then\n    jsfx_dump ihandle, metro(4)\n  endif\n  k7 jsfx_getslider ihandle, 7\n  printf \"k7: %f \\r\", changed2(k7), k7\n  outs aout, aout\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\ni1 0.1 3600\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/jsfx_play.html#see-also","title":"See also","text":"<ul> <li>jsfx_new</li> <li>jsfx_setslider</li> <li>jsfx_getslider</li> </ul>"},{"location":"opcodes/jsfx_play.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p> <p>Uses the open-source implementation of the jsfx language by Pascal Gauthier et al. Based heavily on the pd external <code>jsfx~</code>.</p> <p>https://github.com/asb2m10/jsusfx</p>"},{"location":"opcodes/jsfx_setslider.html","title":"jsfx_setslider","text":""},{"location":"opcodes/jsfx_setslider.html#abstract","title":"Abstract","text":"<p>Sets the slider values of a jsfx script</p>"},{"location":"opcodes/jsfx_setslider.html#description","title":"Description","text":"<p>With <code>jsfx_setslider</code> it is possible to set the values of any number of sliders defined in a jsfx script, mostly prior to calling <code>jsfx_play</code>. A jsfx plugin defines a series of up to 64 sliders, which are control parameters used by the script. A slider definition in a jsfx script has the form:</p> <pre><code>slider3:1.5&lt;0,4,0.01&gt;Compression Ratio\n</code></pre> <p>This defines a control parameter with default value <code>1.5</code>, between <code>0</code> and <code>4</code>, with a precission (an increment) of <code>0.01</code> and a label \"Copression Ratio\". </p> <pre><code>kcomprat = 2.5\njsfx_setslider ihandle, 3, kcomprat\n</code></pre> <p>The code above will set the slider #3 (the index passed corresponds with the  slider number) to the value of <code>kcomprat</code> The value of any slider can be read via <code>jsfx_getvalue</code> (only one value at a time).</p> <p>many sliders</p> <p>It is possible to call jsfx_setslider with any number of sliders. It is not necessary to set all the sliders defined in the script. Any slider which is not set via jsfx_setslider retains its default value. A value will  always be confined to the range in the slider definition and will also be  quantized to the increment in the slider definition. To disable any quantization, set the increment to 0 in the jsfx script</p> <p>jsfx</p> <p><code>jsfx</code> is an audio programming language implemented primarily as part of the DAW <code>REAPER</code>.  It is a scriptiong language with a built-in compiler which translates it to  machine code. It allows the user to operate at the sample level (like  defining an udo with <code>setksmps 1</code> but more efficient). It is around 2x to 2.5x slower than hand-coded C. See https://www.reaper.fm/sdk/js/js.php for more information about the syntax, etc.</p>"},{"location":"opcodes/jsfx_setslider.html#syntax","title":"Syntax","text":"<pre><code>jsfx_setslider ihandle, id1, kval1 [, id2, kval2, id3, kval3, ...]\n</code></pre>"},{"location":"opcodes/jsfx_setslider.html#arguments","title":"Arguments","text":"<ul> <li>ihandle: the handle created via jsfx_new or jsfx</li> <li>idx, kvalx: a jsfx script allows to define up to 64 control parameters, which are   called <code>slider</code>s. Each slider has an idx (starting from 1) and a value. Here you can control   as many sliders as you need. Each slider consists of a pair of values, an id    identifying the slider (this corresponds to the sliderx value in the jsfx script) and the   value itself (a k- value)</li> </ul>"},{"location":"opcodes/jsfx_setslider.html#output","title":"Output","text":""},{"location":"opcodes/jsfx_setslider.html#execution-time","title":"Execution Time","text":"<ul> <li>Performance (audio)</li> </ul>"},{"location":"opcodes/jsfx_setslider.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n-odac \n\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\nsr     = 44100\nksmps  = 64\nnchnls = 2\n0dbfs  = 1\n\n;; This is the example file for the opcodes jsfx_new, jsfx_play and jsfx_setslider\n\ngisnd ftgen 0, 0, 0, -1, \"bourre-fragment-1.flac\", 0, 0, 1\n\n\nFLpanel \"jsfx - tubeharmonics\", 400, 500, 50, 50\nFLcolor 150, 100, 150, 200, 100, 250\n\niw, ih = 300, 30\niline = ih * 2\niy, ix = ih, ih * 0.5\n;                                    min max  exp\ngkwhich, i0 FLslider \"source\",       0,    2,   0, 3,  -1, iw, ih, ix, iy\niy += iline\niv1 FLvalue \"\", 50, 30, 322, iy\ngkeven, i1 FLslider \"even harmonics\",0,    1,   0, 3, iv1, iw, ih, ix, iy\niy += iline\niv2 FLvalue \"\", 50, 30, 322, iy\ngkodd,  i2 FLslider \"odd harmonics\", 0,    1,   0, 3, iv2, iw, ih, ix, iy\niy += iline\niv3 FLvalue \"\", 50, 30, 322, iy\ngkflct, i3 FLslider \"fluctuation\",   0,    1,   0, 3, iv3, iw, ih, ix, iy\niy += iline\niv4 FLvalue \"\", 50, 30, 322, iy\ngkinpt, i4 FLslider \"Input (dB)\",  -12,  12,  0, 3, iv4, iw, ih, ix, iy\niy += iline\niv5 FLvalue \"\", 50, 30, 322, iy\ngkout,  i5 FLslider \"Output (dB)\", -12,  12,  0, 3, iv5, iw, ih, ix, iy\niy += iline\nFLcolor 150, 100, 150, 200, 200, 100\ngkdump, i6 FLbutton \"Dump variables\", 1, 0, 2, iw/2, ih, ix, iy, -1 \nFLpanelEnd\nFLrun\n\nFLsetVal_i 0, i0\nFLsetVal_i 0.3, i1\nFLsetVal_i 0.3, i2\nFLsetVal_i 0.1, i3\nFLsetVal_i 0, i4\nFLsetVal_i 0, i5\nFLsetVal_i 0, i6\n\n\nopcode loopsamp, a, i\n  ift xin\n  iloopend = nsamp(ift) / sr\n  asig flooper2 1, 1, 0, iloopend, 0.1, ift\n  xout asig\nendop\n\nopcode select3, a, kaaa\n  kwhich, a1, a2, a3 xin\n  if(kwhich &lt; 1) then\n    asig = a1*(1-kwhich) + a2*kwhich\n  else\n    asig = a2*(2-kwhich) + a3*(kwhich-1)\n  endif\n  xout asig\nendop\n\ninstr 1\n  a1 loopsamp gisnd\n  a3 vco2 0.5, ntof:i(\"3C\")\n  a2 oscili 0.5, 1000\n  asig select3 gkwhich, a1, a2, a3\n  ihandle jsfx_new \"tubeharmonics.jsfx\"\n  print ihandle\n  jsfx_setslider ihandle, 1, gkeven, 2, gkodd, 3, gkflct, 4, gkinpt, 5, gkout\n  aout jsfx_play ihandle, asig\n  if gkdump == 1 then\n    jsfx_dump ihandle, metro(4)\n  endif\n  k7 jsfx_getslider ihandle, 7\n  printf \"k7: %f \\r\", changed2(k7), k7\n  outs aout, aout\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\ni1 0 3600\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/jsfx_setslider.html#see-also","title":"See also","text":"<ul> <li>jsfx</li> <li>jsfx_new</li> <li>jsfx_play</li> <li>jsfx_getslider</li> </ul>"},{"location":"opcodes/jsfx_setslider.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p> <p>Uses the open-source implementation of the jsfx language by Pascal Gauthier et al. Based heavily on the pd external <code>jsfx~</code>.</p> <p>https://github.com/asb2m10/jsusfx</p>"},{"location":"opcodes/lfnoise.html","title":"lfnoise","text":""},{"location":"opcodes/lfnoise.html#abstract","title":"Abstract","text":"<p>low frequency, band-limited noise</p>"},{"location":"opcodes/lfnoise.html#description","title":"Description","text":"<p>Generates random values at a rate given by the nearest integer division of the sample rate by the freq argument. If kinterp==0, between generated values 0 is output. Otherwise the output is the result of interpolating between the generated values. Output is always band limited.</p>"},{"location":"opcodes/lfnoise.html#syntax","title":"Syntax","text":"<pre><code>aout lfnoise krate, kinterp=0\n</code></pre>"},{"location":"opcodes/lfnoise.html#arguments","title":"Arguments","text":"<ul> <li><code>krate</code>: the frequency to generate new values</li> <li><code>kinterp</code>: if 1, the output is the result of linear interpolation between the generated values</li> </ul>"},{"location":"opcodes/lfnoise.html#output","title":"Output","text":"<ul> <li><code>aout</code>: if kinterp==0, then this is the output random values at the given frequency, or 0. If kinterp==1, then output is the result of interpolation between two generated values.  </li> </ul>"},{"location":"opcodes/lfnoise.html#execution-time","title":"Execution Time","text":"<ul> <li>Performance</li> </ul>"},{"location":"opcodes/lfnoise.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n-odac           \n\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\n\n/*\n    Example file for lfnoise\n\n    lfnoise generates a random value between 0-1 at the given\n    frequency. If kinterp=1, then values are interpolated\n    Otherwise, they are held until next value\n\n*/\n\nsr     = 44100\nksmps  = 64\nnchnls = 2\n0dbfs  = 1\n\n\ninstr 1\n  kt eventtime\n  kfreq   bpf kt, 0, 1, 10, 20, 20, 200, 30, 200, 40, 500, 50, 2000\n  kinterp = round(k(vco2:a(0.5, 1/5, 2, 0.5) + 0.5))\n  if metro(12) == 1 then\n    println \"freq: %.1f, interp: %.1f\", kfreq, kinterp\n  endif\n  kgain = 0.5\n  aout lfnoise kfreq, kinterp\n  aout *= interp(kgain)    \n  outall aout\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\ni1 0 50\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n&lt;bsbPanel&gt;\n &lt;label&gt;Widgets&lt;/label&gt;\n &lt;objectName/&gt;\n &lt;x&gt;0&lt;/x&gt;\n &lt;y&gt;0&lt;/y&gt;\n &lt;width&gt;0&lt;/width&gt;\n &lt;height&gt;0&lt;/height&gt;\n &lt;visible&gt;true&lt;/visible&gt;\n &lt;uuid/&gt;\n &lt;bgcolor mode=\"background\"&gt;\n  &lt;r&gt;240&lt;/r&gt;\n  &lt;g&gt;240&lt;/g&gt;\n  &lt;b&gt;240&lt;/b&gt;\n &lt;/bgcolor&gt;\n&lt;/bsbPanel&gt;\n&lt;bsbPresets&gt;\n&lt;/bsbPresets&gt;\n</code></pre>"},{"location":"opcodes/lfnoise.html#see-also","title":"See also","text":"<ul> <li>dust2</li> <li>crackle</li> </ul>"},{"location":"opcodes/lfnoise.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p> <p>(port of pd/else's <code>lfnoise</code>, which is itself a merge of supercollider's <code>LFNoise0</code> and <code>LFNoise1</code>)</p>"},{"location":"opcodes/linenv.html","title":"linenv","text":""},{"location":"opcodes/linenv.html#abstract","title":"Abstract","text":"<p>A triggerable linear envelope with sustain segment </p>"},{"location":"opcodes/linenv.html#description","title":"Description","text":"<p><code>linenv</code> is similar to linsegr with an additional gate argument, allowing to retrigger it at will. One of the values can be defined as a sustain point, meaning that as long as the gate is held, the envelope enters a sustain state when reaching this point. When the gate is set to 0, the envelope traverses the rest of the defined points.</p> <p>If the gate is closed before reaching the sustain segment, the envelope slides to the release section skipping any segments in between.</p> <p>Warning</p> <p>Unlike <code>linsegr</code>, <code>linenv</code> does not extend the time of the instrument. Use <code>xtratim</code> for that</p> <p>Note</p> <p>Similarly to linseg/linsegr, it is possible to define segments of 0 duration to force sharp jumps</p>"},{"location":"opcodes/linenv.html#syntax","title":"Syntax","text":"<pre><code>xout linenv kgate, isustindex, kval0, [ktime1, kval1, ktime2, kval2, ...]\n</code></pre>"},{"location":"opcodes/linenv.html#arguments","title":"Arguments","text":"<ul> <li><code>kgate</code>: whenever this switches from 0 to 1 a new envelope starts. If a sustain segment   was defined, when closing the gate (transition from 1 to 0) the envelope jumps to the sustain   segment. Otherwise it just continues until it reaches the last segment (a \"oneshot\" envelope)</li> <li><code>isustindex</code>: the index of the sustain point. For example, if <code>isustindex</code> is 2, then  when the envelope reaches kval2 (after ktime0+ktime1), it enters a sustain phase, where its value remains unmodified until the gate is set to 0. If no sustain point is desired, set <code>isustindex</code> to 0. NB: negative values count from end. To imitate the behaviour of linsegr, use -1 as sustain index.</li> <li><code>kval0</code>, <code>ktime1</code>, ...: a linear envelope, similar to <code>linsegr</code>. The release part can have as many segments as desired. ktime<sub>n</sub> values are defined as time interval between two values, not as absolute timestamps</li> </ul>"},{"location":"opcodes/linenv.html#output","title":"Output","text":"<ul> <li><code>xout</code>: value of the envelope (k- or a- rate)</li> </ul>"},{"location":"opcodes/linenv.html#execution-time","title":"Execution Time","text":"<ul> <li>Performance</li> </ul>"},{"location":"opcodes/linenv.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n\n&lt;CsOptions&gt;\n-odac\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\n\n/*\n    This is the example file for opcode \"linenv\"\n\n    linenv is a triggerable envelope with a sustain segment\n\n    aout linenv kgate, isustidx, kval0, ktime1, kval1, ..., ktimen, kvaln\n\n    NB: use xtratim if necessary to allow for release segment \n\n*/\n\n\nsr = 44100\nksmps  = 64\nnchnls = 2\n0dbfs  = 1\ngkgate init 0\n\nFLpanel \"linenv\", 240, 100, 100, 100\n    gkgate, gih1 FLbutton \" Gate\", 1, 0, 2, 80, 40, 10, 10, -1  \nFLpanelEnd\nFLrun\n\ninstr 1\n    kgate = trighold:k(metro(1/2), 0.5)\n    kenv linenv kgate, 1, 0, 0.15, 1, 0.1, 0\n    printf \"t: %f,  kenv: %f \\n\", timeinstk(), timeinsts(), kenv\n\n    kenv *= 0.2\n    asig = pinker() * interp(kenv)\n    outs asig, asig\nendin\n\ninstr 2\n    iperiod = 2\n    igatedur = 1\n    kgate = trighold:k(metro(1/iperiod), igatedur)\n    aenv linenv kgate, -2, 0, 0.05, 1, 0.2, 0.5, 0.2, 1, 0.4, 0\n    asig = oscili:a(0.2, 1000) * aenv\n    FLsetVal changed(kgate), kgate, gih1\n    outs asig, asig\nendin\n\ninstr 3\n    asig pinker\n    aenv linenv gkgate, 2, 0, 0.05, 1, 0.1, 0.2, 0.5, 0\n    asig *= aenv\n    outs asig, asig\nendin\n\ninstr 4\n    ; no sustain (\"one shot\")\n    asig pinker\n    aenv linenv gkgate, 0, 0, 0.05, 1, 0.1, 0.2, 0.5, 0\n    asig *= aenv\n    outs asig, asig\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\n; i1 0 10\n; i2 0 10\ni3 0 100\n; i4 0 100\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/linenv.html#see-also","title":"See also","text":"<ul> <li>ramptrig</li> <li>bisect</li> <li>interp1d</li> <li>bpf</li> <li>linsegr</li> </ul>"},{"location":"opcodes/linenv.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p> <p>(idea based on pd/else's <code>envgen</code> and supercollider's <code>envgen</code>)</p>"},{"location":"opcodes/linexp.html","title":"linexp","text":""},{"location":"opcodes/linexp.html#abstract","title":"Abstract","text":"<p>linear to exponentail interpolation</p>"},{"location":"opcodes/linexp.html#description","title":"Description","text":"<p>Maps a range of values to another range of values following an exponential curve</p>"},{"location":"opcodes/linexp.html#syntax","title":"Syntax","text":"<pre><code>iy  linexp  ix, iexp, ix0, ix1, iy0, iy1\nky  linexp  kx, kexp, ix0, ix1, iy0, iy1\n</code></pre>"},{"location":"opcodes/linexp.html#arguments","title":"Arguments","text":"<ul> <li><code>kx</code>: input value</li> <li><code>kx0</code>: lower bound of x</li> <li><code>kx1</code>: upper bound of x</li> <li><code>ky0</code>: lower bound of y</li> <li><code>ky1</code>: upper bound of y</li> </ul>"},{"location":"opcodes/linexp.html#output","title":"Output","text":"<ul> <li><code>ky</code>: the target value</li> </ul>"},{"location":"opcodes/linexp.html#execution-time","title":"Execution Time","text":"<ul> <li>Input</li> <li>Performance</li> </ul>"},{"location":"opcodes/linexp.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n&lt;/CsOptions&gt;\n&lt;CsInstruments&gt;\n\nsr = 44100\nksmps = 128\nnchnls = 2\n0dbfs = 1.0\n\n; Example file for linexp.csd\n\n/*\n\nlinexp\n\nlinear to exponential interpolation between two ranges\n\nky    linexp kx, kexp, ky0, ky1, kx0=0, kx1=1\n\n*/\n\n; Map a value within the range 1-3 to the range 0-10 with an exponent of 2.\ninstr 1\n  kx line 1, p3, 3\n  ky linexp kx, 2, 1, 3, 0, 10\n  printks \"kx: %f   ky: %f \\n\", 1/kr, kx, ky\nendin\n\n\n&lt;/CsInstruments&gt;\n&lt;CsScore&gt;\ni 1 0   0.2\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/linexp.html#see-also","title":"See also","text":"<ul> <li>linlin</li> <li>lincos</li> <li>bpf</li> </ul>"},{"location":"opcodes/linexp.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p> <p>(idea based on pd/else's <code>envgen</code> and supercollider's <code>envgen</code>)</p>"},{"location":"opcodes/loadnpy.html","title":"loadnpy","text":""},{"location":"opcodes/loadnpy.html#abstract","title":"Abstract","text":"<p>Load an array (of any number of dimensions) saved as a .npy file</p>"},{"location":"opcodes/loadnpy.html#description","title":"Description","text":"<p><code>loadnpy</code> loads an array saved as a .npy file. A .npy file holds a possibly multidimensional array of either int or float type, with members of 32 or 64 bits. This opcodes converts all such formats to a float array of the same shape. For more information on the <code>.npy</code> format, see https://numpy.org/devdocs/reference/generated/numpy.lib.format.html</p>"},{"location":"opcodes/loadnpy.html#syntax","title":"Syntax","text":"<pre><code>iArr[] loadnpy Spath\nkArr[] loadnpy Spath\n</code></pre>"},{"location":"opcodes/loadnpy.html#arguments","title":"Arguments","text":"<ul> <li>Spath: the path to the saved .npy file</li> </ul>"},{"location":"opcodes/loadnpy.html#output","title":"Output","text":"<ul> <li>iArr / kArr: the data as an array.</li> </ul>"},{"location":"opcodes/loadnpy.html#execution-time","title":"Execution Time","text":"<ul> <li>Init </li> </ul>"},{"location":"opcodes/loadnpy.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n--nosound\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\nsr     = 44100\nksmps  = 64\nnchnls = 2\n0dbfs  = 1\n\ninstr 1\n    iA[] loadnpy \"test-float64.npy\"\n    printarray iA\n\n    iB[] loadnpy \"test-2D.npy\"\n    printarray iB\n\n    iC[] loadnpy \"test-int.npy\"\n    printarray iC\n\n    turnoff\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\ni1 0 1\n; f0 3600\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/loadnpy.html#see-also","title":"See also","text":"<ul> <li>ftgen</li> <li>fillarray</li> <li>ftnew</li> <li>ftfree</li> </ul>"},{"location":"opcodes/loadnpy.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2021</p>"},{"location":"opcodes/memview.html","title":"memview","text":""},{"location":"opcodes/memview.html#abstract","title":"Abstract","text":"<p>Create a view into a table or another array</p>"},{"location":"opcodes/memview.html#description","title":"Description","text":"<p>memview makes it possible to operate on a table as if it were an array (using any array opcode), or to operate on a slice of an array without copying the underlying memory. It can be used to efficiently read a slice of an existing array, operate on rows of a  2D matrix, etc.</p> <p>The underlying memory is shared between the source and the view for the duration of the event.</p> <p>Using the returned array as a left-side variable is not supported. This can result in reallocation/resizing of the array, which in this case is not allowed since the underlying memory does not belong to the array. Using it in this way results in undefined behaviour</p> <p>The same holds true for creating a view from a ftable and freeing the ftable during the lifetime of the view.</p>"},{"location":"opcodes/memview.html#syntax","title":"Syntax","text":"<pre><code>iView[]  memview ift,      [, istart=0, iend=0]\nkView[]  memview iSource[] [, istart=0, iend=0]\nkView[]  memview kSource[] [, istart=0, iend=0]\n</code></pre>"},{"location":"opcodes/memview.html#arguments","title":"Arguments","text":"<ul> <li><code>ift</code>: the source ftable</li> <li><code>iSource[] / kSource[]</code>: the source array</li> <li><code>istart</code>: the start index of the view (default=0)</li> <li><code>iend</code>: the end index of the view (non inclusive, default=end of           the table / array)</li> </ul>"},{"location":"opcodes/memview.html#output","title":"Output","text":"<ul> <li><code>iView[]</code> / <code>kView[]</code>: the array view</li> </ul>"},{"location":"opcodes/memview.html#execution-time","title":"Execution time","text":"<ul> <li>Init</li> </ul>"},{"location":"opcodes/memview.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n--nosound\n-m0\n-d\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\n\n/*\nmemview\n\n\n\nCreate a view into a table or another array\n\niView[]  memview ift,      [, istart=0, iend=0]\nkView[]  memview iSource[] [, istart=0, iend=0]\nkView[]  memview kSource[] [, istart=0, iend=0]\n\nift: the source ftable\niSource[] / kSource[]: the source array\nistart: the start index of the view (default=0)\niend: the end index of the view (non inclusive, default=end of\nthe table / array)\n\nmemview makes it possible to operate on a table as if it\nwere an array, using any array opcode. \n\nIt is also possible to take a slice from a different array\nwithout copying the underlying elements. It can be used to \nefficiently read a slice of an existing array, operate on\nrows of a 2D matrix, etc.\n\nThe underlying memory is shared between the source and the view\nfor the duration of the event.\n\nIt is not supported to reuse the array as a left-side variable\nbecause that could incurr in reallocation / resizing, which in this\ncase is not allowed since the underlying memory does not belong to \nthe array. Using it in this way results in undefined behaviour.\n\nThe same holds true for creating a view from a ftable and freeing \nthe ftable during the lifetime of the view.\n\n\n*/\n\n\ngitab ftgen 0, 0, 10, -2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\n\ninstr 1\n  iView[] memview gitab\n  prints \"\\n$$$$ Original array:\"\n  printarray iView\n  iView[2] = 20\n  iView *= 0.5\n  prints \"\\n$$$$ Modified array:\"\n  printarray iView\n\n  prints \"\\n$$$$ Source table should be modified as well\\n\"\n  ftprint gitab\n\n  prints \"array length: %d \\n\", lenarray(iView)\n  turnoff\nendin\n\ninstr 2\n  kView[] memview gitab\n  printf \"\\n$$$$ Original array:\", 1\n  printarray kView\n  kView[2] = 20\n  kView *= 0.5\n  printf \"\\n$$$$ Modified array:\", 1\n  printarray kView\n\n  printf \"\\n$$$$ Source table should be modified as well\\n\", 1\n  ftprint gitab, -1\n\n  turnoff\nendin\n\ninstr 3 \n  iX[] fillarray 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n  iY[] memview iX, 5\n  kZ[] memview iX, 3, 8\n  iY *= 10\n  printarray iY\n  printarray iX\n  printarray kZ\n  turnoff\nendin\n\ninstr 4 \n  kX[] fillarray 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n  kY[] memview kX, 5\n  kY *= 0.5\n  printarray kX\n  printarray kY\n  turnoff\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\n; i1 0 1\n; i2 0 1\ni3 0 1\n; f0 3600\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/memview.html#see-also","title":"See also","text":"<ul> <li>copya2ftab</li> <li>slicearray</li> <li>tabrowlin</li> <li>ref</li> <li>deref</li> </ul>"},{"location":"opcodes/memview.html#credits","title":"Credits","text":"<p>Eduado Moguillansky, 2019</p>"},{"location":"opcodes/mtro.html","title":"mtro","text":""},{"location":"opcodes/mtro.html#abstract","title":"Abstract","text":"<p>an accurate version of metro</p>"},{"location":"opcodes/mtro.html#description","title":"Description","text":"<p><code>mtro</code> is a drop-in replacement of <code>metro</code> without the drifting over time. <code>metro</code> is implemented by adding a phase each cycle, which results in drifting over time due to rounding errors. <code>mtro</code> avoids this problem by keeping a counter and doing multiplication so that the error is limited.</p> <p>Following metro's implementation by default <code>mtro</code> is triggered at time=0. This is because <code>i_initphase</code> is set to 1 by default. It is possible to make <code>mtro</code> skip the 0 trigger by setting <code>i_initphase</code> to 0.</p>"},{"location":"opcodes/mtro.html#syntax","title":"Syntax","text":"<pre><code>kout mtro kfreq, i_initphase=1\n</code></pre>"},{"location":"opcodes/mtro.html#arguments","title":"Arguments","text":"<ul> <li>kfreq: the frequency of the trigger</li> <li>i_initphase: the initial phase (a value between 0 and 1). If set to 0, there is no trigger at time 0.     If set to 1, <code>mtro</code> triggers at time=0, similar to <code>metro</code></li> </ul>"},{"location":"opcodes/mtro.html#output","title":"Output","text":"<ul> <li>kout: 1 if the mtro has triggered, 0 otherwise</li> </ul>"},{"location":"opcodes/mtro.html#execution-time","title":"Execution Time","text":"<ul> <li>Performance</li> </ul>"},{"location":"opcodes/mtro.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n-odac \n--nosound\n&lt;/CsOptions&gt;\n&lt;CsInstruments&gt;\n\nsr = 48000\nksmps = 64\n\n\nopcode gettime, k, 0\n  xout (timeinstk:k() - 1) * (ksmps/sr)\nendop\n\ninstr 1\n  ktrig mtro 7\n  kt = gettime()\n  if ktrig == 1 then\n    println \"triggered! time: %f\", kt\n  endif\nendin\n\ninstr 2\n  ktrig metro 7\n  kt = gettime()\n  if ktrig == 1 then\n    println \"triggered! time: %f\", kt\n  endif\nendin\n\n\n&lt;/CsInstruments&gt;\n&lt;CsScore&gt;\ni 1 0 20\n; i 2 0 20\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/mtro.html#see-also","title":"See also","text":"<ul> <li>metro</li> </ul>"},{"location":"opcodes/mtro.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2021</p>"},{"location":"opcodes/nametoinstrnum.html","title":"nametoinstrnum","text":""},{"location":"opcodes/nametoinstrnum.html#abstract","title":"Abstract","text":"<p>Returns the number of a named instrument</p>"},{"location":"opcodes/nametoinstrnum.html#description","title":"Description","text":"<p>Returns the number of a named instrument, or -1 if the instrument does not exist. The only difference with <code>nstrnum</code> is that <code>nstrnum</code> throws an error and stops the event if the instrument does not exist</p> <p>NB: since this is an init-time opcode the name must be known at init-time</p>"},{"location":"opcodes/nametoinstrnum.html#syntax","title":"Syntax","text":"<pre><code>insno nametoinstrnum Sname\n</code></pre>"},{"location":"opcodes/nametoinstrnum.html#arguments","title":"Arguments","text":"<ul> <li>Sname: the name of the instrument</li> </ul>"},{"location":"opcodes/nametoinstrnum.html#output","title":"Output","text":"<ul> <li>insno: the instrument number assigned by csound</li> </ul>"},{"location":"opcodes/nametoinstrnum.html#execution-time","title":"Execution Time","text":"<ul> <li>Init</li> </ul>"},{"location":"opcodes/nametoinstrnum.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n-odac \n--nosound\n&lt;/CsOptions&gt;\n&lt;CsInstruments&gt;\n\nsr = 48000\nksmps = 64\n\n\ninstr foo\n  turnoff\nendin\n\ninstr findname\n  ifoo = nametoinstrnum(\"foo\")\n  Sfindname = \"findname\"\n  ip1 = nametoinstrnum(Sfindname)\n  ibar = nametoinstrnum(\"bar\")\n  prints \"foo has number: %d\\n\", ifoo\n  prints \"findname has number: %d\\n\", ip1\n  prints \"bar has number: %d\\n\", ibar\n\nendin\n\n&lt;/CsInstruments&gt;\n&lt;CsScore&gt;\ni \"findname\" 0 0.1\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/nametoinstrnum.html#see-also","title":"See also","text":"<ul> <li>metro</li> </ul>"},{"location":"opcodes/nametoinstrnum.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2021</p>"},{"location":"opcodes/panstereo.html","title":"panstereo","text":""},{"location":"opcodes/panstereo.html#abstract","title":"Abstract","text":"<p>Stereo signal balancer </p>"},{"location":"opcodes/panstereo.html#description","title":"Description","text":"<p>Equal power panning balances two channels. By panning from left (pos=0) to right (pos=1) you are decrementing the level of the left channel from 1 to 0 taking the square root of the linear scaling factor, while at the same time incrementing the level of the right channel from 0 to 1 using the same curve. In the center position (pos=0.5) this results in a level for both channels of <code>sqrt(0.5)</code> (<code>~=0.707</code> or -3dB). The output of panstereo remains a stereo signal. This is a  port of Supercollider's <code>Balance2</code> ugen.</p> <p>Note</p> <p><code>kpan</code> is defined between 0 (left) and 1 (right) to make it coherent with opcodes like <code>pan2</code>, which also use this range. This differs from the original implementation in Supercollider, which uses a pan value of -1 to 1. Notice that even if <code>kpan</code> is a scalar (k-) variable, it is interpolated internaly to prevent discontinuities (\"zipper\" noise).</p>"},{"location":"opcodes/panstereo.html#syntax","title":"Syntax","text":"<pre><code>aoutL, aoutR panstereo aL, aR, kpan, klevel=1\n</code></pre>"},{"location":"opcodes/panstereo.html#arguments","title":"Arguments","text":"<ul> <li>aL: left input </li> <li>aR: right input</li> <li>kpan: panning position, between 0 (left) and 1 (right)</li> <li>klevel: control rate level input (defaults to 1)</li> </ul>"},{"location":"opcodes/panstereo.html#output","title":"Output","text":"<ul> <li>aoutL: left output</li> <li>aoutR: right output</li> </ul>"},{"location":"opcodes/panstereo.html#execution-time","title":"Execution Time","text":"<ul> <li>Performance</li> </ul>"},{"location":"opcodes/panstereo.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n-odac              \n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\nsr     = 44100\nksmps  = 64\nnchnls = 2\n0dbfs  = 1\n\nopcode panst, aa, aak\n  a0, a1, kpos xin\n    aL,  aR  pan2 a0, kpos\n    aL1, aR1 pan2 a1, kpos\n    aL += aL1\n    aR += aR1\n    xout aL, aR\nendop\n\ninstr 1\n  anoise = pinker() * 0.5\n  aL = reson(anoise, 2000, 200, 2)\n  aR = reson(anoise, 1000, 200, 2)\n  ; aR oscili 0.1, 1000\n  kpan = lfo:k(0.5, 0.1) + 0.5\n  println \"kpan: %.3f\", kpan\n  aL, aR panstereo aL, aR, kpan, 1\n  outs aL, aR\nendin\n\ninstr 2\n  anoise = pinker() * 0.5\n  aL = reson(anoise, 2000, 10, 2)\n  aR = reson(anoise, 400, 10, 2)\n  ; aR oscili 0.1, 1000\n  kpan invalue \"pan\"\n  aL, aR panstereo aL, aR, kpan, 1\n  outs aL, aR\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\ni2 0.1 100\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n&lt;bsbPanel&gt;\n &lt;label&gt;Widgets&lt;/label&gt;\n &lt;objectName/&gt;\n &lt;x&gt;0&lt;/x&gt;\n &lt;y&gt;0&lt;/y&gt;\n &lt;width&gt;0&lt;/width&gt;\n &lt;height&gt;0&lt;/height&gt;\n &lt;visible&gt;true&lt;/visible&gt;\n &lt;uuid/&gt;\n &lt;bgcolor mode=\"nobackground\"&gt;\n  &lt;r&gt;255&lt;/r&gt;\n  &lt;g&gt;255&lt;/g&gt;\n  &lt;b&gt;255&lt;/b&gt;\n &lt;/bgcolor&gt;\n &lt;bsbObject type=\"BSBKnob\" version=\"2\"&gt;\n  &lt;objectName&gt;pan&lt;/objectName&gt;\n  &lt;x&gt;32&lt;/x&gt;\n  &lt;y&gt;10&lt;/y&gt;\n  &lt;width&gt;200&lt;/width&gt;\n  &lt;height&gt;200&lt;/height&gt;\n  &lt;uuid&gt;{96c2fd58-8a8e-4c1c-9be9-d33e4934e239}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;0&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;minimum&gt;0.00000000&lt;/minimum&gt;\n  &lt;maximum&gt;1.00000000&lt;/maximum&gt;\n  &lt;value&gt;0.55500000&lt;/value&gt;\n  &lt;mode&gt;lin&lt;/mode&gt;\n  &lt;mouseControl act=\"\"&gt;continuous&lt;/mouseControl&gt;\n  &lt;resolution&gt;0.01000000&lt;/resolution&gt;\n  &lt;randomizable group=\"0\"&gt;false&lt;/randomizable&gt;\n  &lt;color&gt;\n   &lt;r&gt;245&lt;/r&gt;\n   &lt;g&gt;124&lt;/g&gt;\n   &lt;b&gt;0&lt;/b&gt;\n  &lt;/color&gt;\n  &lt;textcolor&gt;#512900&lt;/textcolor&gt;\n  &lt;border&gt;0&lt;/border&gt;\n  &lt;borderColor&gt;#512900&lt;/borderColor&gt;\n  &lt;showvalue&gt;true&lt;/showvalue&gt;\n  &lt;flatstyle&gt;true&lt;/flatstyle&gt;\n  &lt;integerMode&gt;false&lt;/integerMode&gt;\n &lt;/bsbObject&gt;\n&lt;/bsbPanel&gt;\n&lt;bsbPresets&gt;\n&lt;/bsbPresets&gt;\n</code></pre>"},{"location":"opcodes/panstereo.html#see-also","title":"See also","text":"<ul> <li>pan2</li> <li>original implementation</li> <li>bpf</li> <li>Panning and Spatialization</li> </ul>"},{"location":"opcodes/panstereo.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2021</p>"},{"location":"opcodes/pathAbsolute.html","title":"pathAbsolute","text":""},{"location":"opcodes/pathAbsolute.html#abstract","title":"Abstract","text":"<p>Returns the absolute path of a file</p>"},{"location":"opcodes/pathAbsolute.html#description","title":"Description","text":"<p>If a relative path is given as argument, pathAbsolute returns the absolute path relative to the current working directory.</p> <p><code>pathAbsolute</code> will also expand <code>~</code> in unix platforms, so \"~/Documents/foo.txt\" will be expended to <code>\"/home/&lt;user&gt;/Documents/foo.txt\"</code> in linux and  <code>\"/Users/&lt;user&gt;/Documents/foo.txt\"</code> in macOS. Other environmental variables are NOT  expanded. </p> <p>Current working directory vs script directory</p> <p>Bear in mind that the current working  directory is not necessarily the directory of the csd being run but the directory  in which csound was started (either directly or via the API).  To calculate the absolute path in relation to the directory of the script being run, see <code>scriptDir</code>.</p>"},{"location":"opcodes/pathAbsolute.html#syntax","title":"Syntax","text":"<pre><code>Sabspath pathAbsolute Spath\n</code></pre>"},{"location":"opcodes/pathAbsolute.html#arguments","title":"Arguments","text":"<ul> <li>`Spath': The path to a file or directory</li> </ul>"},{"location":"opcodes/pathAbsolute.html#output","title":"Output","text":"<ul> <li><code>Sabspath</code>: the absolute path</li> </ul>"},{"location":"opcodes/pathAbsolute.html#execution-time","title":"Execution Time","text":"<ul> <li>Init </li> </ul>"},{"location":"opcodes/pathAbsolute.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n--nosound\n&lt;/CsOptions&gt;\n&lt;CsInstruments&gt;\n/*\n    pathAbsolute\n\n    Returns the absolute path of a file. \n*/\n\n\nsr     = 44100\nksmps  = 64\nnchnls = 2\n0dbfs  = 1\n\ninstr 1\n    Spath = \"/home/bar\"\n    Sabs = pathAbsolute(Spath)\n    prints \"Path: \\\"%s\\\", Absolute Path: \\\"%s\\\" \\n\", Spath, Sabs\n\n    Spath = \"foo/bar.ext\"\n    Sabs = pathAbsolute(Spath)\n    prints \"Path: \\\"%s\\\", Absolute Path: \\\"%s\\\" \\n\", Spath, Sabs\n\n    Spath = \" ~/Documents/mydoc.txt\"\n    Sabs = pathAbsolute(Spath)\n    prints \"Path: \\\"%s\\\", Absolute Path: \\\"%s\\\" \\n\", Spath, Sabs\n    turnoff\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\ni1 0 1\n; f0 3600\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/pathAbsolute.html#see-also","title":"See also","text":"<ul> <li>scriptDir</li> <li>pathJoin</li> <li>pathSplit</li> </ul>"},{"location":"opcodes/pathAbsolute.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2020</p>"},{"location":"opcodes/pathIsAbsolute.html","title":"pathIsAbsolute","text":""},{"location":"opcodes/pathIsAbsolute.html#abstract","title":"Abstract","text":"<p>Returns 1 if the path of a file is absolute</p>"},{"location":"opcodes/pathIsAbsolute.html#description","title":"Description","text":"<p>Returns 1 if the path of a file is absolute</p>"},{"location":"opcodes/pathIsAbsolute.html#syntax","title":"Syntax","text":"<pre><code>i_isabsolute pathIsAbsolute Spath \nk_isabsolute pathIsAbsolute Spath\n</code></pre>"},{"location":"opcodes/pathIsAbsolute.html#arguments","title":"Arguments","text":"<ul> <li>`Spath': The path to a file or directory</li> </ul>"},{"location":"opcodes/pathIsAbsolute.html#output","title":"Output","text":"<ul> <li><code>i_isabsolute</code>: 1 if the path is absolute, 0 otherwise</li> </ul>"},{"location":"opcodes/pathIsAbsolute.html#execution-time","title":"Execution Time","text":"<ul> <li>Init (if the result is i-type)</li> <li>Perf (if the result is k-type)</li> </ul>"},{"location":"opcodes/pathIsAbsolute.html#examples","title":"Examples","text":"<pre><code>i_isabsolute pathAbsolute \"relative/path/to/file.txt\"\nprints \"Path is absolute: %s \\n\", i_isabsolute == 1 ? \"yes\" : \"no\"\n</code></pre>"},{"location":"opcodes/pathIsAbsolute.html#see-also","title":"See also","text":"<ul> <li>pathAbsolute</li> <li>scriptDir</li> </ul>"},{"location":"opcodes/pathIsAbsolute.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2020</p>"},{"location":"opcodes/pathJoin.html","title":"pathJoin","text":""},{"location":"opcodes/pathJoin.html#abstract","title":"Abstract","text":"<p>Join two parts of a path according to the current platform</p>"},{"location":"opcodes/pathJoin.html#description","title":"Description","text":"<p>Given a directory and a filename, or a base directory and a relative path, join  these according to the current platform</p>"},{"location":"opcodes/pathJoin.html#syntax","title":"Syntax","text":"<pre><code>Sout pathJoin Spath1, Spath2\n</code></pre>"},{"location":"opcodes/pathJoin.html#arguments","title":"Arguments","text":"<ul> <li><code>Spath1</code>: The first part to join</li> <li><code>Spath2</code>: The second part to join</li> </ul>"},{"location":"opcodes/pathJoin.html#output","title":"Output","text":"<ul> <li><code>Sout</code>: the result of joining both paths</li> </ul>"},{"location":"opcodes/pathJoin.html#execution-time","title":"Execution Time","text":"<ul> <li>Init </li> </ul>"},{"location":"opcodes/pathJoin.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n--nosound\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\nsr     = 44100\nksmps  = 64\nnchnls = 2\n0dbfs  = 1\n\ninstr 1\n    Sdir = \"/home/bar\"\n    Sbase = \"filename.ext\"\n    Spath = pathJoin(Sdir, Sbase)\n    prints \"Spath: \\\"%s\\\", Sdir: \\\"%s\\\", Sbase: \\\"%s\\\"\\n\", Spath, Sdir, Sbase\n\n    Sdir = \"/home/bar/\"\n    Sbase = \"filename.ext\"\n    Spath = pathJoin(Sdir, Sbase)\n    prints \"Spath: \\\"%s\\\", Sdir: \\\"%s\\\", Sbase: \\\"%s\\\"\\n\", Spath, Sdir, Sbase\n\n    Sdir = \"\"\n    Sbase = \"filename.ext\"\n    Spath = pathJoin(Sdir, Sbase)\n    prints \"Spath: \\\"%s\\\", Sdir: \\\"%s\\\", Sbase: \\\"%s\\\"\\n\", Spath, Sdir, Sbase\n\n    Sdir = \"/home/bar\"\n    Sbase = \"\"\n    Spath = pathJoin(Sdir, Sbase)\n    prints \"Spath: \\\"%s\\\", Sdir: \\\"%s\\\", Sbase: \\\"%s\\\"\\n\", Spath, Sdir, Sbase\n\n    turnoff\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\ni1 0 1\n; f0 3600\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/pathJoin.html#see-also","title":"See also","text":"<ul> <li>pathSplit</li> <li>pathSplitExt</li> </ul>"},{"location":"opcodes/pathJoin.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2020</p>"},{"location":"opcodes/pathNative.html","title":"pathNative","text":""},{"location":"opcodes/pathNative.html#abstract","title":"Abstract","text":"<p>Convert a path to its native version</p>"},{"location":"opcodes/pathNative.html#description","title":"Description","text":"<p>Convert a path to a native path by replacing path separators to the native separators ('/' in unix, '\\' in windows)</p> <p>This is only useful when passing paths to external processes which need an absolute, native path</p> <p>NB: do not use absolute paths when writing cross-platform paths, since it is not possible to convert an absolute unix path to an absolute windows path (because of windows use of drives)</p> <p>NB2: windows already converts any forward slash to backwards slash, so as long as you use relative paths, there is no need to use this</p>"},{"location":"opcodes/pathNative.html#syntax","title":"Syntax","text":"<pre><code>Snative pathNative Spath\n</code></pre>"},{"location":"opcodes/pathNative.html#arguments","title":"Arguments","text":"<ul> <li><code>Spath</code>: the path to convert</li> </ul>"},{"location":"opcodes/pathNative.html#output","title":"Output","text":"<ul> <li><code>Snative</code>: the native path</li> </ul>"},{"location":"opcodes/pathNative.html#execution-time","title":"Execution Time","text":"<ul> <li>Init</li> </ul>"},{"location":"opcodes/pathNative.html#examples","title":"Examples","text":"<pre><code>Spath = \"foo/bar/baz.txt\"\nSnative pathNative Spath\nprints \"Original: %s, Native version: %s \\n\", Spath, Snative\n\n; this should print the original in unix, \"foo\\bar\\baz.txt\" in windows\n</code></pre>"},{"location":"opcodes/pathNative.html#see-also","title":"See also","text":"<ul> <li>pathNative</li> </ul>"},{"location":"opcodes/pathNative.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2020</p>"},{"location":"opcodes/pathSplit.html","title":"pathSplit","text":""},{"location":"opcodes/pathSplit.html#abstract","title":"Abstract","text":"<p>Split a path into directory and basename</p>"},{"location":"opcodes/pathSplit.html#description","title":"Description","text":"<p>Given a path <code>/path/to/filename.txt</code>, split it in <code>/path/to</code> and <code>filename.txt</code>. The directory part will never end with a path separator unless it is the root path</p>"},{"location":"opcodes/pathSplit.html#syntax","title":"Syntax","text":"<pre><code>Sdirectory, Sbase pathSplit Spath\n</code></pre>"},{"location":"opcodes/pathSplit.html#arguments","title":"Arguments","text":"<ul> <li><code>Spath</code>: The path to split</li> </ul>"},{"location":"opcodes/pathSplit.html#output","title":"Output","text":"<ul> <li><code>Sdirectory</code>: the directory part of the path</li> <li><code>Sbase</code>: the basename part of the path</li> </ul>"},{"location":"opcodes/pathSplit.html#execution-time","title":"Execution Time","text":"<ul> <li>Init</li> </ul>"},{"location":"opcodes/pathSplit.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n--nosound\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\nsr     = 44100\nksmps  = 64\nnchnls = 2\n0dbfs  = 1\n\ninstr 1\n    Spath = \"/home/bar/filename.ext\"\n    Sdir, Sbase pathSplit Spath\n    prints \"Spath: \\\"%s\\\", Sdir: \\\"%s\\\", Sbase: \\\"%s\\\"\\n\", Spath, Sdir, Sbase\n\n    Spath = \"filename.ext\"\n    Sdir, Sbase pathSplit Spath\n    prints \"Spath: \\\"%s\\\", Sdir: \\\"%s\\\", Sbase: \\\"%s\\\"\\n\", Spath, Sdir, Sbase\n\n    Spath = \"/filename.ext\"\n    Sdir, Sbase pathSplit Spath\n    prints \"Spath: \\\"%s\\\", Sdir: \\\"%s\\\", Sbase: \\\"%s\\\"\\n\", Spath, Sdir, Sbase\n\n    turnoff\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\ni1 0 1\n; f0 3600\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/pathSplit.html#see-also","title":"See also","text":"<ul> <li>pathSplitk</li> <li>pathSplitExt</li> <li>pathSplitExtk</li> </ul>"},{"location":"opcodes/pathSplit.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2020</p>"},{"location":"opcodes/pathSplitExt.html","title":"pathSplitExt","text":""},{"location":"opcodes/pathSplitExt.html#abstract","title":"Abstract","text":"<p>Split a path into prefix and extension</p>"},{"location":"opcodes/pathSplitExt.html#description","title":"Description","text":"<p>Given a path <code>/path/to/filename.txt</code>, split it in <code>/path/to/filename</code> and <code>.txt</code>.  See pathSplitExtk for a performance time version</p>"},{"location":"opcodes/pathSplitExt.html#syntax","title":"Syntax","text":"<pre><code>Sprefix, Sext pathSplitExt Spath\n</code></pre>"},{"location":"opcodes/pathSplitExt.html#arguments","title":"Arguments","text":"<ul> <li><code>Spath</code>: The path to split</li> </ul>"},{"location":"opcodes/pathSplitExt.html#output","title":"Output","text":"<ul> <li><code>Sprefix</code>: Everything before the extension</li> <li><code>Sext</code>: the extension, beginning with a .</li> </ul>"},{"location":"opcodes/pathSplitExt.html#execution-time","title":"Execution Time","text":"<ul> <li>Init</li> </ul>"},{"location":"opcodes/pathSplitExt.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n--nosound\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\nsr     = 44100\nksmps  = 64\nnchnls = 2\n0dbfs  = 1\n\ninstr 1\n    Spath = \"/home/bar/filename.ext\"\n    S1, Sext pathSplitExt Spath\n    prints \"Spath: \\\"%s\\\", S1: \\\"%s\\\", Sext: \\\"%s\\\"\\n\", Spath, S1, Sext\n\n    Spath = \"foo.filename.ext\"\n    S1, Sext pathSplitExt Spath\n    prints \"Spath: \\\"%s\\\", S1: \\\"%s\\\", Sext: \\\"%s\\\"\\n\", Spath, S1, Sext\n\n    Spath = \"/filename.ext\"\n    S1, Sext pathSplitExt Spath\n    prints \"Spath: \\\"%s\\\", S1: \\\"%s\\\", Sext: \\\"%s\\\"\\n\", Spath, S1, Sext\n\n    turnoff\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\ni1 0 1\n; f0 3600\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/pathSplitExt.html#see-also","title":"See also","text":"<ul> <li>pathSplitExtk</li> <li>pathSplit</li> <li>pathJoin</li> </ul>"},{"location":"opcodes/pathSplitExt.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2020</p>"},{"location":"opcodes/pathSplitExtk.html","title":"pathSplitExtk","text":""},{"location":"opcodes/pathSplitExtk.html#abstract","title":"Abstract","text":"<p>Split a path into prefix and extension at performance time</p>"},{"location":"opcodes/pathSplitExtk.html#description","title":"Description","text":"<p>Given a path <code>/path/to/filename.txt</code>, split it in <code>/path/to/filename</code> and <code>.txt</code>.  See pathSplitExt for an init-time only version</p>"},{"location":"opcodes/pathSplitExtk.html#syntax","title":"Syntax","text":"<pre><code>Sprefix, Sext pathSplitExtk Spath\n</code></pre>"},{"location":"opcodes/pathSplitExtk.html#arguments","title":"Arguments","text":"<ul> <li><code>Spath</code>: The path to split</li> </ul>"},{"location":"opcodes/pathSplitExtk.html#output","title":"Output","text":"<ul> <li><code>Sprefix</code>: Everything before the extension</li> <li><code>Sext</code>: the extension, beginning with a .</li> </ul>"},{"location":"opcodes/pathSplitExtk.html#execution-time","title":"Execution Time","text":"<ul> <li>Performance</li> </ul>"},{"location":"opcodes/pathSplitExtk.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n--nosound\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\nsr     = 44100\nksmps  = 64\nnchnls = 2\n0dbfs  = 1\n\ninstr 1\n    Spath = \"/home/bar/filename.ext\"\n    S1, Sext pathSplitExt Spath\n    prints \"Spath: \\\"%s\\\", S1: \\\"%s\\\", Sext: \\\"%s\\\"\\n\", Spath, S1, Sext\n\n    Spath = \"foo.filename.ext\"\n    S1, Sext pathSplitExt Spath\n    prints \"Spath: \\\"%s\\\", S1: \\\"%s\\\", Sext: \\\"%s\\\"\\n\", Spath, S1, Sext\n\n    Spath = \"/filename.ext\"\n    S1, Sext pathSplitExt Spath\n    prints \"Spath: \\\"%s\\\", S1: \\\"%s\\\", Sext: \\\"%s\\\"\\n\", Spath, S1, Sext\n\n    turnoff\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\ni1 0 1\n; f0 3600\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/pathSplitExtk.html#see-also","title":"See also","text":"<ul> <li>pathSplitExt</li> <li>pathSplit</li> <li>pathJoin</li> </ul>"},{"location":"opcodes/pathSplitExtk.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2020</p>"},{"location":"opcodes/pathSplitk.html","title":"pathSplitk","text":""},{"location":"opcodes/pathSplitk.html#abstract","title":"Abstract","text":"<p>Split a path into directory and basename at perf-time</p>"},{"location":"opcodes/pathSplitk.html#description","title":"Description","text":"<p>Given a path <code>/path/to/filename.txt</code>, split it in <code>/path/to</code> and <code>filename.txt</code>. The directory part will never end with a path separator unless it is the root path</p>"},{"location":"opcodes/pathSplitk.html#syntax","title":"Syntax","text":"<pre><code>Sdirectory, Sbase pathSplitk Spath\n</code></pre>"},{"location":"opcodes/pathSplitk.html#arguments","title":"Arguments","text":"<ul> <li><code>Spath</code>: The path to split</li> </ul>"},{"location":"opcodes/pathSplitk.html#output","title":"Output","text":"<ul> <li><code>Sdirectory</code>: the directory part of the path</li> <li><code>Sbase</code>: the basename part of the path</li> </ul>"},{"location":"opcodes/pathSplitk.html#execution-time","title":"Execution Time","text":"<ul> <li>Performance</li> </ul>"},{"location":"opcodes/pathSplitk.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n--nosound\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\nsr     = 44100\nksmps  = 64\nnchnls = 2\n0dbfs  = 1\n\ninstr 1\n    Spath = \"/home/bar/filename.ext\"\n    Sdir, Sbase pathSplitk Spath\n    printsk \"Spath: \\\"%s\\\", Sdir: \\\"%s\\\", Sbase: \\\"%s\\\"\\n\", Spath, Sdir, Sbase\n\n    Spath = \"filename.ext\"\n    Sdir, Sbase pathSplitk Spath\n    printsk \"Spath: \\\"%s\\\", Sdir: \\\"%s\\\", Sbase: \\\"%s\\\"\\n\", Spath, Sdir, Sbase\n\n    Spath = \"/filename.ext\"\n    Sdir, Sbase pathSplitk Spath\n    printsk \"Spath: \\\"%s\\\", Sdir: \\\"%s\\\", Sbase: \\\"%s\\\"\\n\", Spath, Sdir, Sbase\n\n    turnoff\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\ni1 0 1\n</code></pre>"},{"location":"opcodes/pathSplitk.html#see-also","title":"See also","text":"<ul> <li>pathSplit</li> <li>pathSplitExt</li> <li>pathSplitExtk</li> </ul>"},{"location":"opcodes/pathSplitk.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2020</p>"},{"location":"opcodes/perlin3.html","title":"perlin3","text":""},{"location":"opcodes/perlin3.html#abstract","title":"Abstract","text":"<p>gradient noise sound generator</p>"},{"location":"opcodes/perlin3.html#description","title":"Description","text":"<p>Perlin noise is a type of gradient noise devised by Ken Perlin, and commonly used to add texture to objects rendered in computer graphics. It is deterministic: for a given input co-ordinate it always returns the same output value. To make audible noise you will typically need to define some trajectory through the co-ordinate space.</p> <p><code>perlin3</code> is a csound port of Supercollider's <code>Perlin3</code></p>"},{"location":"opcodes/perlin3.html#syntax","title":"Syntax","text":"<pre><code>aout  perlin3 ax, ay, az\nkout  perlin3 kx, ky, kz\n</code></pre>"},{"location":"opcodes/perlin3.html#arguments","title":"Arguments","text":"<ul> <li><code>kx</code>, <code>ky</code>, <code>kz</code>: the coordinates of a point in 3D space. In the current implementation the space wraps at 255 so any value is actually possible.</li> </ul>"},{"location":"opcodes/perlin3.html#output","title":"Output","text":"<ul> <li><code>aout</code> / <code>kout</code>: the perlin noise corresponding to the given coordinates</li> </ul>"},{"location":"opcodes/perlin3.html#execution-time","title":"Execution Time","text":"<ul> <li>Performance</li> </ul>"},{"location":"opcodes/perlin3.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n\n&lt;CsInstruments&gt;\n/* to be run in csoundqt &gt;= 0.9.8 */\n\nsr     = 44100\nksmps  = 64\nnchnls = 2\n0dbfs  = 1\n\n; an empty table to plot\ngiplot1 ftgen 0, 0, 2000, 2, 0\ngiplot2 ftgen 0, 0, 2000, 2, 0\n\nopcode tabplot, 0, Sik\n    Schan, itab, kvalue xin\n    ; init\n    outvalue Schan, itab\n\n    tablew kvalue, accum:k(1), itab, 0, 0, 1\n\n    ; update the plot\n    if metro(30) == 1 then\n        outvalue Schan, k(-1)\n    endif\nendop\n\ninstr perlin3\n  kspeed = line:k(0.1, 10, 2)\n  ax = accum:a(kspeed/sr)\n  az = ax*0.5\n  aper1 = perlin3(ax, a(0), az)\n  aper2 = perlin3(a(0), ax, az)\n  asig = pinker() * 0.4\n\n  ; remap to 0-1\n  aper1 = (aper1 + 1) * 0.5\n  aper2 = (aper2 + 1) * 0.5\n\n  ilagtime = 0.1\n  a1 = asig*lag(aper1, ilagtime)\n  a2 = asig*lag(aper2, ilagtime)\n  a1, a2 reverbsc a1, a2, 0.92, 12000\n  outch 1, a1, 2, a2\n\n  ; plot the trajectory in csoundqt\n  tabplot \"plot1\", giplot1, aper1[0]\n  tabplot \"plot2\", giplot2, aper2[0]\n\nendin\n\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\ni \"perlin3\" 0 300\n\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n\n\n&lt;bsbPanel&gt;\n &lt;label&gt;Widgets&lt;/label&gt;\n &lt;objectName/&gt;\n &lt;x&gt;0&lt;/x&gt;\n &lt;y&gt;0&lt;/y&gt;\n &lt;width&gt;0&lt;/width&gt;\n &lt;height&gt;0&lt;/height&gt;\n &lt;visible&gt;true&lt;/visible&gt;\n &lt;uuid/&gt;\n &lt;bgcolor mode=\"nobackground\"&gt;\n  &lt;r&gt;255&lt;/r&gt;\n  &lt;g&gt;255&lt;/g&gt;\n  &lt;b&gt;255&lt;/b&gt;\n &lt;/bgcolor&gt;\n &lt;bsbObject version=\"2\" type=\"BSBTableDisplay\"&gt;\n  &lt;objectName&gt;plot1&lt;/objectName&gt;\n  &lt;x&gt;6&lt;/x&gt;\n  &lt;y&gt;11&lt;/y&gt;\n  &lt;width&gt;500&lt;/width&gt;\n  &lt;height&gt;150&lt;/height&gt;\n  &lt;uuid&gt;{b75d16b1-05b3-4358-974e-f2dfa85d3d34}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;-3&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;color&gt;\n   &lt;r&gt;255&lt;/r&gt;\n   &lt;g&gt;193&lt;/g&gt;\n   &lt;b&gt;3&lt;/b&gt;\n  &lt;/color&gt;\n  &lt;range&gt;0.00&lt;/range&gt;\n &lt;/bsbObject&gt;\n &lt;bsbObject version=\"2\" type=\"BSBTableDisplay\"&gt;\n  &lt;objectName&gt;plot2&lt;/objectName&gt;\n  &lt;x&gt;5&lt;/x&gt;\n  &lt;y&gt;170&lt;/y&gt;\n  &lt;width&gt;500&lt;/width&gt;\n  &lt;height&gt;150&lt;/height&gt;\n  &lt;uuid&gt;{9a8bac1d-2234-450c-8807-37f9902bfb74}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;-3&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;color&gt;\n   &lt;r&gt;255&lt;/r&gt;\n   &lt;g&gt;193&lt;/g&gt;\n   &lt;b&gt;3&lt;/b&gt;\n  &lt;/color&gt;\n  &lt;range&gt;0.00&lt;/range&gt;\n &lt;/bsbObject&gt;\n&lt;/bsbPanel&gt;\n&lt;bsbPresets&gt;\n&lt;/bsbPresets&gt;\n</code></pre>"},{"location":"opcodes/perlin3.html#see-also","title":"See also","text":"<ul> <li>Supercollider's Perlin3</li> </ul>"},{"location":"opcodes/perlin3.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2020</p>"},{"location":"opcodes/poly.html","title":"poly","text":""},{"location":"opcodes/poly.html#abstract","title":"Abstract","text":"<p><code>poly</code> creates and controls multiple parallel version of an opcode</p>"},{"location":"opcodes/poly.html#description","title":"Description","text":"<p><code>poly</code> creates a user given number of instances of an opcode, each with its own state, inputs and outputs. The resulting output is an array where each element holds the output of the corresponding instance.</p> <p>In general, an opcode has a signature, given by the number and types of its output and input arguments. For example, the opcode <code>oscili</code> as used like <code>aout oscili kamp, kfreq</code> has a signature <code>a / kk</code> (<code>a</code> as output, <code>kk</code> as input).</p> <p>To follow this example, to create 10 parallel versions of this opcode (an oscillator bank) it is possible to use <code>poly</code> like this:</p> <pre><code>kFreqs[] fillarray 100, 110, 200, 220, 300, 330, 400, 440, 500, 550\naOut[] poly 10, \"oscili\", 0.1, kFreqs\n</code></pre> <p>Notice that it is possible to set one value for each instance, as given by <code>kFreqs</code>, or one value to be shared by all instances, as given by the amplitude <code>0.1</code>. By changing the array <code>kFreqs</code> it is possible to modify the frequency of each oscillator.</p> <p>It is of course possible to chain multiple <code>poly</code>s to generate complex effect chains, and <code>poly</code> can also be used with k-values.</p> <p>Warning</p> <p>At the moment <code>poly</code> works only with builtin opcodes. This might change in the future</p> <p>Note</p> <p>for limitations in the type system of csound, <code>poly</code> works with all opcodes which have at least one output. For opcodes with no outputs (like <code>outch</code>, for example), use poly0</p>"},{"location":"opcodes/poly.html#syntax","title":"Syntax","text":"<pre><code>xout1[], [ xout2[], ... ] poly inuminstances, Sopcode, xarg0, [xarg1, ...]\n</code></pre>"},{"location":"opcodes/poly.html#arguments","title":"Arguments","text":"<ul> <li><code>inuminstances</code>: the number of instances of <code>Sopcode</code> to instantiate</li> <li><code>Sopcode</code>: the name of the opcode</li> <li><code>xargs</code>: any number of arguments, either i-, k- or a-rate, either scalar or arrays,            or strings, as needed by the given opcode. String arrays are not yet supported</li> </ul> <p>The number and type of the input arguments depend on the arguments passed to the given opcode. The same applies for the output arguments</p> <p>NB: output arguments are always arrays, input arguments can be arrays, in which case they must be at least the size of <code>inuminstances</code>, or scalars, in which case the same value is shared by multiple instances</p>"},{"location":"opcodes/poly.html#output","title":"Output","text":"<p>The output is one or more arrays of k- or a-type, corresponding to the opcode. For instance, an opcode like <code>aout oscili 0.1, kfreq</code> will output an array of audio channels. An opcode like <code>pan2</code> will output two audio arrays.</p>"},{"location":"opcodes/poly.html#examples","title":"Examples","text":"<p>LISTEN</p> <pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n; -odac           \n\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\nsr     = 44100\nksmps  = 32\nnchnls = 2\n0dbfs  = 1\n\n\n; create an array of random values between 0-1\n; inum: number of elements in the array\nopcode rndarr, i[], i\n  inum xin \n  iOut[] init inum \n  i0 = 0\n  while i0 &lt; inum do \n    iOut[i0] = unirand(1)\n    i0 += 1\n  od \n  xout iOut\nendop\n\n; multiple oscillators, mixed down to mono\ninstr 1\n  ; number of oscillators\n  inum = 100\n\n  ; fundamental\n  kmidi = line(ntom:i(\"2G\"), p3, ntom:i(\"1C\"))\n  kf0 = mtof(kmidi)\n\n  ; each oscillator is an overtone of f0\n  kRatios[] genarray_i 1, inum\n\n  ; harmonicity over time\n  kexp line 1, p3, 1.32\n\n  ; the freq. of each oscillator\n  kFreqs[] = (kRatios ^ kexp) * kf0\n\n  ; array of random phases, to avoid synchronous start\n  iPhs[] rndarr inum \n\n  ; generate the oscillators. \n  aOscils[] poly inum, \"oscili\", 1/inum, kFreqs, -1, iPhs\n\n  amono sumarray aOscils\n  amono *= linsegr:a(0, 0.05, 1, 0.05, 0)\n  outs amono, amono\nendin\n\n; poly instances stacked as a processing pipe\ninstr 2\n  ; amount of polyphony\n  inum = 30\n\n  iFreqs[] rndarr inum \n\n  ; the ratios of the overtones\n  kRatios[] genarray_i 1, inum\n\n  ; a down gliss\n  km0 linseg ntom:i(\"2C\"), p3*0.8, ntom:i(\"1C\")\n  kf0 = mtof(km0)\n\n  ; harmonicity curve\n  kp linsegb 1, p3*0.8, 1.68\n\n  ; calculate actual freqs.\n  kFreqs[] = (kRatios ^ kp) * kf0\n\n  ; lfo freqs. used for AM and panning\n  kf linsegb 0.1, p3*0.62, 0.8, p3*0.8, 0.8, p3*0.96, 12, p3, 60\n  kLfoFreqs[] = iFreqs * kf \n\n  ; multiple noise instances, amplitude modulated\n  aA[]    poly inum, \"noise\", 0.5, 0.3\n  aAmps[] poly inum, \"oscili\", 1, kLfoFreqs*0.6\n  aA *= aAmps\n\n  ; filter noise with bandpass \n  kQ linsegb 0.5, p3*0.5, 0.02, p3, 0.0001\n  kBands[] = kFreqs * kQ\n  aB[] poly inum, \"resonr\", aA, kFreqs, kBands\n\n  ; panning. poly works also with k-rate and with \n  ; opcodes producing multiple outputs, like pan2\n  kPanPos[] poly inum, \"lfo\", 0.5, kLfoFreqs\n  kPanPos += 0.5  ; lfo in the range 0-1 for panning\n  aL[], aR[] poly inum, \"pan2\", aB, kPanPos\n\n  aleft  sumarray aL \n  aright sumarray aR\n\n  ; compress / fade\n  aref init 1 \n  asig = 0.707 * (aleft + aright)\n  again compress2 aref, asig, -90, -48, -24, 2.5, 0.05, 0.2, 0.05\n  aleft *= again \n  aright *= again \n\n  again2 compress2 aref, (aleft+aright)*0.707, -90, -6, -3, 20, 0.002, 0.010, 0.02\n  aenv = again2 * cossegr:a(0, 1, 1, 0.1, 0)\n  outs aleft*aenv, aright*aenv\nendin\n\nopcode test, a, k\n  kfreq xin \n  aout oscili 0.1, kfreq \n  xout aout \nendop \n\ninstr 3\n  ; test udo\n  kfreqs[] fillarray 440, 443 \n  aA[] poly 2, \"test\", kfreqs \n  a0 sumarray aA\n  outs a0, a0 \nendin \n\n&lt;/CsInstruments&gt;\n&lt;CsScore&gt;\n\ni 1 0 8\ni 2 9 50\n; i 3 0 1\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/poly.html#see-also","title":"See also","text":"<ul> <li>poly0</li> <li>maparray</li> <li>polyseq</li> </ul>"},{"location":"opcodes/poly.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/poly0.html","title":"poly0","text":""},{"location":"opcodes/poly0.html#abstract","title":"Abstract","text":"<p><code>poly0</code> creates and controls multiple parallel version of an opcode with no outputs</p>"},{"location":"opcodes/poly0.html#description","title":"Description","text":"<p><code>poly0</code> creates a user given number of instances of an opcode, each with its own state, inputs and outputs. The resulting output is an array where each element holds the output of the corresponding instance.</p> <p>In general, an opcode has a signature, given by the number and types of its output and input arguments. For example, the opcode <code>oscili</code> as used like <code>aout oscili kamp, kfreq</code> has a signature <code>a / kk</code> (<code>a</code> as output, <code>kk</code> as input).</p> <p>To follow this example, to create 10 parallel versions of this opcode (an oscillator bank) it is possible to use <code>poly0</code> like this:</p> <pre><code>kFreqs[] fillarray 100, 110, 200, 220, 300, 330, 400, 440, 500, 550\niPans[]   fillarray 0,   1,   0,   1,   0.5, 0.3, 0.7, 0.2, 0.9, 0.8\naSigs[] poly 10, \"oscili\", 0.1, kFreqs\naLs[], aRs[] poly 10, \"pan2\", aSigs, iPans\npoly0 10, \"outch\", 1, aLs\npoly0 10, \"outch\", 2, aRs\n</code></pre> <p>Notice that it is possible to set one value for each instance, as given by <code>kFreqs</code>, or one value to be shared by all instances, as given by the amplitude <code>0.1</code>. By changing the array <code>kFreqs</code> it is possible to modify the frequency of each oscillator.</p> <p>It is of course possible to chain multiple <code>poly0</code>s to generate complex effect chains, and <code>poly0</code> can also be used with k-values.</p> <p>Warning</p> <p>At the moment <code>poly0</code> works only with builtin opcodes. This might change in the future</p>"},{"location":"opcodes/poly0.html#syntax","title":"Syntax","text":"<pre><code>poly0 inuminstances, Sopcode, xarg0, [xarg1, ...]\n</code></pre>"},{"location":"opcodes/poly0.html#arguments","title":"Arguments","text":"<ul> <li><code>inuminstances</code>: the number of instances of <code>Sopcode</code> to instantiate</li> <li><code>Sopcode</code>: the name of the opcode</li> <li><code>xargs</code>: any number of arguments, either i-, k- or a-rate, either scalar or arrays,            or strings, as needed by the given opcode. String arrays are not yet supported</li> </ul> <p>The number and type of the input arguments depend on the arguments passed to the given opcode. The same applies for the output arguments</p> <p>NB: output arguments are always arrays, input arguments can be arrays, in which case they must be at least the size of <code>inuminstances</code>, or scalars, in which case the same value is shared by multiple instances</p>"},{"location":"opcodes/poly0.html#examples","title":"Examples","text":"<p>See poly for examples</p>"},{"location":"opcodes/poly0.html#see-also","title":"See also","text":"<ul> <li>poly</li> <li>maparray</li> <li>polyseq</li> </ul>"},{"location":"opcodes/poly0.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/polyseq.html","title":"polyseq","text":""},{"location":"opcodes/polyseq.html#abstract","title":"Abstract","text":"<p><code>polyseq</code> creates and controls multiple sequential version of an opcode</p>"},{"location":"opcodes/polyseq.html#description","title":"Description","text":"<p><code>polyseq</code> creates a user given number of instances of an opcode, each with its own state. The output of an instance is routed to the input of the next instance, forming a chain. Each instance can be controlled individually.</p> <p>We differentiate between <code>chained</code> and <code>multiplexed</code> arguments. <code>chained</code> arguments are the ones which are mapped from one opcode instance to the next, so that the output of  one instance is routed to the input of the next. <code>multiplexed</code> are passed after the  <code>chained</code> arguments and work as they do with <code>poly</code>: if an array is passed, then each  instance is delivered one element of this array, and if a scalar value is passed, then  all instances share the same argument.</p> <p><code>polyseq</code> can have any number of inputs and outputs, as long as the opcode used has matching inputs and outputs.     </p>"},{"location":"opcodes/polyseq.html#example","title":"Example","text":"<p>All this is best explained with an example:</p> <pre><code>; these two signal chains produce the same result\na0 pinker\nkFreqs[] fillarray 100, 150, 300, 330\n\naeq rbjeq a0, kFreqs[0], 2, 10, 1, 8\naeq rbjeq aeq, kFreqs[1], 2, 10, 1, 8\naeq rbjeq aeq, kFreqs[2], 2, 10, 1, 8\naeq rbjeq aeq, kFreqs[3], 2, 10, 1, 8\n\naseq polyseq 4, \"rbjeq\", a0, kFreqs, 2, 10, 1, 8\n</code></pre>"},{"location":"opcodes/polyseq.html#syntax","title":"Syntax","text":"<pre><code>xouts polyseq numinstances:i, opcodename:s, xins, params ...\n</code></pre>"},{"location":"opcodes/polyseq.html#arguments","title":"Arguments","text":"<ul> <li><code>inuminstances</code>: the number of instances of <code>Sopcode</code> to instantiate</li> <li><code>Sopcode</code>: the name of the opcode</li> <li><code>xins</code>: any number of arguments, either k- or a-rate, which should correspond           to the outputs of the opcode</li> </ul> <p>The number and type of the input arguments depend on the arguments passed to the  given opcode. The same applies for the output arguments</p>"},{"location":"opcodes/polyseq.html#output","title":"Output","text":"<p><code>xouts</code>: any number of arguments of type <code>k</code> or <code>a</code>, as output by the opcode</p>"},{"location":"opcodes/polyseq.html#examples","title":"Examples","text":"<p>LISTEN</p> <pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n; -odac           \n\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\nsr     = 44100\nksmps  = 32\nnchnls = 2\n0dbfs  = 1\n\n; Example file for polyseq\n\ninstr 1\n  ; A simple parametric eq.\n  ; On the left channel, the reference signal,\n  ; on the right, the polyseq implementation.\n  ; These should be the same\n\n  a0 pinker\n  a0 *= ampdb(-12)\n\n  kFreqs[] fillarray 400, 1400, 3000, 4400, 8000, 12000\n  kQs[] fillarray    10,    20,   10,   20,   10,    20\n  kV = ampdb(18)\n\n  aref = a0\n  aref rbjeq aref, kFreqs[0], kV, kQs[0], 1, 8\n  aref rbjeq aref, kFreqs[1], kV, kQs[1], 1, 8\n  aref rbjeq aref, kFreqs[2], kV, kQs[2], 1, 8\n  aref rbjeq aref, kFreqs[3], kV, kQs[3], 1, 8\n  aref rbjeq aref, kFreqs[4], kV, kQs[4], 1, 8\n  aref rbjeq aref, kFreqs[5], kV, kQs[5], 1, 8\n\n  aseq polyseq lenarray(kFreqs), \"rbjeq\", a0, kFreqs, kV, kQs, 1, 8\n\n  outs aref, aseq\n\nendin\n\nopcode rndarr, i[], iii\n  inum, imin, imax xin \n  iOut[] init inum \n  i0 = 0\n  idelta = imax - imin\n  while i0 &lt; inum do \n    iOut[i0] = imin + unirand(idelta)\n    i0 += 1\n  od \n  xout iOut\nendop\n\n\ninstr 2\n  ; two varying eqs\n  a0 = pinker() * ampdb(-8)\n\n  kFreqs0[] fillarray 50, 130, 400, 500, 1400, 3000, 4400, 5000, 8000\n  inum lenarray kFreqs0\n\n  iFreqslfo[] rndarr inum, 0.05, 0.4\n  kLfos[] poly inum, \"lfo\", 0.1, iFreqslfo\n\n  kFreqsL[] = kFreqs0 * (1+kLfos)\n  kFreqsR[] = kFreqs0 * (1+kLfos*1.62)\n\n  kQs[] poly inum, \"lfo\", 5, iFreqslfo*1.5\n  kQs += 7.5\n\n  aeqL polyseq inum, \"rbjeq\", a0, kFreqsL, ampdb(10), kQs, 1, 8\n  aeqR polyseq inum, \"rbjeq\", a0, kFreqsR, ampdb(12), kQs*1.5, 1, 8\n\n  ; declick\n  aenv = linsegr(0, 0.5, 1, 0.5, 0)\n  outs aeqL*aenv, aeqR*aenv\nendin\n\n&lt;/CsInstruments&gt;\n&lt;CsScore&gt;\n\ni 1 0 5\ni 2 5 20\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/polyseq.html#see-also","title":"See also","text":"<ul> <li>maparray</li> <li>poly</li> </ul>"},{"location":"opcodes/polyseq.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/pool_at.html","title":"pool_at","text":""},{"location":"opcodes/pool_at.html#abstract","title":"Abstract","text":"<p>Returns the item of a pool at a given index</p>"},{"location":"opcodes/pool_at.html#description","title":"Description","text":"<p>A pool is actually a stack of numbers, based on an array.</p> <p>The pool_ opcodes implement a stack of numbers. This is useful when assigning ids to resources, like assigning fractional numbers to instrument instances to access them individually. To get a value, call <code>pool_pop</code> and when finished using it the value is returned to the pool with <code>pool_push</code>. <code>pool_size</code> returns the size of the pool (the number of items in it, not the capacity, see <code>pool_capacity</code> for that)</p>"},{"location":"opcodes/pool_at.html#syntax","title":"Syntax","text":"<pre><code>item  pool_at ipool, index\nkitem pool_at ipool, kindex\n</code></pre>"},{"location":"opcodes/pool_at.html#arguments","title":"Arguments","text":"<ul> <li><code>ipool</code>: the pool to push the value to</li> <li><code>index</code> / <code>kindex</code>: the index to query</li> </ul>"},{"location":"opcodes/pool_at.html#output","title":"Output","text":"<ul> <li><code>item</code> / <code>kitem</code>: the item at the given index</li> </ul>"},{"location":"opcodes/pool_at.html#execution-time","title":"Execution Time","text":"<ul> <li>Init</li> <li>Performance</li> </ul>"},{"location":"opcodes/pool_at.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n--nosound\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\n\n/*\n   Example file for pool_at\n\n   pool_at returns the item of a pool at a given index\n\n   item pool_at ipool, idx\n   ktem pool_at ipool, kidx\n\n*/\n\nopcode print_pool, 0, i\n  ipool xin\n  i0 = 0\n  isize = pool_size(ipool)\n  while i0 &lt; isize do\n    item = pool_at(ipool, i0)\n    print item\n    i0 += 1\n  od\nendop\n\ninstr 1\n  ipool pool_gen 10\n  i1 pool_pop ipool\n  i2 pool_pop ipool\n  prints \"\\n&lt;&lt;&lt; pool size: %d, pool capacity: %d &gt;&gt;&gt; \\n\\n\", \\\n         pool_size:i(ipool), pool_capacity:i(ipool)\n  print_pool ipool\n  turnoff\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\ni1 0 1\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/pool_at.html#see-also","title":"See also","text":"<ul> <li>pool_capacity</li> <li>pool_pop</li> <li>pool_new</li> <li>pool_gen</li> </ul>"},{"location":"opcodes/pool_at.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/pool_capacity.html","title":"pool_capacity","text":""},{"location":"opcodes/pool_capacity.html#abstract","title":"Abstract","text":"<p>Returns the capacity of a pool</p>"},{"location":"opcodes/pool_capacity.html#description","title":"Description","text":"<p>A pool is actually a stack of numbers, based on an array. <code>pool_capacity</code> returns the maximum number of items which can be pushed in this pool. If the pool was created with a fixed capacity, then pushing when the pool is full will result in a performance error. To create a pool with dynamic size, use pool_new without giving a capacity (see pool_new)</p> <p>The pool_ opcodes implement a stack of numbers. This is useful when assigning ids to resources, like assigning fractional numbers to instrument instances to access them individually. To get a value, call <code>pool_pop</code> and when finished using it the value is returned to the pool with <code>pool_push</code>. <code>pool_capacity</code> returns the capacity of the pool (the max. number of items it can hold, not the actual size, see pool_size for that)</p> <p>Note</p> <p>To differenciate between the opcode being called at init- or at performance time, use the functional style <code>pool_capacity:i(ipool)</code> or <code>pool_capacity:k(ipool)</code></p>"},{"location":"opcodes/pool_capacity.html#syntax","title":"Syntax","text":"<pre><code>icapacity pool_capacity ipool\nkcapacity pool_capacity kpool\n</code></pre>"},{"location":"opcodes/pool_capacity.html#arguments","title":"Arguments","text":"<ul> <li><code>ipool</code>: the pool query</li> </ul>"},{"location":"opcodes/pool_capacity.html#output","title":"Output","text":"<ul> <li><code>icapacity</code> / <code>kcapacity</code>: the max. number of items this pool can hold</li> </ul>"},{"location":"opcodes/pool_capacity.html#execution-time","title":"Execution Time","text":"<ul> <li>Init</li> <li>Performance</li> </ul>"},{"location":"opcodes/pool_capacity.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n--nosound\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\n\n/*\n   Example file for pool_size\n\n   pool_size returns the size of the pool, either at \n   init or at performance time\n\n   The size of a pool is the number of items actually inside\n   the pool (see also pool_capacity)\n\n*/\n\ninstr 1\n  ipool pool_gen 10\n  i1 pool_pop ipool\n  i2 pool_pop ipool\n  prints \"\\n&lt;&lt;&lt; pool size: %d, pool capacity: %d &gt;&gt;&gt; \\n\\n\", \\\n         pool_size:i(ipool), pool_capacity:i(ipool)\n  turnoff\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\ni1 0 1\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/pool_capacity.html#see-also","title":"See also","text":"<ul> <li>pool_size</li> <li>pool_pop</li> <li>pool_new</li> <li>pool_gen</li> </ul>"},{"location":"opcodes/pool_capacity.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/pool_gen.html","title":"pool_gen","text":""},{"location":"opcodes/pool_gen.html#abstract","title":"Abstract","text":"<p>Create a pool and fill it with values</p>"},{"location":"opcodes/pool_gen.html#description","title":"Description","text":"<p>A pool is actually a stack of numbers, based on an array.</p> <p>The pool_ opcodes implement a stack of numbers. This is useful when assigning ids to resources, like assigning fractional numbers to instrument instances to access them individually. <code>pool_gen</code> creates a pool of values of a given size by filling the pool with values from 1 to the given size</p>"},{"location":"opcodes/pool_gen.html#syntax","title":"Syntax","text":"<pre><code>ipool pool_gen isize\nipool pool_gen istart, iend\n</code></pre>"},{"location":"opcodes/pool_gen.html#arguments","title":"Arguments","text":"<ul> <li><code>isize</code>: the size of the pool.</li> <li><code>istart</code>: the start item</li> <li><code>iend</code>: the end item (inclusive)</li> </ul>"},{"location":"opcodes/pool_gen.html#output","title":"Output","text":"<ul> <li><code>ipool</code>: an index identifying this pool. This index is used when calling any   <code>pool</code> opcode</li> </ul>"},{"location":"opcodes/pool_gen.html#execution-time","title":"Execution Time","text":"<ul> <li>Init</li> </ul>"},{"location":"opcodes/pool_gen.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n--nosound\n-m0\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\nsr     = 44100\nksmps  = 64\nnchnls = 2\n0dbfs  = 1\n\nopcode pool_print, 0, i\n  ipool xin\n  i0 = 0\n  isize = pool_size(ipool)\n  while i0 &lt; isize do\n    ival = pool_at(ipool, i0)\n    print ival\n    i0 += 1\n  od\nendop\n\ninstr test1\n  ipool pool_gen 100\n\n  isize pool_size ipool\n  icapacity pool_capacity ipool\n  print isize\n  print icapacity\n  pool_print ipool\nendin\n\ninstr test2\n  ; create a pool, fill with with numbers from 1 to 100 (inclusive)\n  ipool pool_gen 1, 100\n\n  isize pool_size ipool\n  icapacity pool_capacity ipool\n  print isize\n  print icapacity\n  pool_print ipool\nendin\n\ninstr sep\n  prints \"\\n--------------------------------\\n\\n\"\n  ; turnoff\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\ni \"test1\" 0   0.1\ni \"sep\"   0.1 0.1\ni \"test2\" 0.2 0.1\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/pool_gen.html#see-also","title":"See also","text":"<ul> <li>pool_new</li> <li>pool_push</li> <li>pool_pop</li> <li>pool_size</li> <li>pool_capacity</li> </ul>"},{"location":"opcodes/pool_gen.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/pool_isfull.html","title":"pool_isfull","text":""},{"location":"opcodes/pool_isfull.html#abstract","title":"Abstract","text":"<p>Returns 1 if the pool is full</p>"},{"location":"opcodes/pool_isfull.html#description","title":"Description","text":"<p>A pool is actually a stack of numbers, based on an array.</p> <p>The pool_ opcodes implement a stack of numbers. This is useful when assigning ids to resources, like assigning fractional numbers to instrument instances to access them individually, assigning bus indexes, etc. To get a value, call <code>pool_pop</code>  and when finished using it the value is returned to the pool with <code>pool_push</code>. </p> <p><code>pool_isfull</code> returns 1 if the pool is full (its size == its capacity) and the pool can't  be grown. </p> <p>Note</p> <p>Use <code>pool_size(ipool) == 0</code> to query if the pool is empty</p> <p>Note</p> <p>To differenciate between the opcode being called at init- or at performance time, use the functional style <code>pool_isfull:i(ipool)</code> or <code>pool_isfull:k(ipool)</code></p>"},{"location":"opcodes/pool_isfull.html#syntax","title":"Syntax","text":"<pre><code>i_isfull pool_isfull ipool\nk_isfull pool_isfull ipool\n</code></pre>"},{"location":"opcodes/pool_isfull.html#arguments","title":"Arguments","text":"<ul> <li><code>ipool</code>: the pool to push the value to</li> </ul>"},{"location":"opcodes/pool_isfull.html#output","title":"Output","text":"<ul> <li><code>i_isfull</code> / <code>k_isfull</code>: 1 if the pool is full, 0 otherwise</li> </ul>"},{"location":"opcodes/pool_isfull.html#execution-time","title":"Execution Time","text":"<ul> <li>Init</li> <li>Performance</li> </ul>"},{"location":"opcodes/pool_isfull.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n--nosound\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\n\n/*\n   Example file for pool_isfull\n\n   pool_isfull returns 1 if the pool is full, 0 otherwise\n\n   If the pool was created\n   The size of a pool is the number of items actually inside\n   the pool (see also pool_capacity)\n\n*/\n\ninstr 1\n  ; create a pull of fixed size, filled with the integers 0 to 9\n  ipool pool_gen 10\n  i1 pool_pop ipool\n  prints \"pool is full? %d\\n\", pool_isfull:i(ipool)\n  pool_push ipool, i1\n\n  if pool_isfull:i(ipool) == 1 then\n    prints \"pool is full!!\\n\"\n  endif\n  ; this should fail\n  pool_push ipool, 10\n  turnoff\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\ni1 0 1\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/pool_isfull.html#see-also","title":"See also","text":"<ul> <li>pool_size</li> <li>pool_capacity</li> <li>pool_pop</li> <li>pool_new</li> <li>pool_gen</li> </ul>"},{"location":"opcodes/pool_isfull.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/pool_new.html","title":"pool_new","text":""},{"location":"opcodes/pool_new.html#abstract","title":"Abstract","text":"<p>Create an empty  pool</p>"},{"location":"opcodes/pool_new.html#description","title":"Description","text":"<p>A pool is actually a stack of numbers, based on an array.</p> <p>The pool_ opcodes implement a stack of numbers. This is useful when assigning ids to resources, like assigning fractional numbers to instrument instances to access them individually. <code>pool_new</code> creates an empty pool. To use the pool it must be first filled with values via <code>pool_push</code>. If a size is given, a pool of the given size is allocated and the size can't be modified. If no size is given, a pool of variable size is created.</p> <p>Variable size / fixed size</p> <p>A variable size pool produces allocations during performance, which might be a problem in certain situations / architectures or when running in <code>--realtime</code> mode. </p>"},{"location":"opcodes/pool_new.html#syntax","title":"Syntax","text":"<pre><code>ipool pool_new isize=0\n</code></pre>"},{"location":"opcodes/pool_new.html#arguments","title":"Arguments","text":"<ul> <li><code>isize</code>: the size of the pool. If leaved out or set as 0, a pool of variable   size is created. Values can be pushed via <code>pool_push</code> and the pool will grow   to accomodate these.</li> </ul>"},{"location":"opcodes/pool_new.html#output","title":"Output","text":"<ul> <li><code>ipool</code>: an index identifying this pool. This index is used when calling any   <code>pool</code> opcode</li> </ul>"},{"location":"opcodes/pool_new.html#execution-time","title":"Execution Time","text":"<ul> <li>Init</li> </ul>"},{"location":"opcodes/pool_new.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n--nosound\n-m0\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\nsr     = 44100\nksmps  = 64\nnchnls = 2\n0dbfs  = 1\n\n; create an empty global pool of fixed capacity. \ngipool pool_new 100\n\ninstr 1\n  pool_push gipool, 45\n  pool_push gipool, 47\n\n  isize pool_size gipool\n  print isize  \n\n  inum1 pool_pop gipool\n  inum2 pool_pop gipool\n\n  print inum1\n  print inum2\n\n  isize pool_size gipool\n  print isize  \n  turnoff\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\ni1 0 1\ne 5\n; f0 3600\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/pool_new.html#see-also","title":"See also","text":"<ul> <li>pool_gen</li> <li>pool_push</li> <li>pool_pop</li> <li>pool_size</li> <li>pool_capacity</li> </ul>"},{"location":"opcodes/pool_new.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/pool_pop.html","title":"pool_pop","text":""},{"location":"opcodes/pool_pop.html#abstract","title":"Abstract","text":"<p>Pop (get) an item from a pool</p>"},{"location":"opcodes/pool_pop.html#description","title":"Description","text":"<p>A pool is actually a stack of numbers, based on an array.</p> <p>The pool_ opcodes implement a stack of numbers. This is useful when assigning ids to resources, like assigning fractional numbers to instrument instances to access them individually. To get a value, call <code>pool_pop</code> and when finished using it the value is returned to the pool with <code>pool_push</code>.</p>"},{"location":"opcodes/pool_pop.html#syntax","title":"Syntax","text":"<pre><code>ivalue pool_pop ipool [, iifempty=-1]\nkvalue pool_pop ipool [, kifempty=-1]\n</code></pre>"},{"location":"opcodes/pool_pop.html#arguments","title":"Arguments","text":"<ul> <li><code>ipool</code>: the pool to push the value to</li> <li><code>iifempty</code> / <code>kifempty</code>: this value is returned if the pool is empty. </li> </ul>"},{"location":"opcodes/pool_pop.html#output","title":"Output","text":"<ul> <li><code>ivalue</code> / <code>kvalue</code>: the value to push</li> </ul>"},{"location":"opcodes/pool_pop.html#execution-time","title":"Execution Time","text":"<ul> <li>Init</li> <li>Performance</li> </ul>"},{"location":"opcodes/pool_pop.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n--nosound\n-m0\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\nsr     = 44100\nksmps  = 64\nnchnls = 2\n0dbfs  = 1\n\n; create a global pool for all instances\ngipool pool_gen 1, 1000\n\n; create audio buses\nginumbuses = 200\nzakinit ginumbuses, 1\n\n; a pool of buses\ngibuses pool_gen ginumbuses\n\n; release item back to instance pool, print a message\n; when that happens\nopcode pool_release_instance, 0, ii\n  ipool, ip1 xin\n  ival = frac2int(ip1, pool_capacity(ipool))\n  defer \"prints\", \"releasing back to pool %d \\n\", ival\n  pool_push ipool, ival, 1\nendop\n\ninstr exit\n  exitnow\nendin\n\n; schedule and control audio generator\ninstr controlsaw\n  ; get an unused bus\n  ibus = pool_pop(gibuses)\n  prints \"Using bus %d\\n\", ibus\n  ifreq = p5\n  icap pool_capacity gipool\n\n  ; get a unique instance number for \"saw\" instrument\n  isaw = nstrnum(\"saw\") + pool_pop(gipool) / icap\n  schedule isaw, 0, p3, ibus, ifreq\n\n  ; modulate the frequency\n  pwrite isaw, 5, linseg(ifreq, p3, ifreq*0.1)\n\n  ; get a unique instance number for filter instrument\n  ifilter = nstrnum(\"filter\") + pool_pop(gipool) / icap\n  schedule ifilter, 0, p3, ibus, 100\n\n  ; modulate its cutoff freq.\n  pwrite ifilter, 5, linseg(100, p3, 4000)\n\n  ; release bus back to pool when finished (notice the 1 at the end)\n  ; we could have done\n  ;  defer \"pool_push\", gibuses, ibus\n  pool_push gibuses, ibus, 1\nendin\n\n\ninstr saw\n  ibus = p4\n  kfreq = p5\n  iamp  = 0.02\n  ifade = 0.05\n  a0  = vco2(iamp, kfreq)\n  a0 += vco2(iamp, kfreq * 0.5)\n  a0 += vco2(iamp, kfreq * 0.25)\n  a0 *= cosseg(0, p3*0.5, 1, p3*0.5, 0)\n\n  ; write audio to bus\n  zawm a0, ibus\n\n  ; release instance back to the pool\n  pool_release_instance gipool, p1\nendin\n\n; filter audio in bus, output to the outside world\ninstr filter\n  ibus = p4\n  kfreq = p5\n  a0 zar ibus\n  a0 zdf_ladder a0, kfreq, 18\n  outch 1, a0\nendin\n\ninstr +example1\n  idur = 10                          ; dur of each note\n  ioffset = 0.6                      ; offset between notes\n  iFreqs[] genarray 1000, 8000, 100  ; begin freq. of gliss. for each note\n\n  printarray iFreqs\n\n  ; create a note for each frequency\n  i0 = 0\n  while i0 &lt; lenarray(iFreqs) do\n    schedule \"controlsaw\", ioffset*i0, idur, 0, iFreqs[i0]\n    i0 += 1\n  od\n\n  ; clear zak \n  zacl 0, ginumbuses\n\n  ; schedule exit\n  schedule \"exit\", ioffset*i0 + idur + 1, -1\nendin\n\nschedule \"example1\", 0, -1\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n&lt;/CsScore&gt;\n\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/pool_pop.html#see-also","title":"See also","text":"<ul> <li>pool_push</li> <li>pool_new</li> <li>pool_gen</li> <li>pool_size</li> <li>pool_capacity</li> </ul>"},{"location":"opcodes/pool_pop.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/pool_push.html","title":"pool_push","text":""},{"location":"opcodes/pool_push.html#abstract","title":"Abstract","text":"<p>Push an item into a pool</p>"},{"location":"opcodes/pool_push.html#description","title":"Description","text":"<p>A pool is actually a stack of numbers, based on an array.</p> <p>The pool_ opcodes implement a stack of numbers. This is useful when assigning ids to resources, like assigning fractional numbers to instrument instances to access them individually. To get a value, call <code>pool_pop</code> and when finished using it the value is returned to the pool with <code>pool_push</code>.</p>"},{"location":"opcodes/pool_push.html#syntax","title":"Syntax","text":"<pre><code>pool_push ipool, ivalue, iwhen=0\npool_push ipool, kvalue\n</code></pre>"},{"location":"opcodes/pool_push.html#arguments","title":"Arguments","text":"<ul> <li><code>ipool</code>: the pool to push the value to</li> <li><code>ivalue</code> / <code>kvalue</code>: the value to push</li> <li><code>iwhen</code>: if 0, the value is pushed at init time, if 1 the value is pushed at   release time. This argument can only be used when calling the opcode at init   time</li> </ul>"},{"location":"opcodes/pool_push.html#output","title":"Output","text":""},{"location":"opcodes/pool_push.html#execution-time","title":"Execution Time","text":"<ul> <li>Init</li> <li>Performance</li> </ul>"},{"location":"opcodes/pool_push.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n--nosound\n-m0\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\nsr     = 44100\nksmps  = 64\nnchnls = 2\n0dbfs  = 1\n\n; create a global pool for all instances\ngipool pool_gen 1, 1000\n\n; create audio buses\nginumbuses = 200\nzakinit ginumbuses, 1\n\n; a pool of buses\ngibuses pool_gen ginumbuses\n\n; release item back to instance pool, print a message\n; when that happens\nopcode pool_release_instance, 0, ii\n  ipool, ip1 xin\n  ival = frac2int(ip1, pool_capacity(ipool))\n  defer \"prints\", \"releasing back to pool %d \\n\", ival\n  pool_push ipool, ival, 1\nendop\n\ninstr exit\n  exitnow\nendin\n\n; schedule and control audio generator\ninstr controlsaw\n  ; get an unused bus\n  ibus = pool_pop(gibuses)\n  prints \"Using bus %d\\n\", ibus\n  ifreq = p5\n  icap pool_capacity gipool\n\n  ; get a unique instance number for \"saw\" instrument\n  isaw = nstrnum(\"saw\") + pool_pop(gipool) / icap\n  schedule isaw, 0, p3, ibus, ifreq\n\n  ; modulate the frequency\n  pwrite isaw, 5, linseg(ifreq, p3, ifreq*0.1)\n\n  ; get a unique instance number for filter instrument\n  ifilter = nstrnum(\"filter\") + pool_pop(gipool) / icap\n  schedule ifilter, 0, p3, ibus, 100\n\n  ; modulate its cutoff freq.\n  pwrite ifilter, 5, linseg(100, p3, 4000)\n\n  ; release bus back to pool when finished (notice the 1 at the end)\n  ; we could have done\n  ;  defer \"pool_push\", gibuses, ibus\n  pool_push gibuses, ibus, 1\nendin\n\n\ninstr saw\n  ibus = p4\n  kfreq = p5\n  iamp  = 0.02\n  ifade = 0.05\n  a0  = vco2(iamp, kfreq)\n  a0 += vco2(iamp, kfreq * 0.5)\n  a0 += vco2(iamp, kfreq * 0.25)\n  a0 *= cosseg(0, p3*0.5, 1, p3*0.5, 0)\n\n  ; write audio to bus\n  zawm a0, ibus\n\n  ; release instance back to the pool\n  pool_release_instance gipool, p1\nendin\n\n; filter audio in bus, output to the outside world\ninstr filter\n  ibus = p4\n  kfreq = p5\n  a0 zar ibus\n  a0 zdf_ladder a0, kfreq, 18\n  outch 1, a0\nendin\n\ninstr +example1\n  idur = 10                          ; dur of each note\n  ioffset = 0.6                      ; offset between notes\n  iFreqs[] genarray 1000, 8000, 100  ; begin freq. of gliss. for each note\n\n  printarray iFreqs\n\n  ; create a note for each frequency\n  i0 = 0\n  while i0 &lt; lenarray(iFreqs) do\n    schedule \"controlsaw\", ioffset*i0, idur, 0, iFreqs[i0]\n    i0 += 1\n  od\n\n  ; clear zak \n  zacl 0, ginumbuses\n\n  ; schedule exit\n  schedule \"exit\", ioffset*i0 + idur + 1, -1\nendin\n\nschedule \"example1\", 0, -1\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n&lt;/CsScore&gt;\n\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/pool_push.html#see-also","title":"See also","text":"<ul> <li>pool_pop</li> <li>pool_new</li> <li>pool_gen</li> </ul>"},{"location":"opcodes/pool_push.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/pool_size.html","title":"pool_size","text":""},{"location":"opcodes/pool_size.html#abstract","title":"Abstract","text":"<p>Returns the size of a pool</p>"},{"location":"opcodes/pool_size.html#description","title":"Description","text":"<p>A pool is actually a stack of numbers, based on an array.</p> <p>The pool_ opcodes implement a stack of numbers. This is useful when assigning ids to resources, like assigning fractional numbers to instrument instances to access them individually. To get a value, call <code>pool_pop</code> and when finished using it the value is returned to the pool with <code>pool_push</code>. <code>pool_size</code> returns the size of the pool (the number of items in it, not the capacity, see <code>pool_capacity</code> for that)</p> <p>Note</p> <p>To differenciate between the opcode being called at init- or at performance time, use the functional style <code>pool_size:i(ipool)</code> or <code>pool_size:k(ipool)</code></p>"},{"location":"opcodes/pool_size.html#syntax","title":"Syntax","text":"<pre><code>isize pool_size ipool\nksize pool_size kpool\n</code></pre>"},{"location":"opcodes/pool_size.html#arguments","title":"Arguments","text":"<ul> <li><code>ipool</code>: the pool to push the value to</li> </ul>"},{"location":"opcodes/pool_size.html#output","title":"Output","text":"<ul> <li><code>isize</code> / <code>ksize</code>: the number of items in the pool</li> </ul>"},{"location":"opcodes/pool_size.html#execution-time","title":"Execution Time","text":"<ul> <li>Init</li> <li>Performance</li> </ul>"},{"location":"opcodes/pool_size.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n--nosound\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\n\n/*\n   Example file for pool_size\n\n   pool_size returns the size of the pool, either at \n   init or at performance time\n\n   The size of a pool is the number of items actually inside\n   the pool (see also pool_capacity)\n\n*/\n\nopcode print_pool, 0, i\n  ipool xin\n  i0 = 0\n  isize = pool_size(ipool)\n  while i0 &lt; isize do\n    item = pool_at(ipool, i0)\n    print item\n    i0 += 1\n  od\nendop\n\ninstr 1\n  ipool pool_gen 10\n  i1 pool_pop ipool\n  i2 pool_pop ipool\n  prints \"\\n&lt;&lt;&lt; pool size: %d, pool capacity: %d &gt;&gt;&gt; \\n\\n\", \\\n         pool_size:i(ipool), pool_capacity:i(ipool)\n  print_pool ipool\n  turnoff\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\ni1 0 1\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/pool_size.html#see-also","title":"See also","text":"<ul> <li>pool_capacity</li> <li>pool_pop</li> <li>pool_new</li> <li>pool_gen</li> </ul>"},{"location":"opcodes/pool_size.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/pread.html","title":"pread","text":""},{"location":"opcodes/pread.html#abstract","title":"Abstract","text":"<p>Read pfield values from any active instrument instance</p>"},{"location":"opcodes/pread.html#description","title":"Description","text":"<p><code>pread</code> can be used to query the pfield value of a running instance (possibly a  fractional instrument number) of an instrument. Together with  <code>pwrite</code> it can be used to establish a two-way communication between two running instances of any two instruments.</p> <p>It no instance is found that matches the given instrument number, the output value is set to <code>inotfound</code>. </p>"},{"location":"opcodes/pread.html#behaviour","title":"Behaviour","text":"<ul> <li>If no matching instance is found, pread returns <code>inotfound</code>. Reporting   starts at the moment a matching instance is found. </li> <li>To avoid a continuous search, set <code>instrnum</code> as negative number. In this case,   a matching instance is searched only once, and, if not found, this opcode    becomes a <code>noop</code></li> <li>If an instance is found and stops, pread returns <code>inotfound</code> from   the moment the instance stops and no new instance is searched. </li> </ul>"},{"location":"opcodes/pread.html#syntax","title":"Syntax","text":"<pre><code>ivalue    pread instrnum, iindex, inotfound=-1\nkvalue    pread instrnum, iindex, inotfound=-1\nkvalue    pread instrnum, kindex, inotfound=-1\n\nivalues[] pread instrnum, iindexes[], inotfound=-1\nkvalues[] pread instrnum, iindexes[], inotfound=-1\n</code></pre>"},{"location":"opcodes/pread.html#arguments","title":"Arguments","text":"<ul> <li><code>instrnum</code> (i):  the (fractional) instrument number to modify</li> <li><code>iindex</code> / <code>kindex</code>: the index of the pfield to read. </li> <li><code>inotfound</code>: the value to return if instrnum is not found. To avoid misinterpretation,   this value should be different than any expected value of the pfield</li> </ul>"},{"location":"opcodes/pread.html#output","title":"Output","text":"<ul> <li><code>ivalue</code> / <code>kvalue</code>: the current value of the given pfield. Will be <code>inotfound</code> if   no matching instance has been found.</li> </ul>"},{"location":"opcodes/pread.html#execution-time","title":"Execution Time","text":"<ul> <li>Init (if output is of i-type)</li> <li>Performance (if output is of k-type)</li> </ul>"},{"location":"opcodes/pread.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n\n--nosound\n-m0\n\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\n\n/*\n\n  Example file for pread\n  ======================\n\n  ivalue pread instrnum, index  [, inotfound=-1]\n  kvalue pread instrnum, kindex [, inotfound=-1]\n\n  pread reads a pfield value from an active instrument\n  Returns inotfound if instrnum is not active\n\n  Raises a performance error if index is out of range\n\n*/\n\ninstr 1\n  prints \"instr 1. p4=%f, p5=%f\\n\", p4, p5\nendin\n\ninstr 2\n  ip1 = p4\n  ip4 pread ip1, 4\n  prints \"Inside instr 2. Instance p1=%f, p4=%f\\n\", ip1, ip4\n  pwrite ip1, 4, ip4*2\n  turnoff\nendin\n\n\ninstr 4\n  ip1 = p4\n  iindex[] fillarray 4, 5\n  ivals[] pread ip1, iindex\n  prints \"Inside instr 4, reading p4 and p5 as array\"\n  printarray ivals\n  turnoff \nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\ni 1.01 0   2 44   45\ni 2    1   0 1.01\ni 4    1.5 0 1.01\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/pread.html#see-also","title":"See also","text":"<ul> <li>pwrite</li> <li>pset</li> <li>p</li> <li>passign</li> <li>uniqinstance</li> </ul>"},{"location":"opcodes/pread.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/presetinterp.html","title":"presetinterp","text":""},{"location":"opcodes/presetinterp.html#abstract","title":"Abstract","text":"<p>Interpolates between presets placed in a 2D plane</p>"},{"location":"opcodes/presetinterp.html#description","title":"Description","text":"<p>Given a set of points in 2D, this opcodes determines the weight of each point in relation to a cursor.  Imagine a set of presets. A preset contains a set of parameters,  for example, the formant frequencies, amplitudes and bandwidths of the a given vowel. Each preset is associated with a point in the plane.  This opcode returns an array of weights, one for each point, indicating how much each preset should contribute to the result.  These weights can be used together with other array opcodes (particularly with weightedsum) to interpolate the actual parameters.</p>"},{"location":"opcodes/presetinterp.html#syntax","title":"Syntax","text":"<pre><code>kweights[]  presetinterp kx, ky, kpoints[], iclamp=0\nkweights[]  presetinterp kx, ky, ipoints[], iclamp=0\n</code></pre>"},{"location":"opcodes/presetinterp.html#arguments","title":"Arguments","text":"<ul> <li><code>kx</code>: the x coordinate of the cursor</li> <li><code>ky</code>: the y coordinate of the cursor</li> <li><code>kpoints[]</code>: a 1D array with the coordinates and weights representing the points.  Each point is represented by 3 numbers: x, y, weight (the size of the array should be 3x the number of points defined). The weight is normally a number between 0-1 which can be used to scale the presence of a particular preset. It is  often needed for points placed at the center of the 2D plane</li> <li><code>iclamp</code>: if given, a value in the range <code>(0, 1]</code>. Presets which would get an associated  weight less than <code>iclamp * averageWeight</code> (where averageWeight is <code>1/numberOfPoints</code>)  are clamped to 0 and their weight is redistributed (<code>kweights</code> always sums up to 1)</li> </ul>"},{"location":"opcodes/presetinterp.html#output","title":"Output","text":"<ul> <li><code>kweights</code>: an array with the same size as the number of presets given, representing the weight for each point in the same order the points were defined. The weights in  this array always sum up to 1.0. </li> </ul>"},{"location":"opcodes/presetinterp.html#see-also","title":"See Also","text":"<ul> <li>weightedsum</li> <li>hypot</li> </ul>"},{"location":"opcodes/presetinterp.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n-odac\n&lt;/CsOptions&gt;\n&lt;CsInstruments&gt;\n\nsr = 44100\nksmps = 64\nnchnls = 4\n0dbfs = 1\n\ngiformantFreqs[] fillarray 800, 1150, 2900, 3900, 4950, \\  ; A\n                           350, 2000, 2800, 3600, 4950, \\  ; E\n                           270, 2140, 2950, 3900, 4950, \\  ; I\n                           450, 800, 2830, 3800, 4950,  \\  ; O\n                           325, 700, 2700, 3800, 4950      ; U\n\n\n\ngiformantDbs[] fillarray   0, -6, -32, -20, -50, \\\n                           0, -20, -15, -40, -56, \\\n                           0, -12, -26, -26, -44, \\\n                           0, -11, -22, -22, -50, \\\n                           0, -16, -35, -40, -60\n\ngiformantBws[] fillarray   80, 90, 120, 130, 140, \\\n                           60, 100, 120, 150, 200, \\\n                           60, 90, 100, 120, 120, \\\n                           40, 80, 100, 120, 120, \\\n                           50, 60, 170, 180, 200\n\n\ngiformantAmps[] maparray giformantDbs, \"ampdb\"\n\nreshapearray giformantFreqs, 5, 5\nreshapearray giformantAmps, 5, 5\nreshapearray giformantBws, 5, 5\n\ninstr 10\n  kmidi = p4\n  kamp = p5\n  kx = p6\n  ky = p7\n  kmidi = lag:k(kmidi, 0.3)\n\n  kvibfreq linseg 0, 0.3, 0, 2.5, 4.5\n  ivibsemi = 0.1\n  kvib oscil ivibsemi/2, kvibfreq\n  kvib -= ivibsemi / 2\n  kpitch = kmidi + kvib\n  kfreq = lag(mtof(kpitch), 0.2)\n\n  ; asource = mpulse:a(kamp*10, 1/kfreq)\n  asource vco2 kamp, kfreq\n  asource = butterlp:a(asource, 4000)\n\n  ;                   x    y    weight\n  kcoords[] fillarray 0,   0,   1,      \\    ; A\n                      0.5, 0.5, 0.4,    \\    ; E\n                      1,   0,   1,      \\    ; I\n                      0,   1,   1,      \\    ; O\n                      1,   1,   1            ; U\n  kweights[] init 5\n  kformantFreqs[] init 5\n  kformantBws[] init 5\n  kformantAmps[] init 5\n\n  if changed:k(kx, ky) == 1 then\n    kweights presetinterpw kx, ky, kcoords, 0.25\n    printarray kweights\n    kformantFreqs weightedsum giformantFreqs, kweights\n    kformantBws   weightedsum giformantBws, kweights\n    kformantAmps  weightedsum giformantAmps, kweights\n\n  endif\n  kformantFreqs poly 5, \"lag\", kformantFreqs, 0.1\n  kformantAmps poly 5, \"lag\", kformantAmps, 0.1\n\n  aformants[] poly 5, \"resonx\", asource, kformantFreqs, kformantBws, 2, 2\n  ; aformants[] poly 5, \"butterbp\", asource, kformantFreqs, kformantBws\n  aformants *= kformantAmps\n  asum sumarray aformants\n  asum *= a(kamp)\n  asum *= linsegr(0, 0.1, 1, 0.1, 0)\n  ; asum *= 0.1\n  ; dispfft asum, 0.05, 4096\n  dispfft asource, 0.05, 4096\n  outch 1, asum, 3, asource\nendin\n\ninstr 20\n  ip1 = p4\n  kt = timeinsts()\n  kmidi bpf kt, 0, 60, 10, 60, 18, 36\n  kamp = 0.1\n  kradius linseg 0.5, 10, 0.5, 10, 0.1\n  kfreq = 1/10\n  kx = oscil:k(kradius, kfreq)+0.5\n  ky = oscil:k(kradius, kfreq, -1, 3.1415/4)+0.5\n  pwrite ip1, 4, kmidi, 5, kamp, 6, kx, 7, ky\n  if metro(30) == 1 then\n    outvalue \"x\", kx\n    outvalue \"y\", ky\n    outvalue \"note\", mton(round(kmidi*2)/2)\n  endif\nendin\n\nidur = 20\nschedule 10.01, 0, idur, 48, 0.5, 0, 1, 0\nschedule 20, 0, idur, 10.01\n\n&lt;/CsInstruments&gt;\n&lt;CsScore&gt;\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;bsbPanel&gt;\n &lt;label&gt;Widgets&lt;/label&gt;\n &lt;objectName/&gt;\n &lt;x&gt;0&lt;/x&gt;\n &lt;y&gt;0&lt;/y&gt;\n &lt;width&gt;833&lt;/width&gt;\n &lt;height&gt;631&lt;/height&gt;\n &lt;visible&gt;true&lt;/visible&gt;\n &lt;uuid/&gt;\n &lt;bgcolor mode=\"background\"&gt;\n  &lt;r&gt;40&lt;/r&gt;\n  &lt;g&gt;40&lt;/g&gt;\n  &lt;b&gt;40&lt;/b&gt;\n &lt;/bgcolor&gt;\n &lt;bsbObject version=\"2\" type=\"BSBGraph\"&gt;\n  &lt;objectName&gt;graph1&lt;/objectName&gt;\n  &lt;x&gt;5&lt;/x&gt;\n  &lt;y&gt;9&lt;/y&gt;\n  &lt;width&gt;828&lt;/width&gt;\n  &lt;height&gt;313&lt;/height&gt;\n  &lt;uuid&gt;{a386abff-a2e9-4fd5-a2a1-044b268f027e}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;-3&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;value&gt;0&lt;/value&gt;\n  &lt;objectName2/&gt;\n  &lt;zoomx&gt;4.00000000&lt;/zoomx&gt;\n  &lt;zoomy&gt;1.00000000&lt;/zoomy&gt;\n  &lt;dispx&gt;1.00000000&lt;/dispx&gt;\n  &lt;dispy&gt;1.00000000&lt;/dispy&gt;\n  &lt;modex&gt;lin&lt;/modex&gt;\n  &lt;modey&gt;lin&lt;/modey&gt;\n  &lt;showSelector&gt;false&lt;/showSelector&gt;\n  &lt;showGrid&gt;true&lt;/showGrid&gt;\n  &lt;showTableInfo&gt;true&lt;/showTableInfo&gt;\n  &lt;showScrollbars&gt;false&lt;/showScrollbars&gt;\n  &lt;enableTables&gt;false&lt;/enableTables&gt;\n  &lt;enableDisplays&gt;true&lt;/enableDisplays&gt;\n  &lt;all&gt;true&lt;/all&gt;\n &lt;/bsbObject&gt;\n &lt;bsbObject version=\"2\" type=\"BSBController\"&gt;\n  &lt;objectName&gt;x&lt;/objectName&gt;\n  &lt;x&gt;171&lt;/x&gt;\n  &lt;y&gt;332&lt;/y&gt;\n  &lt;width&gt;300&lt;/width&gt;\n  &lt;height&gt;300&lt;/height&gt;\n  &lt;uuid&gt;{f50d2326-9e70-41bf-a9d2-ea39b20ad45b}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;0&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;objectName2&gt;y&lt;/objectName2&gt;\n  &lt;xMin&gt;0.00000000&lt;/xMin&gt;\n  &lt;xMax&gt;1.00000000&lt;/xMax&gt;\n  &lt;yMin&gt;0.00000000&lt;/yMin&gt;\n  &lt;yMax&gt;1.00000000&lt;/yMax&gt;\n  &lt;xValue&gt;0.99604966&lt;/xValue&gt;\n  &lt;yValue&gt;0.54824522&lt;/yValue&gt;\n  &lt;type&gt;point&lt;/type&gt;\n  &lt;pointsize&gt;20&lt;/pointsize&gt;\n  &lt;fadeSpeed&gt;0.00000000&lt;/fadeSpeed&gt;\n  &lt;mouseControl act=\"press\"&gt;jump&lt;/mouseControl&gt;\n  &lt;bordermode&gt;border&lt;/bordermode&gt;\n  &lt;borderColor&gt;#007800&lt;/borderColor&gt;\n  &lt;color&gt;\n   &lt;r&gt;0&lt;/r&gt;\n   &lt;g&gt;234&lt;/g&gt;\n   &lt;b&gt;0&lt;/b&gt;\n  &lt;/color&gt;\n  &lt;randomizable mode=\"both\" group=\"0\"&gt;false&lt;/randomizable&gt;\n  &lt;bgcolor&gt;\n   &lt;r&gt;0&lt;/r&gt;\n   &lt;g&gt;80&lt;/g&gt;\n   &lt;b&gt;0&lt;/b&gt;\n  &lt;/bgcolor&gt;\n  &lt;bgcolormode&gt;true&lt;/bgcolormode&gt;\n &lt;/bsbObject&gt;\n &lt;bsbObject version=\"2\" type=\"BSBDisplay\"&gt;\n  &lt;objectName&gt;note&lt;/objectName&gt;\n  &lt;x&gt;96&lt;/x&gt;\n  &lt;y&gt;332&lt;/y&gt;\n  &lt;width&gt;64&lt;/width&gt;\n  &lt;height&gt;36&lt;/height&gt;\n  &lt;uuid&gt;{ede113aa-8dda-4374-ab74-995b45a818df}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;-3&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;label&gt;4C&lt;/label&gt;\n  &lt;alignment&gt;left&lt;/alignment&gt;\n  &lt;valignment&gt;center&lt;/valignment&gt;\n  &lt;font&gt;Liberation Sans&lt;/font&gt;\n  &lt;fontsize&gt;16&lt;/fontsize&gt;\n  &lt;precision&gt;3&lt;/precision&gt;\n  &lt;color&gt;\n   &lt;r&gt;255&lt;/r&gt;\n   &lt;g&gt;255&lt;/g&gt;\n   &lt;b&gt;255&lt;/b&gt;\n  &lt;/color&gt;\n  &lt;bgcolor mode=\"background\"&gt;\n   &lt;r&gt;24&lt;/r&gt;\n   &lt;g&gt;24&lt;/g&gt;\n   &lt;b&gt;24&lt;/b&gt;\n  &lt;/bgcolor&gt;\n  &lt;bordermode&gt;false&lt;/bordermode&gt;\n  &lt;borderradius&gt;5&lt;/borderradius&gt;\n  &lt;borderwidth&gt;0&lt;/borderwidth&gt;\n &lt;/bsbObject&gt;\n &lt;bsbObject version=\"2\" type=\"BSBLabel\"&gt;\n  &lt;objectName/&gt;\n  &lt;x&gt;50&lt;/x&gt;\n  &lt;y&gt;336&lt;/y&gt;\n  &lt;width&gt;43&lt;/width&gt;\n  &lt;height&gt;26&lt;/height&gt;\n  &lt;uuid&gt;{1b1e8fcb-efcc-4236-a315-e07e13fafec0}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;-3&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;label&gt;Pitch&lt;/label&gt;\n  &lt;alignment&gt;right&lt;/alignment&gt;\n  &lt;valignment&gt;center&lt;/valignment&gt;\n  &lt;font&gt;Liberation Sans&lt;/font&gt;\n  &lt;fontsize&gt;12&lt;/fontsize&gt;\n  &lt;precision&gt;3&lt;/precision&gt;\n  &lt;color&gt;\n   &lt;r&gt;239&lt;/r&gt;\n   &lt;g&gt;239&lt;/g&gt;\n   &lt;b&gt;239&lt;/b&gt;\n  &lt;/color&gt;\n  &lt;bgcolor mode=\"nobackground\"&gt;\n   &lt;r&gt;255&lt;/r&gt;\n   &lt;g&gt;255&lt;/g&gt;\n   &lt;b&gt;255&lt;/b&gt;\n  &lt;/bgcolor&gt;\n  &lt;bordermode&gt;false&lt;/bordermode&gt;\n  &lt;borderradius&gt;1&lt;/borderradius&gt;\n  &lt;borderwidth&gt;0&lt;/borderwidth&gt;\n &lt;/bsbObject&gt;\n &lt;bsbObject version=\"2\" type=\"BSBScope\"&gt;\n  &lt;objectName/&gt;\n  &lt;x&gt;483&lt;/x&gt;\n  &lt;y&gt;332&lt;/y&gt;\n  &lt;width&gt;350&lt;/width&gt;\n  &lt;height&gt;150&lt;/height&gt;\n  &lt;uuid&gt;{735224e3-fc71-454b-9aee-f857e8ea1b89}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;-3&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;value&gt;3.00000000&lt;/value&gt;\n  &lt;type&gt;scope&lt;/type&gt;\n  &lt;zoomx&gt;8.00000000&lt;/zoomx&gt;\n  &lt;zoomy&gt;2.00000000&lt;/zoomy&gt;\n  &lt;dispx&gt;1.00000000&lt;/dispx&gt;\n  &lt;dispy&gt;1.00000000&lt;/dispy&gt;\n  &lt;mode&gt;0.00000000&lt;/mode&gt;\n  &lt;triggermode&gt;TriggerUp&lt;/triggermode&gt;\n &lt;/bsbObject&gt;\n&lt;/bsbPanel&gt;\n&lt;bsbPresets&gt;\n&lt;/bsbPresets&gt;\n</code></pre>"},{"location":"opcodes/pwrite.html","title":"pwrite","text":""},{"location":"opcodes/pwrite.html#abstract","title":"Abstract","text":"<p>Modify pfield values of an active instrument instance</p>"},{"location":"opcodes/pwrite.html#description","title":"Description","text":"<p><code>pwrite</code> can be used to modify the value of a pfield of a running instance  (possibly a fractional instrument number).</p>"},{"location":"opcodes/pwrite.html#dynamic-pfields","title":"Dynamic pfields","text":"<p>In order for pwrite to have any effect, the instrument in question should have an assignment of the sort <code>kfreq = p5</code>. </p>"},{"location":"opcodes/pwrite.html#behaviour","title":"Behaviour","text":"<p>A matching instance is searched at performance time, so that its behaviour can be controlled via <code>if</code> or <code>timout</code> statements.</p> <p>If no active instance is found, search is retried until a matching instance is found. To avoid retrying, set <code>instrnum</code> to a negative value.</p> <p>If the instance ceases to exist during another instrument is modifying its pfield values, nothing happens. <code>pwrite</code> notices that the instance is not active anymore and becomes a <code>NOOP</code>.</p>"},{"location":"opcodes/pwrite.html#exact-instance-vs-broadcasting","title":"Exact instance vs Broadcasting","text":"<p>If <code>instrnum</code> is a fractional instrument number, pwrite will only affect the first instance matching this exact number.</p> <p>If <code>instrnum</code> is set to an integer number, <code>pwrite</code> will broadcast the changes to ALL instruments with the same integer number.</p> <p>Warning</p> <p>Setting a value of a pfield out of range will result in a  performance error. </p>"},{"location":"opcodes/pwrite.html#syntax","title":"Syntax","text":"<pre><code>pwrite instrnum:i, index:i|k, value:i|k, [index2, value2, ...]\n</code></pre>"},{"location":"opcodes/pwrite.html#arguments","title":"Arguments","text":"<ul> <li><code>instrnum</code> (init only): the (fractional) instrument number to modify</li> <li><code>index</code> (i-, k-): the index of the pfield to modify. If kindex is 4, then p4 will be modified</li> <li><code>value</code> (i-, k-): the new value of the given pfield</li> </ul> <p>Info</p> <p>Multiple index:value pairs can be modified simultaneously</p>"},{"location":"opcodes/pwrite.html#execution-time","title":"Execution Time","text":"<ul> <li>Init (if index and value are i-values)</li> <li>Performance (if any index or value are k-variables)</li> </ul>"},{"location":"opcodes/pwrite.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n\n-odac\n-m0\n\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\nsr = 44100\nksmps = 64\nnchnls = 2\n0dbfs = 1\n\ninstr exit\n  exitnow\nendin\n\n;; Example 1. instr 2 creates and controls instr 1\n\ninstr 1\n  pset 0, 0, 0, 40, 50\n  kt timeinsts\n  k4 = p4\n  k5 = p5\n  printf \"time: %.4f\\tinstance: %.3f\\tp4: %f\\tp5: %f \\n\", metro(20), kt, p1, k4, k5\nendin\n\ninstr 2\n  kval line 0, p3, 1\n  pwrite 1.01, 4, kval\n  pwrite 1.02, 5, kval*2\nendin\n\ninstr example1\n  schedule 1.01, 0, 4, -1\n  schedule 1.02, 0, 4, -1\n  schedule 2,    1, 1\n  schedule \"exit\", 4, -1\n  turnoff\nendin\n\n;-----------------------------\n; Example 2, one instrument modulates another\n\ninstr ex2_generator\n  pset p1, p2, p3, 0.5, 1000, 4000, 0.1\n  kamp       = p4\n  kfreq      = p5\n  kcutoff    = p6\n  kresonance = p7\n  asaw vco2, kamp, kfreq\n  aout moogladder2, asaw, kcutoff, kresonance\n  aout *= linsegr(0, 0.1, 1, 0.1, 0)\n  outs aout, aout  \nendin\n\ninstr ex2_control\n  iglissdur = p4\n  inum = nstrnum(\"ex2_generator\")\n  inum1 = inum + 0.001\n  inum2 = inum + 0.002\n  kfreq1 linseg ntof(\"4A\"), iglissdur, ntof(\"3A\")\n  kfreq2 linseg ntof(\"4F\"), iglissdur, ntof(\"3F\")\n  ;                      amp\n  schedule inum1, 0, p3, 0.2 \n  schedule inum2, 0, p3, 0.2\n  pwrite inum1, 5, kfreq1\n  pwrite inum2, 5, kfreq2\nendin\n\ninstr ex2_broadcast\n  printf \"filter start\\n\", 1\n  inum = nstrnum(\"ex2_generator\")\n  kcutoff    linseg 4000, p3, 400\n  kresonance linseg 0.1, p3*0.5, 0.8\n  pwrite inum, 6, kcutoff, 7, kresonance\nendin\n\ninstr example2\n  schedule \"ex2_control\", 0, 8, 4\n  schedule \"ex2_broadcast\", 4, 4\n  schedule \"exit\", 8.5, -1\n  turnoff\nendin\n\ninstr 100\n  kfreq = p4\n  outch 1, oscili:a(0.1, kfreq)\nendin\n\ninstr pwriteonce\n  ip1 = p4\n  iidx = p5\n  ivalue = p6\n  pwrite ip1, iidx, ivalue\n  turnoff\nendin\n\ninstr example3\n  ; pwrite in the future\n  schedule 100.01, 2, 10, 2000\n  schedule \"pwriteonce\", 0.5, 0, 100.01, 4, 440\n  turnoff\nendin\n\n;; Uncomment as needed\n\n; schedule \"example1\", 0, 1\n; schedule \"example2\", 0, 1\nschedule \"example3\", 0, 1\n\n&lt;/CsInstruments&gt;\n&lt;CsScore&gt;\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/pwrite.html#see-also","title":"See also","text":"<ul> <li>pwriten</li> <li>pread</li> <li>pset</li> <li>p</li> <li>passign</li> <li>uniqinstance</li> </ul>"},{"location":"opcodes/pwrite.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/pwriten.html","title":"pwriten","text":""},{"location":"opcodes/pwriten.html#abstract","title":"Abstract","text":"<p>Modify pfield values of an active instrument instance created via nstance</p>"},{"location":"opcodes/pwriten.html#description","title":"Description","text":"<p><code>pwriten</code> can be used to modify the value of a pfield of a running instance  created via <code>nstance</code>. It is similar to pwrite but uses the  instance id as returned via <code>nstance</code> instead of a fractional p1</p>"},{"location":"opcodes/pwriten.html#dynamic-pfields","title":"Dynamic pfields","text":"<p>In order for pwrite to have any effect, the instrument in question should have an assignment of the sort <code>kfreq = p5</code>. </p> <p>Warning</p> <p>Setting a value of a pfield out of range will result in a  performance error. </p>"},{"location":"opcodes/pwriten.html#syntax","title":"Syntax","text":"<pre><code>pwriten kinstanceid, index:i|k, value:i|k, [index2, value2, ...]\n</code></pre>"},{"location":"opcodes/pwriten.html#arguments","title":"Arguments","text":"<ul> <li><code>kinstanceid</code>: the instance number (as returned via nstance)</li> <li><code>index</code> (i-, k-): the index of the pfield to modify. If kindex is 4, then p4 will be modified</li> <li><code>value</code> (i-, k-): the new value of the given pfield</li> </ul> <p>Info</p> <p>Multiple index:value pairs can be modified simultaneously</p>"},{"location":"opcodes/pwriten.html#execution-time","title":"Execution Time","text":"<ul> <li>Performance</li> </ul>"},{"location":"opcodes/pwriten.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n\n-odac\n-m0\n\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\nsr = 44100\nksmps = 64\nnchnls = 2\n0dbfs = 1\n\ninstr exit\n  exitnow\nendin\n\n;; Example 1. instr 2 controls instr 1\n\ninstr 1\n  pset 0, 0, 0, 40, 50\n  kt timeinsts\n  k4 = p4\n  k5 = p5\n  printf \"time: %.4f\\tinstance: %.3f\\tp4: %f\\tp5: %f \\n\", metro(20), kt, p1, k4, k5\nendin\n\ninstr 2\n  ieventid = p4\n  kval line 0, p3, 1\n  pwriten ieventid, 4, kval\n  pwriten ieventid, 5, kval*2\nendin\n\ninstr example1\n  ieventid nstance 1, 0, 10, 40, 50\n  if timeinstk() == 1 then\n    keventid = ieventid\n    schedulek 2, 0, 10, keventid\n  endif\n  turnoff\nendin\n\n;-----------------------------\n; Example 2, one instrument modulates another\n\ninstr ex2_generator\n  pset p1, p2, p3, 0.5, 1000, 4000, 0.1\n  kamp       = p4\n  kfreq      = p5\n  kcutoff    = p6\n  kresonance = p7\n  asaw vco2, kamp, kfreq\n  aout moogladder2, asaw, kcutoff, kresonance\n  aout *= linsegr(0, 0.1, 1, 0.1, 0)\n  outs aout, aout  \nendin\n\ninstr ex2_control\n  iglissdur = p4\n  kfreq1 linseg ntof(\"4A\"), iglissdur, ntof(\"3A\")\n  kfreq2 linseg ntof(\"4F\"), iglissdur, ntof(\"3F\")\n  iamp = 0.2\n  kid1 = nstance:i(\"ex2_generator\", 0, p3, iamp)\n  kid2 = nstance:i(\"ex2_generator\", 0, p3, iamp)\n  pwriten kid1, 5, kfreq1\n  pwriten kid2, 5, kfreq2\nendin\n\ninstr example2\n  schedule \"ex2_control\", 0, 8, 4\n  schedule \"exit\", 8.5, -1\n  turnoff\nendin\n\n;; Uncomment as needed\n\n; schedule \"example1\", 0, 1\nschedule \"example2\", 0, 1\n\n&lt;/CsInstruments&gt;\n&lt;CsScore&gt;\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/pwriten.html#see-also","title":"See also","text":"<ul> <li>pwrite</li> <li>pread</li> <li>pset</li> <li>p</li> <li>passign</li> <li>uniqinstance</li> </ul>"},{"location":"opcodes/pwriten.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2022</p>"},{"location":"opcodes/ramptrig.html","title":"ramptrig","text":""},{"location":"opcodes/ramptrig.html#abstract","title":"Abstract","text":"<p>A triggerable ramp between 0 and 1</p>"},{"location":"opcodes/ramptrig.html#description","title":"Description","text":"<p><code>ramptrig</code> is a phasor between 0 and 1, with the difference that it stops after reaching its end point. Whenever it is triggered it rewinds to 0 and starts ramping to 1 in the given duration. </p> <p>A trigger detected whenever the value is possitive and higher than the previous value.</p> <p>Usage as envelope generator</p> <p>Together with <code>bpf</code> this can be used to emulate supercollider's <code>Env</code> and <code>EnvGen</code>, where <code>ramptrig</code> is used as a triggerable phasor, passed as an argument to <code>bpf</code>, which generates the envelope. See examples</p>"},{"location":"opcodes/ramptrig.html#syntax","title":"Syntax","text":"<pre><code>kout ramptrig ktrig, kdur, kvaluepost=1, kvaluepre=0\naout ramptrig ktrig, kdir, kvaluepost=1\nkout, kfinished ramptrig ktrig, kdur, kvaluepost=1, kvaluepre=0\n</code></pre>"},{"location":"opcodes/ramptrig.html#arguments","title":"Arguments","text":"<ul> <li><code>ktrig</code>: whenever this is possitive and higher than last value, kout is rewinded to 0</li> <li><code>kdur</code>: the duration of the ramp</li> <li><code>ivaluepost</code>: value when ramp reaches its end (default=1)</li> <li><code>ivaluepre</code>: value previous to any trigger (default=0)</li> </ul>"},{"location":"opcodes/ramptrig.html#output","title":"Output","text":"<ul> <li><code>kout</code>: value of the ramp, between 0 and 1. It can also be <code>ivaluepost</code> or <code>ivaluepre</code> if            these are set to any other value than the default</li> <li><code>kfinished</code>: will be one whenever the ramp reaches its end value. </li> </ul>"},{"location":"opcodes/ramptrig.html#execution-time","title":"Execution Time","text":"<ul> <li>Performance</li> </ul>"},{"location":"opcodes/ramptrig.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\n; This is the example file of ramptrig\n; ramptrig is a triggerable ramp from 0 to 1\n; xout ramptrig xtrig, kdur\n\nsr = 44100\nksmps  = 64\nnchnls = 2\n0dbfs  = 1\n\n; Use Case #1: An envelope which can be retriggered\ninstr 1\n    ; Duration of envelope\n    kdur = 4\n    ; This is the gate, could be any irregular signal, midi, osc, etc.    \n    ktrig metro 0.5\n    ; Whenever ktrig is possitive and higher than previous value, \n    ; kx ramps from 0 to 1 in kdur seconds\n    kx ramptrig ktrig, kdur\n    ; actual envelope\n    kenv bpf kx*kdur, 0, 0, 0.02, 1, kdur, 0\n    asig oscili 0.2, 1000\n    ; asig pinker\n    asig *= interp(kenv)\n    outs asig, asig\nendin\n\n; Use Case #2: Use finished trigger to signal something\ninstr 2\n    ktrig metro 1/4\n    ktrig delayk ktrig, 0.5\n    idur = 2\n    kphase, kfinished1 ramptrig ktrig, 2\n    printf \"finished! \\n\", kfinished1\n    kenv bpf kphase * idur, 0, 0, 0.5, 1, 0.8, 0.5, 1, 1, idur, 0\n    asig = pinker() * interp(kenv)\n    outs asig, asig\nendin\n\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\ni1 0 10\n; i2 0 12\n; i3 0 20\n; f0 3600\n\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/ramptrig.html#see-also","title":"See also","text":"<ul> <li>linenv</li> <li>trigphasor</li> <li>bpf</li> </ul>"},{"location":"opcodes/ramptrig.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/ref.html","title":"ref","text":""},{"location":"opcodes/ref.html#abstract","title":"Abstract","text":"<p>Get a reference to a variable</p>"},{"location":"opcodes/ref.html#description","title":"Description","text":"<p><code>ref</code> and <code>deref</code> implement a mechanism to pass a reference to an array, allowing to share it across instruments, opcodes, etc. Refs are reference counted and deallocate themselves when out of scope and not being used by any object. It makes it possible to pass arrays by reference to user defined opcodes, allowing to modify an array in place, skip copying memory, etc.</p> <pre><code>iX[] fillarray 0, 1, 2, 3, 4\niref  ref iX\niY[] deref iref\n</code></pre> <p>In the case above, <code>iY</code> shares the same memory as <code>iX</code> and any modification in one array will be visible in the other. </p>"},{"location":"opcodes/ref.html#syntax","title":"Syntax","text":"<pre><code>iref ref xArray, [iextrarefs=0]\n</code></pre>"},{"location":"opcodes/ref.html#arguments","title":"Arguments","text":"<ul> <li>xArray: the array to be referenced</li> <li>iextrarefs: use this for the niche case where a reference is passed to an   event scheduled at a point in time later that the end of the current event.   Without this, the ref would go out of scope before the <code>deref</code> takes place.    Any extra ref must be matched with an extra deref (<code>kArr[] deref iref, 1</code>)</li> </ul>"},{"location":"opcodes/ref.html#output","title":"Output","text":"<ul> <li>iref: an integer identifying the reference handle.</li> </ul>"},{"location":"opcodes/ref.html#execution-time","title":"Execution Time","text":"<ul> <li>Init</li> </ul>"},{"location":"opcodes/ref.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n--nosound\n&lt;/CsOptions&gt;\n&lt;CsInstruments&gt;\n\n;; Example file for ref - deref\n\nsr     = 44100\nksmps  = 64\nnchnls = 2\n0dbfs  = 1\n\ngiA[] fillarray 0, 1000, 2000, 3000\n\n; Example 1: take a ref from an array, deref it to create a second view of it \ninstr 1\n  ; a source array\n  iX[] fillarray 0, 10, 20, 30, 40\n\n  ; create a ref of iXs, return the index \n  iref ref iX\n  ; now iYs points to iXs\n  iY[] deref iref\n  printarray iY, \"\", \"instrument 1, iY\"\n\n\n  iZ[] fillarray 0, 1, 3, 5, 7\n\n  ; create a ref, pass it to instr. 2\n  schedule 2, 0, 1, ref(iZ)\n\n  ; create another ref of iZ. In this case the event is scheduled\n  ; in the future, so the source will not exist anymore when instr. 2\n  ; is scheduled. This should fail.\n  schedule 2, 1, 1, ref(iZ)\n\n  turnoff\nendin\n\ninstr 2\n  iref = p4\n  if refvalid(iref) == 1 then\n    iZs[] deref iref\n    printarray iZs, \"\", \"p1=2, iZs\"\n  else\n    prints \"\\n    The reference has become invalid\\n\"\n  endif\n  turnoff\nendin\n\n;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n; Example 2: extra references to keep array alive\ninstr 3\n  ; create a source array\n  kXs[] fillarray 1, 1, 2, 3, 5, 8, 13\n\n  ; In order to bridge the time gap between the end of life of the source\n  ; of a ref and the scheduled event where a deref is taken, it is possible\n  ; to create a forward reference, a \"promise\" that one deref has been scheduled\n  ; in the future.\n\n  ; short lived event, ends before this event\n  schedule 4, 0, 0.1, ref(kXs), 0\n\n  ; starts before we end, but survives us\n  schedule 4, p3-0.1, 0.2, ref(kXs), 0\n\n  ; starts after we end, we need an extra reference \n  schedule 4, p3+1, 0.1, ref(kXs, 1), 1\n\n  defer \"prints\", \"  --- instr. 3 finished --- \\n\"\nendin\n\ninstr 4\n  prints \"instr. 4\\n   \"\n  kView[] deref p4, p5\n  printarray kView\n  defer \"prints\", \" --- instr. 4 finished --- \\n\"\n  ; At deinition time the memory of the `iView` array is marked as deallocated.\n  ; The handle (a global structure created by the `ref` opcode) which owns the memory,\n  ; is signaled that no other clients of this data are alive. It deallocates the\n  ; original memory and frees itself\nendin\n\n  ;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n  ; test: multiple derefs\ninstr 5\n  iXs[] fillarray 0, 1, 4, 9\n  iref ref iXs\n\n  iYs[] deref iref\n  iZs[] deref iref\n  printarray iYs\n  printarray iZs\n  iXs[0] = 100\n  printarray iZs\n  turnoff\nendin\n\n; test performance of pass-by-value vs pass-by-reference\nopcode arrayadd, i[], i[]i\n  ; pass by value in and out\n  iIn[], ix xin\n  iOut[] = iIn + ix\n  xout iOut\nendop\n\nopcode arrayaddref, i[], ii\n  ; pass by ref in, by value out\n  iref, ix xin\n  iIn[] deref iref\n  iOut[] = iIn + ix\n  xout iOut\nendop\n\nopcode arrayadd_inplace, 0, ii\n  ; in place \n  iref, ix xin\n  iIn[] deref iref\n  iIn += ix\nendop\n\nopcode arrayadd_byref_inout, 0, iii\n  ; pass by ref in and out\n  irefin, irefout, ix xin\n  iIn[]  deref irefin\n  iOut[] deref irefout\n  if lenarray(iOut) &gt;= lenarray(iIn) then\n    iOut = iIn + ix\n  endif\nendop\n\ninstr testUdoPerformance1\n  ; Here we test the performance gain of passing arrays by reference.\n  ; Passing the input array by reference seems to produce a speedup of ~25%,\n  inum = 10000\n  iXs[] genarray 0, inum\n  ii = 0\n  it0 rtclock\n  while ii &lt; 20 do\n    iYs[] arrayadd iXs, 2.0\n    ii += 1\n  od\n  it1 rtclock\n  prints \"Dur UDO pass by value = %.8f \\n\", it1 - it0\n\n  iref = ref(iXs)\n  it0 rtclock\n  iY0[] arrayaddref iref, 0.1\n  iY0   arrayaddref iref, 0.2\n  iY0   arrayaddref iref, 0.3\n  iY0   arrayaddref iref, 0.3\n  iY0   arrayaddref iref, 0.3\n  iY0   arrayaddref iref, 0.3\n  iY0   arrayaddref iref, 0.3\n  iY0   arrayaddref iref, 0.3\n  iY0   arrayaddref iref, 0.3\n  iY0   arrayaddref iref, 0.3\n  iY0   arrayaddref iref, 0.3\n  iY0   arrayaddref iref, 0.3\n  iY0   arrayaddref iref, 0.3\n  iY0   arrayaddref iref, 0.3\n  iY0   arrayaddref iref, 0.3\n  iY0   arrayaddref iref, 0.3\n  iY0   arrayaddref iref, 0.3\n  iY0   arrayaddref iref, 0.3\n  iY0   arrayaddref iref, 0.3\n  iY0   arrayaddref iref, 0.3\n  it1 rtclock\n  prints \"Dur UDO pass by ref input = %.8f \\n\", it1 - it0\n\n  iZs[] genarray 0, inum\n  iOut[] init lenarray(iZs)\n\n  it0 rtclock\n  irefZ = ref(iZs)\n  irefOut = ref(iOut)  \n  arrayadd_byref_inout irefZ, irefOut, 0.5\n  arrayadd_byref_inout irefZ, irefOut, 0.5\n  arrayadd_byref_inout irefZ, irefOut, 0.5\n  arrayadd_byref_inout irefZ, irefOut, 0.5\n  arrayadd_byref_inout irefZ, irefOut, 0.5\n  arrayadd_byref_inout irefZ, irefOut, 0.5\n  arrayadd_byref_inout irefZ, irefOut, 0.5\n  arrayadd_byref_inout irefZ, irefOut, 0.5\n  arrayadd_byref_inout irefZ, irefOut, 0.5\n  arrayadd_byref_inout irefZ, irefOut, 0.5\n  arrayadd_byref_inout irefZ, irefOut, 0.5\n  arrayadd_byref_inout irefZ, irefOut, 0.5\n  arrayadd_byref_inout irefZ, irefOut, 0.5\n  arrayadd_byref_inout irefZ, irefOut, 0.5\n  arrayadd_byref_inout irefZ, irefOut, 0.5\n  arrayadd_byref_inout irefZ, irefOut, 0.5\n  arrayadd_byref_inout irefZ, irefOut, 0.5\n  arrayadd_byref_inout irefZ, irefOut, 0.5\n  arrayadd_byref_inout irefZ, irefOut, 0.5\n  it1 rtclock\n\n  prints \"Dur UDO pass by ref in and out=%.8f \\n\", it1 - it0\n  ; printarray iOut\nendin\n\ninstr 7\n  iIn[] genarray 0, 1000\n  iOut[] init lenarray(iIn)\n  arrayadd_byref_inout ref(iIn), ref(iOut), 0.5\n  turnoff\nendin\n\ninstr 8\n  ; test k arrays\n  ; 1. A way to convert a i-array to a k-array by taking a reference\n  iXs[] genarray 0, 99\n  kXs[] deref ref(iXs)\n\n  kXs[0] = timeinsts()\n  printarray kXs, metro(8)\nendin\n\ninstr 9\n  ; we need genarray_i because otherwise kXs is not initialized at i-time\n  kXs[] genarray 0, 9\n  iXs[] deref ref(kXs)\n  iXs += 10\n  printarray iXs\n  printarray kXs\n  turnoff\nendin\n\n\n; schedule 1, 0, 1\n; schedule 3, 0, 1\n; schedule 5, 0, 0.1\nschedule \"testUdoPerformance1\", 0, 0.1\n; schedule 8, 0, 4\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\ne 10 \n\n&lt;/CsScore&gt;\n\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/ref.html#see-also","title":"See also","text":"<ul> <li>deref</li> <li>defer</li> <li>schedule</li> <li>event</li> <li>release</li> </ul>"},{"location":"opcodes/ref.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/refvalid.html","title":"refvalid","text":""},{"location":"opcodes/refvalid.html#abstract","title":"Abstract","text":"<p>Queries if a reference is valid</p>"},{"location":"opcodes/refvalid.html#description","title":"Description","text":"<p><code>ref</code> and <code>deref</code> implement a mechanism to pass a reference to any object, allowing to share a variable across instruments, with opcodes, etc. A reference is a proxy to an axisting variable / array. A reference is reference counted and deallocates itself when it falls out of scope without being referenced by any object. Since a reference is just an integer, <code>refvalid</code> can be used to check if the given reference index corresponds to a valid reference</p>"},{"location":"opcodes/refvalid.html#syntax","title":"Syntax","text":"<pre><code>iout refvalid iref\nkout refvalid kref\n</code></pre>"},{"location":"opcodes/refvalid.html#arguments","title":"Arguments","text":"<ul> <li><code>iref</code> / <code>kout</code>: an integer identifying the reference handle, as passed via ref</li> </ul>"},{"location":"opcodes/refvalid.html#output","title":"Output","text":"<ul> <li><code>\u00ecout</code> / <code>kout</code>: 1 if the reference is valid, 0 otherwise</li> </ul>"},{"location":"opcodes/refvalid.html#execution-time","title":"Execution Time","text":"<ul> <li>Init</li> <li>Performance</li> </ul>"},{"location":"opcodes/refvalid.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n-m0\n-d\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\nsr     = 44100\nksmps  = 64\nnchnls = 2\n0dbfs  = 1\n\ninstr 1\n  kfreq linseg 0, p3, 1\n  schedule 2, 0, p3, ref(kfreq)\nendin\n\ninstr 2\n  if refvalid(p4) == 1 then\n    kfreq = deref(p4)\n  else\n    kfreq = 1000\n  endif\n  asig vco2 0.2, kfreq\n  schedule 3, 0, p3, ref(asig)\nendin\n\ninstr 3\n  if refvalid(p4) == 1 then\n    ain deref p4\n  else\n    ain = 0\n  endif\n  aout lpf18 ain, 2000, 0.9, 0.2\n  outs aout, aout\nendin\n</code></pre>"},{"location":"opcodes/refvalid.html#see-also","title":"See also","text":"<ul> <li>deref</li> <li>ref</li> <li>defer</li> <li>schedule</li> <li>event</li> <li>release</li> </ul>"},{"location":"opcodes/refvalid.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/risset.html","title":"risset","text":""},{"location":"opcodes/risset.html#abstract","title":"Abstract","text":"<p>Get information from risset's package manager</p>"},{"location":"opcodes/risset.html#description","title":"Description","text":"<p>Provides information to interact with the risset package manager, allowing to, for example, to query the directory where risset places downloaded assets. This allows to use these assets along different platforms without changing the csound script</p>"},{"location":"opcodes/risset.html#syntax","title":"Syntax","text":"<pre><code>Sout risset Scommand\n</code></pre>"},{"location":"opcodes/risset.html#arguments","title":"Arguments","text":"<ul> <li>Scommand: possible commands are:<ul> <li><code>\"root\"</code>: Returns risset's root folder, where assets, documentation and repository clones are     placed. For linux this is <code>~/.local/share/risset</code>, for macOS, <code>~/Library/Application Support/risset</code>     and for windows <code>%LocalAppData%/risset</code> (<code>C:/Users/&lt;User&gt;/AppData/Local/risset</code>)</li> <li><code>\"assets\"</code>: The assets folder (a subfolder of risset's root)</li> </ul> </li> </ul>"},{"location":"opcodes/risset.html#output","title":"Output","text":"<ul> <li>Sout: the result of the query</li> </ul>"},{"location":"opcodes/risset.html#execution-time","title":"Execution Time","text":"<ul> <li>Init</li> </ul>"},{"location":"opcodes/risset.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n--nosound\n\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\n/*\n    Sout risset Scommand\n\n    Query the risset package manager\n\n    Possible commands:\n    * root -- risset's root folder\n    * assets -- where risset places extra assets\n\n*/\n\ninstr 1\n    Sroot risset \"root\"\n    Sassets risset \"assets\"\n    prints \"risset root: %s, assets: %s\\n\", Sroot, Sassets\n    turnoff\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\ni1 0 0.1\n; f0 3600\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/risset.html#see-also","title":"See also","text":"<ul> <li>sysPlatform</li> </ul>"},{"location":"opcodes/risset.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2021</p>"},{"location":"opcodes/schmitt.html","title":"schmitt","text":""},{"location":"opcodes/schmitt.html#abstract","title":"Abstract","text":"<p>A schmitt trigger (a comparator with hysteresis). </p>"},{"location":"opcodes/schmitt.html#description","title":"Description","text":"<p>Implements a schmitt trigger, which is a comparator with hysteresis. Whenever the  input is higher than <code>khigh</code>, output is 1 and stays 1 until input drops beneath <code>klow</code>.</p> <ul> <li>Output is 1 if the input is higher than <code>khigh</code> if signal is increasing</li> <li>Output is 0 if the input is lower than <code>klow</code> if signal is decreasing</li> </ul> <p>Note</p> <p><code>schmitt</code> is particularly useful for implementing effects like a noise gate, to avoid fast opening and closing at the threshold. It can be further refined together with <code>lagud</code> to add attack / release times to the opening of the gate or with <code>trighold</code> to assure a minimum open time for the gate</p> <p>Port of pd/else's <code>schmitt</code></p>"},{"location":"opcodes/schmitt.html#syntax","title":"Syntax","text":"<pre><code>xout  schmitt xin, khigh, klow\n</code></pre>"},{"location":"opcodes/schmitt.html#arguments","title":"Arguments","text":"<ul> <li><code>xin</code>: input signal (k- or audio rate). The rate of <code>xin</code> must match the rate of <code>xout</code></li> <li><code>khigh</code>: high value of the comparator, output is 1 whenever input is higher than this</li> <li><code>klow</code>: low value of the comparator, output is 0 whenever input is lower than this</li> </ul>"},{"location":"opcodes/schmitt.html#output","title":"Output","text":"<ul> <li><code>xout</code>: output value of the comparator (0 or 1). Rate of xout is the same as xin</li> </ul>"},{"location":"opcodes/schmitt.html#execution-time","title":"Execution Time","text":"<ul> <li>Performance (k or audio)</li> </ul>"},{"location":"opcodes/schmitt.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n-odac           \n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\nsr     = 44100\nksmps  = 64\nnchnls = 2\n0dbfs  = 1\n\n/* Example file for schmitt opcode\n\n    To be used inside csoundqt\n\n    aout schmitt ain, khigh, klow\n    kout schmitt kin, khigh, klow\n\n    schmitt is a schmitt trigger (a gate with hysteresis), out is 1 if higher than khigh,\n    0 if lower than klow\n\n*/\n\nchn_k \"high\", \"r\"\nchn_k \"low\", \"r\"\nchn_k \"signal\", \"w\"\nchn_k \"out\", \"w\"\n\ninstr 1\n    khigh chnget \"high\"\n    klow chnget \"low\"\n\n    ain = oscili:a(1, 0.25)*0.5+0.5\n    aout schmitt ain, khigh, klow\n\n    chnset ain[0], \"signal\"\n    chnset aout[0], \"out\"\n\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\ni1 0 100\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n\n\n&lt;bsbPanel&gt;\n &lt;label&gt;Widgets&lt;/label&gt;\n &lt;objectName/&gt;\n &lt;x&gt;100&lt;/x&gt;\n &lt;y&gt;100&lt;/y&gt;\n &lt;width&gt;320&lt;/width&gt;\n &lt;height&gt;240&lt;/height&gt;\n &lt;visible&gt;true&lt;/visible&gt;\n &lt;uuid/&gt;\n &lt;bgcolor mode=\"background\"&gt;\n  &lt;r&gt;22&lt;/r&gt;\n  &lt;g&gt;22&lt;/g&gt;\n  &lt;b&gt;22&lt;/b&gt;\n &lt;/bgcolor&gt;\n &lt;bsbObject version=\"2\" type=\"BSBController\"&gt;\n  &lt;objectName&gt;high&lt;/objectName&gt;\n  &lt;x&gt;122&lt;/x&gt;\n  &lt;y&gt;39&lt;/y&gt;\n  &lt;width&gt;250&lt;/width&gt;\n  &lt;height&gt;50&lt;/height&gt;\n  &lt;uuid&gt;{9e532f2e-c12f-4bdf-9cae-a486e29fabc2}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;0&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;objectName2/&gt;\n  &lt;xMin&gt;0.00000000&lt;/xMin&gt;\n  &lt;xMax&gt;1.00000000&lt;/xMax&gt;\n  &lt;yMin&gt;0.00000000&lt;/yMin&gt;\n  &lt;yMax&gt;1.00000000&lt;/yMax&gt;\n  &lt;xValue&gt;0.62800000&lt;/xValue&gt;\n  &lt;yValue&gt;0.00000000&lt;/yValue&gt;\n  &lt;type&gt;fill&lt;/type&gt;\n  &lt;pointsize&gt;1&lt;/pointsize&gt;\n  &lt;fadeSpeed&gt;0.00000000&lt;/fadeSpeed&gt;\n  &lt;mouseControl act=\"press\"&gt;jump&lt;/mouseControl&gt;\n  &lt;bordermode&gt;border&lt;/bordermode&gt;\n  &lt;borderColor&gt;#00ff00&lt;/borderColor&gt;\n  &lt;color&gt;\n   &lt;r&gt;0&lt;/r&gt;\n   &lt;g&gt;234&lt;/g&gt;\n   &lt;b&gt;0&lt;/b&gt;\n  &lt;/color&gt;\n  &lt;randomizable mode=\"both\" group=\"0\"&gt;false&lt;/randomizable&gt;\n  &lt;bgcolor&gt;\n   &lt;r&gt;0&lt;/r&gt;\n   &lt;g&gt;61&lt;/g&gt;\n   &lt;b&gt;0&lt;/b&gt;\n  &lt;/bgcolor&gt;\n  &lt;bgcolormode&gt;true&lt;/bgcolormode&gt;\n &lt;/bsbObject&gt;\n &lt;bsbObject version=\"2\" type=\"BSBController\"&gt;\n  &lt;objectName&gt;low&lt;/objectName&gt;\n  &lt;x&gt;122&lt;/x&gt;\n  &lt;y&gt;100&lt;/y&gt;\n  &lt;width&gt;250&lt;/width&gt;\n  &lt;height&gt;50&lt;/height&gt;\n  &lt;uuid&gt;{c03eba29-3161-4d59-a2e7-3e143edea07f}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;0&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;objectName2/&gt;\n  &lt;xMin&gt;0.00000000&lt;/xMin&gt;\n  &lt;xMax&gt;1.00000000&lt;/xMax&gt;\n  &lt;yMin&gt;0.00000000&lt;/yMin&gt;\n  &lt;yMax&gt;1.00000000&lt;/yMax&gt;\n  &lt;xValue&gt;0.20400000&lt;/xValue&gt;\n  &lt;yValue&gt;0.00000000&lt;/yValue&gt;\n  &lt;type&gt;fill&lt;/type&gt;\n  &lt;pointsize&gt;1&lt;/pointsize&gt;\n  &lt;fadeSpeed&gt;0.00000000&lt;/fadeSpeed&gt;\n  &lt;mouseControl act=\"press\"&gt;jump&lt;/mouseControl&gt;\n  &lt;bordermode&gt;border&lt;/bordermode&gt;\n  &lt;borderColor&gt;#fa5401&lt;/borderColor&gt;\n  &lt;color&gt;\n   &lt;r&gt;255&lt;/r&gt;\n   &lt;g&gt;85&lt;/g&gt;\n   &lt;b&gt;0&lt;/b&gt;\n  &lt;/color&gt;\n  &lt;randomizable mode=\"both\" group=\"0\"&gt;false&lt;/randomizable&gt;\n  &lt;bgcolor&gt;\n   &lt;r&gt;65&lt;/r&gt;\n   &lt;g&gt;22&lt;/g&gt;\n   &lt;b&gt;0&lt;/b&gt;\n  &lt;/bgcolor&gt;\n  &lt;bgcolormode&gt;true&lt;/bgcolormode&gt;\n &lt;/bsbObject&gt;\n &lt;bsbObject version=\"2\" type=\"BSBController\"&gt;\n  &lt;objectName&gt;signal&lt;/objectName&gt;\n  &lt;x&gt;122&lt;/x&gt;\n  &lt;y&gt;162&lt;/y&gt;\n  &lt;width&gt;250&lt;/width&gt;\n  &lt;height&gt;50&lt;/height&gt;\n  &lt;uuid&gt;{ca645074-a12d-45d9-865f-503de0fbb825}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;0&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;objectName2/&gt;\n  &lt;xMin&gt;0.00000000&lt;/xMin&gt;\n  &lt;xMax&gt;1.00000000&lt;/xMax&gt;\n  &lt;yMin&gt;0.00000000&lt;/yMin&gt;\n  &lt;yMax&gt;1.00000000&lt;/yMax&gt;\n  &lt;xValue&gt;0.02908331&lt;/xValue&gt;\n  &lt;yValue&gt;0.00000000&lt;/yValue&gt;\n  &lt;type&gt;fill&lt;/type&gt;\n  &lt;pointsize&gt;1&lt;/pointsize&gt;\n  &lt;fadeSpeed&gt;0.00000000&lt;/fadeSpeed&gt;\n  &lt;mouseControl act=\"press\"&gt;jump&lt;/mouseControl&gt;\n  &lt;bordermode&gt;border&lt;/bordermode&gt;\n  &lt;borderColor&gt;#01a6f9&lt;/borderColor&gt;\n  &lt;color&gt;\n   &lt;r&gt;0&lt;/r&gt;\n   &lt;g&gt;170&lt;/g&gt;\n   &lt;b&gt;255&lt;/b&gt;\n  &lt;/color&gt;\n  &lt;randomizable mode=\"both\" group=\"0\"&gt;false&lt;/randomizable&gt;\n  &lt;bgcolor&gt;\n   &lt;r&gt;0&lt;/r&gt;\n   &lt;g&gt;43&lt;/g&gt;\n   &lt;b&gt;65&lt;/b&gt;\n  &lt;/bgcolor&gt;\n  &lt;bgcolormode&gt;true&lt;/bgcolormode&gt;\n &lt;/bsbObject&gt;\n &lt;bsbObject version=\"2\" type=\"BSBController\"&gt;\n  &lt;objectName&gt;out&lt;/objectName&gt;\n  &lt;x&gt;122&lt;/x&gt;\n  &lt;y&gt;224&lt;/y&gt;\n  &lt;width&gt;250&lt;/width&gt;\n  &lt;height&gt;50&lt;/height&gt;\n  &lt;uuid&gt;{fddff123-5046-4832-9132-3829c553394a}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;0&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;objectName2/&gt;\n  &lt;xMin&gt;0.00000000&lt;/xMin&gt;\n  &lt;xMax&gt;1.00000000&lt;/xMax&gt;\n  &lt;yMin&gt;0.00000000&lt;/yMin&gt;\n  &lt;yMax&gt;1.00000000&lt;/yMax&gt;\n  &lt;xValue&gt;0.00000000&lt;/xValue&gt;\n  &lt;yValue&gt;0.00000000&lt;/yValue&gt;\n  &lt;type&gt;fill&lt;/type&gt;\n  &lt;pointsize&gt;1&lt;/pointsize&gt;\n  &lt;fadeSpeed&gt;0.00000000&lt;/fadeSpeed&gt;\n  &lt;mouseControl act=\"press\"&gt;jump&lt;/mouseControl&gt;\n  &lt;bordermode&gt;border&lt;/bordermode&gt;\n  &lt;borderColor&gt;#fc017e&lt;/borderColor&gt;\n  &lt;color&gt;\n   &lt;r&gt;255&lt;/r&gt;\n   &lt;g&gt;0&lt;/g&gt;\n   &lt;b&gt;127&lt;/b&gt;\n  &lt;/color&gt;\n  &lt;randomizable mode=\"both\" group=\"0\"&gt;false&lt;/randomizable&gt;\n  &lt;bgcolor&gt;\n   &lt;r&gt;76&lt;/r&gt;\n   &lt;g&gt;0&lt;/g&gt;\n   &lt;b&gt;38&lt;/b&gt;\n  &lt;/bgcolor&gt;\n  &lt;bgcolormode&gt;true&lt;/bgcolormode&gt;\n &lt;/bsbObject&gt;\n &lt;bsbObject version=\"2\" type=\"BSBLabel\"&gt;\n  &lt;objectName/&gt;\n  &lt;x&gt;30&lt;/x&gt;\n  &lt;y&gt;44&lt;/y&gt;\n  &lt;width&gt;85&lt;/width&gt;\n  &lt;height&gt;42&lt;/height&gt;\n  &lt;uuid&gt;{01a1fc08-6c00-4568-b299-8d4610dde144}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;-3&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;label&gt;High&lt;/label&gt;\n  &lt;alignment&gt;right&lt;/alignment&gt;\n  &lt;valignment&gt;center&lt;/valignment&gt;\n  &lt;font&gt;Liberation Sans&lt;/font&gt;\n  &lt;fontsize&gt;24&lt;/fontsize&gt;\n  &lt;precision&gt;3&lt;/precision&gt;\n  &lt;color&gt;\n   &lt;r&gt;255&lt;/r&gt;\n   &lt;g&gt;188&lt;/g&gt;\n   &lt;b&gt;155&lt;/b&gt;\n  &lt;/color&gt;\n  &lt;bgcolor mode=\"nobackground\"&gt;\n   &lt;r&gt;255&lt;/r&gt;\n   &lt;g&gt;255&lt;/g&gt;\n   &lt;b&gt;255&lt;/b&gt;\n  &lt;/bgcolor&gt;\n  &lt;bordermode&gt;false&lt;/bordermode&gt;\n  &lt;borderradius&gt;1&lt;/borderradius&gt;\n  &lt;borderwidth&gt;0&lt;/borderwidth&gt;\n &lt;/bsbObject&gt;\n &lt;bsbObject version=\"2\" type=\"BSBLabel\"&gt;\n  &lt;objectName/&gt;\n  &lt;x&gt;30&lt;/x&gt;\n  &lt;y&gt;103&lt;/y&gt;\n  &lt;width&gt;85&lt;/width&gt;\n  &lt;height&gt;42&lt;/height&gt;\n  &lt;uuid&gt;{4cbc717b-37d5-43cc-84b0-630c8a697ba1}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;-3&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;label&gt;Low&lt;/label&gt;\n  &lt;alignment&gt;right&lt;/alignment&gt;\n  &lt;valignment&gt;center&lt;/valignment&gt;\n  &lt;font&gt;Liberation Sans&lt;/font&gt;\n  &lt;fontsize&gt;24&lt;/fontsize&gt;\n  &lt;precision&gt;3&lt;/precision&gt;\n  &lt;color&gt;\n   &lt;r&gt;255&lt;/r&gt;\n   &lt;g&gt;188&lt;/g&gt;\n   &lt;b&gt;155&lt;/b&gt;\n  &lt;/color&gt;\n  &lt;bgcolor mode=\"nobackground\"&gt;\n   &lt;r&gt;255&lt;/r&gt;\n   &lt;g&gt;255&lt;/g&gt;\n   &lt;b&gt;255&lt;/b&gt;\n  &lt;/bgcolor&gt;\n  &lt;bordermode&gt;false&lt;/bordermode&gt;\n  &lt;borderradius&gt;1&lt;/borderradius&gt;\n  &lt;borderwidth&gt;0&lt;/borderwidth&gt;\n &lt;/bsbObject&gt;\n &lt;bsbObject version=\"2\" type=\"BSBLabel\"&gt;\n  &lt;objectName/&gt;\n  &lt;x&gt;30&lt;/x&gt;\n  &lt;y&gt;166&lt;/y&gt;\n  &lt;width&gt;85&lt;/width&gt;\n  &lt;height&gt;42&lt;/height&gt;\n  &lt;uuid&gt;{2aaaf753-54af-4a64-8bc4-0eaf195ab7dd}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;-3&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;label&gt;Signal&lt;/label&gt;\n  &lt;alignment&gt;right&lt;/alignment&gt;\n  &lt;valignment&gt;center&lt;/valignment&gt;\n  &lt;font&gt;Liberation Sans&lt;/font&gt;\n  &lt;fontsize&gt;24&lt;/fontsize&gt;\n  &lt;precision&gt;3&lt;/precision&gt;\n  &lt;color&gt;\n   &lt;r&gt;255&lt;/r&gt;\n   &lt;g&gt;188&lt;/g&gt;\n   &lt;b&gt;155&lt;/b&gt;\n  &lt;/color&gt;\n  &lt;bgcolor mode=\"nobackground\"&gt;\n   &lt;r&gt;255&lt;/r&gt;\n   &lt;g&gt;255&lt;/g&gt;\n   &lt;b&gt;255&lt;/b&gt;\n  &lt;/bgcolor&gt;\n  &lt;bordermode&gt;false&lt;/bordermode&gt;\n  &lt;borderradius&gt;1&lt;/borderradius&gt;\n  &lt;borderwidth&gt;0&lt;/borderwidth&gt;\n &lt;/bsbObject&gt;\n &lt;bsbObject version=\"2\" type=\"BSBLabel\"&gt;\n  &lt;objectName/&gt;\n  &lt;x&gt;28&lt;/x&gt;\n  &lt;y&gt;228&lt;/y&gt;\n  &lt;width&gt;85&lt;/width&gt;\n  &lt;height&gt;42&lt;/height&gt;\n  &lt;uuid&gt;{2cfa842f-03b1-454f-9a30-6be3126ed251}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;-3&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;label&gt;Output&lt;/label&gt;\n  &lt;alignment&gt;right&lt;/alignment&gt;\n  &lt;valignment&gt;center&lt;/valignment&gt;\n  &lt;font&gt;Liberation Sans&lt;/font&gt;\n  &lt;fontsize&gt;24&lt;/fontsize&gt;\n  &lt;precision&gt;3&lt;/precision&gt;\n  &lt;color&gt;\n   &lt;r&gt;255&lt;/r&gt;\n   &lt;g&gt;188&lt;/g&gt;\n   &lt;b&gt;155&lt;/b&gt;\n  &lt;/color&gt;\n  &lt;bgcolor mode=\"nobackground\"&gt;\n   &lt;r&gt;255&lt;/r&gt;\n   &lt;g&gt;255&lt;/g&gt;\n   &lt;b&gt;255&lt;/b&gt;\n  &lt;/bgcolor&gt;\n  &lt;bordermode&gt;false&lt;/bordermode&gt;\n  &lt;borderradius&gt;1&lt;/borderradius&gt;\n  &lt;borderwidth&gt;0&lt;/borderwidth&gt;\n &lt;/bsbObject&gt;\n&lt;/bsbPanel&gt;\n&lt;bsbPresets&gt;\n&lt;/bsbPresets&gt;\n</code></pre>"},{"location":"opcodes/schmitt.html#see-also","title":"See also","text":"<ul> <li>lagud</li> <li>trighold</li> </ul>"},{"location":"opcodes/schmitt.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/scriptDir.html","title":"scriptDir","text":""},{"location":"opcodes/scriptDir.html#abstract","title":"Abstract","text":"<p>Get the directory of the loaded orc/csd file</p>"},{"location":"opcodes/scriptDir.html#description","title":"Description","text":"<p>Get the directory of the loaded script (orc/csd). This is not necessarily the same as the current working directory (which can be queried via the opcode pwd). The <code>pwd</code> points at the directory from which csound was launched, the script directory is always the directory of the script being run. For example, if csound is launched as:</p> <pre><code>$ /home/foo/&gt; csound subdir/myscript.csd\n</code></pre> <p>The current working dir is <code>/home/foo</code>, whereas the script directory is <code>/home/foo/subdir</code></p> <p>This is useful when communicating to another process which is not aware of csound's environment and needs an absolute path to some file relative to the script being run</p>"},{"location":"opcodes/scriptDir.html#syntax","title":"Syntax","text":"<pre><code>Spath scriptDir\n</code></pre>"},{"location":"opcodes/scriptDir.html#arguments","title":"Arguments","text":""},{"location":"opcodes/scriptDir.html#output","title":"Output","text":"<ul> <li><code>Spath</code>: the path of the loaded script</li> </ul>"},{"location":"opcodes/scriptDir.html#execution-time","title":"Execution Time","text":"<ul> <li>Init</li> </ul>"},{"location":"opcodes/scriptDir.html#examples","title":"Examples","text":"<pre><code>Spath scriptDir\nprints \"The script is being run from this folder: %s \\n\", Spath\n</code></pre>"},{"location":"opcodes/scriptDir.html#see-also","title":"See also","text":"<ul> <li>pathAbsolute</li> <li>findFileInPath</li> <li>pwd</li> </ul>"},{"location":"opcodes/scriptDir.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2020</p>"},{"location":"opcodes/sderef.html","title":"sderef","text":""},{"location":"opcodes/sderef.html#abstract","title":"Abstract","text":"<p>Retrieves a read-only string from the cache</p>"},{"location":"opcodes/sderef.html#description","title":"Description","text":"<p><code>sref</code>/<code>sderef</code> implement a global string cache. This can be useful in situations where a string needs to be stored/passed but only numbers are allowed (for example, when using the <code>event</code> opcode, or to be able to mix numbers and strings inside an array). It behaves similar to the <code>strset</code> / <code>strget</code> opcodes but automatically assigns an index to each distinct string inside the cache. The string returned by <code>sderef</code> should not be modified. This is not enforced.</p>"},{"location":"opcodes/sderef.html#syntax","title":"Syntax","text":"<pre><code>Sstr sderef idx\nSstr sderef kdx\n</code></pre>"},{"location":"opcodes/sderef.html#arguments","title":"Arguments","text":"<ul> <li><code>idx</code> / <code>kdx</code>: the numeric id representing the string</li> <li><code>Sstr</code>: the string inside the cache, corresponding to <code>idx</code></li> </ul>"},{"location":"opcodes/sderef.html#execution-time","title":"Execution Time","text":"<ul> <li>Init</li> </ul>"},{"location":"opcodes/sderef.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n--nosound\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\n\n/*\n\nExample file for sref / sderef\n\n*/\n\n; Use sref to pass multiple strings between instruments\ninstr 1\n  event_i \"i\", 2, 0, -1, sref(\"foo\"), sref(\"bar\")\n  turnoff\nendin\n\ninstr 2\n  ;; get a read-only string from the cache\n  S1 sderef p4\n  S2 sderef p5\n  prints \"S1=%s   S2=%s \\n\", S1, S2\n  turnoff\nendin\n\n;; Use sref to store strings inside a numeric array\ninstr 3\n  iStruct[] fillarray sref(\"Bach\"), 1675, 1750\n  prints \"Name = %s\\n\", sderef(iStruct[0])\nendin\n\ninstr 4\n  S1 = \"foo bar\"\n  iS1 = sref(S1)\n  ;; S2 is a read-only view of the cached S1, it should not be modified\n  S2 = sderef(iS1)\n  prints \"S2 = %s \\n\", S2\n  turnoff\nendin\n\ninstr test_same_idx\n  ;; Calling sref with the same string should result in the same index\n  idx1 = sref(\"foo\")\n  idx2 = sref(\"foo\")\n  prints \"These indices should be the same: idx1=%d, idx2=%d \\n\", idx1, idx2\n  turnoff\nendin\n\ninstr test_sderef\n  S1 = \"uniquestring\"\n  idx1 = sref(S1)\n  Sview = sderef(idx1)\n  prints \"Sview = '%s' (should be '%s') \\n\", Sview, S1\n  turnoff\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\n; i 1 0 0.1\n; i 3 + 0.1\n; i 4 + 0.1\ni \"test_same_idx\" 0 1\n\n; i \"test_sderef\" 0 1\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/sderef.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2020</p>"},{"location":"opcodes/setslice.html","title":"setslice","text":""},{"location":"opcodes/setslice.html#abstract","title":"Abstract","text":"<p>Set a slice of an array to a given value</p>"},{"location":"opcodes/setslice.html#description","title":"Description","text":"<p><code>setslice</code> sets the elements of an array or a slice of it to a given value. This operation is done in place. It is the equivalent of this code:</p> <pre><code>array[start:end:step] = value\n</code></pre>"},{"location":"opcodes/setslice.html#syntax","title":"Syntax","text":"<pre><code>setslice iArray[], ivalue, istart=0, iend=0, istep=1\nsetslice kArray[], kvalue, kstart=0, kend=0, kstep=1\n\nsetslice iArray[], iSource[], istart=0\nsetslice kArray[], kSource[], kstart=0\nsetslice SArray[], SSource[], kstart=0\n</code></pre>"},{"location":"opcodes/setslice.html#arguments","title":"Arguments","text":"<ul> <li><code>value</code>: the value to set the elements to</li> <li><code>start</code>: the start index of the slice. Defaults to 0</li> <li><code>end</code>: the end index of the slice. Defaults to 0 which means until the end of the slice</li> <li><code>step</code>: the number of steps to jump between elements. Default to 1 (all elements in the slice)</li> <li><code>xSource[]</code>: the array used as source. In this case, all elements of the source array are     copied to the destination array (xArray) starting at the given offset</li> </ul>"},{"location":"opcodes/setslice.html#output","title":"Output","text":""},{"location":"opcodes/setslice.html#execution-time","title":"Execution Time","text":"<ul> <li>Init (if all arguments are of i type) </li> <li>Performance (if any argument is of k type)</li> </ul>"},{"location":"opcodes/setslice.html#examples","title":"Examples","text":"<pre><code>iA[] fillarray 0, 1, 2, 3, 4, 5, 6, 7\nsetslice iA, 0.5  ; will set all elements of iA to 0.5\nprintarray iA\n\nkB[] init 10\n; if the condition is met setslice will set the even indexes\n; between 0 to 6 of kB to -1 \n\nif kvalue = 1 then\n    setslice kB, -1, 0, 6, 2\nendif\nif changed2(kB) == 1 then\n    printarray kB\nendif\n; kB: -1, 0, -1, 0, -1, 0, 0, 0, 0, 0\n</code></pre>"},{"location":"opcodes/setslice.html#see-also","title":"See also","text":"<ul> <li>ftset</li> <li>ftslice</li> <li>slicearray</li> </ul>"},{"location":"opcodes/setslice.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2020</p>"},{"location":"opcodes/sigmdrive.html","title":"sigmdrive","text":""},{"location":"opcodes/sigmdrive.html#abstract","title":"Abstract","text":"<p>Analog \"soft clipping\" distortion by applying non-linear transfer functions.</p>"},{"location":"opcodes/sigmdrive.html#description","title":"Description","text":"<p><code>sigmdrive</code> simulates analog \"soft clipping\" by applying non-linear transfer functions. Two different sigmoid equations are implemented.</p>"},{"location":"opcodes/sigmdrive.html#mode-0","title":"mode 0","text":"<pre><code>    out = tanh(in * drivefactor)\n</code></pre>"},{"location":"opcodes/sigmdrive.html#mode-1","title":"mode 1","text":"<pre><code>if in &gt; 0    -&gt; out = 1.0 - pow(1. - in, drivefactor)\nif in &lt;= 0   -&gt; out = pow(1. + x, drivefactor) - 1.0\n</code></pre>"},{"location":"opcodes/sigmdrive.html#syntax","title":"Syntax","text":"<pre><code>    aout sigmdrive ain, xdrivefactor, kmode=0\n</code></pre>"},{"location":"opcodes/sigmdrive.html#arguments","title":"Arguments","text":"<ul> <li><code>ain</code>: the input audio signal</li> <li><code>xdrivefactor</code>: a k- or a- value, normally greater than 1. A higher value implies more distortion</li> <li><code>kmode</code>: the distortion mode. 0=tanh, 1=pow (see above)</li> </ul>"},{"location":"opcodes/sigmdrive.html#output","title":"Output","text":"<ul> <li><code>aout</code>: the distorted audio</li> </ul>"},{"location":"opcodes/sigmdrive.html#execution-time","title":"Execution Time","text":"<ul> <li>Performance (audio)</li> </ul>"},{"location":"opcodes/sigmdrive.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n-odac           \n\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\n\n/* \n\n    sigmdrive: a sigmoid distortion\n\n    aout sigmdrive ain, kdrive, kmode=0\n\n    kdrive: how much distortion (range 0-inf)\n    kmode: 0 = tanh, 1 = pow\n\n*/\n\nsr     = 44100\nksmps  = 64\nnchnls = 2\n0dbfs  = 1\n\nchn_k \"drive\", \"r\"\nchn_k \"mode\", \"r\"\nchn_k \"midinote\", \"r\"\n\nchnset 10, \"drive\"\nchnset 1, \"mode\"\n\ninstr 1\n    kmidinote chnget \"midinote\"\n    kdrive chnget \"drive\"\n    kmode chnget \"mode\"     \n    ain oscili 0.2, lag(mtof:k(kmidinote), 0.2)\n    aout sigmdrive ain, port:k(kdrive, 0.05), kmode\n    dispfft aout, 1/20, 2048\n    outs aout, aout\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\ni1 0.1 100\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n\n\n\n\n&lt;bsbPanel&gt;\n &lt;label&gt;Widgets&lt;/label&gt;\n &lt;objectName/&gt;\n &lt;x&gt;100&lt;/x&gt;\n &lt;y&gt;100&lt;/y&gt;\n &lt;width&gt;320&lt;/width&gt;\n &lt;height&gt;240&lt;/height&gt;\n &lt;visible&gt;true&lt;/visible&gt;\n &lt;uuid/&gt;\n &lt;bgcolor mode=\"background\"&gt;\n  &lt;r&gt;38&lt;/r&gt;\n  &lt;g&gt;41&lt;/g&gt;\n  &lt;b&gt;45&lt;/b&gt;\n &lt;/bgcolor&gt;\n &lt;bsbObject version=\"2\" type=\"BSBKnob\"&gt;\n  &lt;objectName&gt;drive&lt;/objectName&gt;\n  &lt;x&gt;140&lt;/x&gt;\n  &lt;y&gt;0&lt;/y&gt;\n  &lt;width&gt;80&lt;/width&gt;\n  &lt;height&gt;80&lt;/height&gt;\n  &lt;uuid&gt;{72f1554b-6adf-45e3-998d-4d22945dd484}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;0&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;minimum&gt;0.00000000&lt;/minimum&gt;\n  &lt;maximum&gt;40.00000000&lt;/maximum&gt;\n  &lt;value&gt;10.00000000&lt;/value&gt;\n  &lt;mode&gt;lin&lt;/mode&gt;\n  &lt;mouseControl act=\"\"&gt;continuous&lt;/mouseControl&gt;\n  &lt;resolution&gt;0.01000000&lt;/resolution&gt;\n  &lt;randomizable group=\"0\"&gt;false&lt;/randomizable&gt;\n  &lt;color&gt;\n   &lt;r&gt;245&lt;/r&gt;\n   &lt;g&gt;124&lt;/g&gt;\n   &lt;b&gt;0&lt;/b&gt;\n  &lt;/color&gt;\n  &lt;textcolor&gt;#f67c00&lt;/textcolor&gt;\n  &lt;border&gt;1&lt;/border&gt;\n  &lt;borderColor&gt;#f57c00&lt;/borderColor&gt;\n  &lt;showvalue&gt;true&lt;/showvalue&gt;\n  &lt;flatstyle&gt;true&lt;/flatstyle&gt;\n  &lt;integerMode&gt;false&lt;/integerMode&gt;\n &lt;/bsbObject&gt;\n &lt;bsbObject version=\"2\" type=\"BSBDropdown\"&gt;\n  &lt;objectName&gt;mode&lt;/objectName&gt;\n  &lt;x&gt;265&lt;/x&gt;\n  &lt;y&gt;50&lt;/y&gt;\n  &lt;width&gt;80&lt;/width&gt;\n  &lt;height&gt;30&lt;/height&gt;\n  &lt;uuid&gt;{092a8810-6562-4cf4-8c3b-6c68ecfdfc1b}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;0&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;bsbDropdownItemList&gt;\n   &lt;bsbDropdownItem&gt;\n    &lt;name&gt;tan0&lt;/name&gt;\n    &lt;value&gt;0&lt;/value&gt;\n    &lt;stringvalue/&gt;\n   &lt;/bsbDropdownItem&gt;\n   &lt;bsbDropdownItem&gt;\n    &lt;name&gt;pow&lt;/name&gt;\n    &lt;value&gt;1&lt;/value&gt;\n    &lt;stringvalue/&gt;\n   &lt;/bsbDropdownItem&gt;\n  &lt;/bsbDropdownItemList&gt;\n  &lt;selectedIndex&gt;1&lt;/selectedIndex&gt;\n  &lt;randomizable group=\"0\"&gt;false&lt;/randomizable&gt;\n &lt;/bsbObject&gt;\n &lt;bsbObject version=\"2\" type=\"BSBGraph\"&gt;\n  &lt;objectName&gt;graph&lt;/objectName&gt;\n  &lt;x&gt;25&lt;/x&gt;\n  &lt;y&gt;115&lt;/y&gt;\n  &lt;width&gt;709&lt;/width&gt;\n  &lt;height&gt;297&lt;/height&gt;\n  &lt;uuid&gt;{7bdf5122-fdcc-4c85-9f30-0ba8ede6f29a}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;-3&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;value&gt;0&lt;/value&gt;\n  &lt;objectName2/&gt;\n  &lt;zoomx&gt;1.00000000&lt;/zoomx&gt;\n  &lt;zoomy&gt;1.00000000&lt;/zoomy&gt;\n  &lt;dispx&gt;1.00000000&lt;/dispx&gt;\n  &lt;dispy&gt;1.00000000&lt;/dispy&gt;\n  &lt;modex&gt;lin&lt;/modex&gt;\n  &lt;modey&gt;lin&lt;/modey&gt;\n  &lt;showSelector&gt;false&lt;/showSelector&gt;\n  &lt;showGrid&gt;true&lt;/showGrid&gt;\n  &lt;showTableInfo&gt;false&lt;/showTableInfo&gt;\n  &lt;showScrollbars&gt;true&lt;/showScrollbars&gt;\n  &lt;enableTables&gt;false&lt;/enableTables&gt;\n  &lt;enableDisplays&gt;true&lt;/enableDisplays&gt;\n  &lt;all&gt;true&lt;/all&gt;\n &lt;/bsbObject&gt;\n &lt;bsbObject version=\"2\" type=\"BSBScope\"&gt;\n  &lt;objectName&gt;1&lt;/objectName&gt;\n  &lt;x&gt;25&lt;/x&gt;\n  &lt;y&gt;415&lt;/y&gt;\n  &lt;width&gt;350&lt;/width&gt;\n  &lt;height&gt;150&lt;/height&gt;\n  &lt;uuid&gt;{a6d87942-d64d-45c1-a0b8-9b466f92c36a}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;-3&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;value&gt;-255.00000000&lt;/value&gt;\n  &lt;type&gt;scope&lt;/type&gt;\n  &lt;zoomx&gt;1.00000000&lt;/zoomx&gt;\n  &lt;zoomy&gt;1.00000000&lt;/zoomy&gt;\n  &lt;dispx&gt;1.00000000&lt;/dispx&gt;\n  &lt;dispy&gt;1.00000000&lt;/dispy&gt;\n  &lt;mode&gt;0.00000000&lt;/mode&gt;\n  &lt;triggermode&gt;TriggerUp&lt;/triggermode&gt;\n &lt;/bsbObject&gt;\n &lt;bsbObject version=\"2\" type=\"BSBLabel\"&gt;\n  &lt;objectName/&gt;\n  &lt;x&gt;169&lt;/x&gt;\n  &lt;y&gt;-1&lt;/y&gt;\n  &lt;width&gt;80&lt;/width&gt;\n  &lt;height&gt;25&lt;/height&gt;\n  &lt;uuid&gt;{7c15df99-3bb7-497e-b509-60a6d5f866db}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;-3&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;label&gt;Drive&lt;/label&gt;\n  &lt;alignment&gt;center&lt;/alignment&gt;\n  &lt;valignment&gt;top&lt;/valignment&gt;\n  &lt;font&gt;Liberation Sans&lt;/font&gt;\n  &lt;fontsize&gt;16&lt;/fontsize&gt;\n  &lt;precision&gt;3&lt;/precision&gt;\n  &lt;color&gt;\n   &lt;r&gt;245&lt;/r&gt;\n   &lt;g&gt;124&lt;/g&gt;\n   &lt;b&gt;0&lt;/b&gt;\n  &lt;/color&gt;\n  &lt;bgcolor mode=\"nobackground\"&gt;\n   &lt;r&gt;255&lt;/r&gt;\n   &lt;g&gt;255&lt;/g&gt;\n   &lt;b&gt;255&lt;/b&gt;\n  &lt;/bgcolor&gt;\n  &lt;bordermode&gt;false&lt;/bordermode&gt;\n  &lt;borderradius&gt;1&lt;/borderradius&gt;\n  &lt;borderwidth&gt;0&lt;/borderwidth&gt;\n &lt;/bsbObject&gt;\n &lt;bsbObject version=\"2\" type=\"BSBKnob\"&gt;\n  &lt;objectName&gt;midinote&lt;/objectName&gt;\n  &lt;x&gt;25&lt;/x&gt;\n  &lt;y&gt;0&lt;/y&gt;\n  &lt;width&gt;80&lt;/width&gt;\n  &lt;height&gt;80&lt;/height&gt;\n  &lt;uuid&gt;{5736f449-308c-4301-a80b-70e77923d957}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;0&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;minimum&gt;24.00000000&lt;/minimum&gt;\n  &lt;maximum&gt;100.00000000&lt;/maximum&gt;\n  &lt;value&gt;51.41320000&lt;/value&gt;\n  &lt;mode&gt;lin&lt;/mode&gt;\n  &lt;mouseControl act=\"\"&gt;continuous&lt;/mouseControl&gt;\n  &lt;resolution&gt;0.01000000&lt;/resolution&gt;\n  &lt;randomizable group=\"0\"&gt;false&lt;/randomizable&gt;\n  &lt;color&gt;\n   &lt;r&gt;245&lt;/r&gt;\n   &lt;g&gt;124&lt;/g&gt;\n   &lt;b&gt;0&lt;/b&gt;\n  &lt;/color&gt;\n  &lt;textcolor&gt;#f67c00&lt;/textcolor&gt;\n  &lt;border&gt;1&lt;/border&gt;\n  &lt;borderColor&gt;#f57c00&lt;/borderColor&gt;\n  &lt;showvalue&gt;true&lt;/showvalue&gt;\n  &lt;flatstyle&gt;true&lt;/flatstyle&gt;\n  &lt;integerMode&gt;false&lt;/integerMode&gt;\n &lt;/bsbObject&gt;\n &lt;bsbObject version=\"2\" type=\"BSBLabel\"&gt;\n  &lt;objectName/&gt;\n  &lt;x&gt;25&lt;/x&gt;\n  &lt;y&gt;80&lt;/y&gt;\n  &lt;width&gt;80&lt;/width&gt;\n  &lt;height&gt;25&lt;/height&gt;\n  &lt;uuid&gt;{41a3d82b-b370-4155-9af8-88eac21bd391}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;-3&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;label&gt;Midinote&lt;/label&gt;\n  &lt;alignment&gt;center&lt;/alignment&gt;\n  &lt;valignment&gt;top&lt;/valignment&gt;\n  &lt;font&gt;Liberation Sans&lt;/font&gt;\n  &lt;fontsize&gt;16&lt;/fontsize&gt;\n  &lt;precision&gt;3&lt;/precision&gt;\n  &lt;color&gt;\n   &lt;r&gt;245&lt;/r&gt;\n   &lt;g&gt;124&lt;/g&gt;\n   &lt;b&gt;0&lt;/b&gt;\n  &lt;/color&gt;\n  &lt;bgcolor mode=\"nobackground\"&gt;\n   &lt;r&gt;255&lt;/r&gt;\n   &lt;g&gt;255&lt;/g&gt;\n   &lt;b&gt;255&lt;/b&gt;\n  &lt;/bgcolor&gt;\n  &lt;bordermode&gt;false&lt;/bordermode&gt;\n  &lt;borderradius&gt;1&lt;/borderradius&gt;\n  &lt;borderwidth&gt;0&lt;/borderwidth&gt;\n &lt;/bsbObject&gt;\n&lt;/bsbPanel&gt;\n&lt;bsbPresets&gt;\n&lt;/bsbPresets&gt;\n</code></pre>"},{"location":"opcodes/sigmdrive.html#see-also","title":"See also","text":"<ul> <li>tubeharmonics</li> <li>distort1</li> <li>tanh</li> <li>powershape</li> </ul>"},{"location":"opcodes/sigmdrive.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p> <p>(based on pd/else's <code>drive~</code> - https://github.com/porres/pd-else)</p>"},{"location":"opcodes/sref.html","title":"sref","text":""},{"location":"opcodes/sref.html#abstract","title":"Abstract","text":"<p>Insert a string into a global registry and return a reference to it</p>"},{"location":"opcodes/sref.html#description","title":"Description","text":"<p><code>sref</code> implements a global string cache. This can be useful in any situation  where a string needs to be stored/passed but only numbers are allowed (for example, when using the <code>event</code> opcode, or to be able to mix numbers and strings inside an array). It behaves similar to the <code>strset</code> / <code>strget</code> opcodes but automatically assigns an index to each distinct string inside the cache. </p> <p>To retrieve an internalized string, use <code>sderef</code>. The returned string should not be modified since it is a \"view\" of the original string. </p> <p>Note</p> <p>It is guaranteed that passing twice the same string will return the same index.</p>"},{"location":"opcodes/sref.html#syntax","title":"Syntax","text":"<pre><code>    idx  sref Sstr\n    kdx  sref Sstr\n</code></pre>"},{"location":"opcodes/sref.html#arguments","title":"Arguments","text":"<ul> <li><code>idx</code> / <code>kdx</code>: the numeric id representing the string</li> <li><code>Sstr</code>: the string inside the cache, corresponding to <code>idx</code></li> </ul>"},{"location":"opcodes/sref.html#execution-time","title":"Execution Time","text":"<ul> <li>Init</li> <li>Performance</li> </ul>"},{"location":"opcodes/sref.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n--nosound\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\n\n/*\n\nExample file for sref / sderef\n\n*/\n\n; Use sref to pass multiple strings between instruments\ninstr 1\n  event_i \"i\", 2, 0, -1, sref(\"foo\"), sref(\"bar\")\n  turnoff\nendin\n\ninstr 2\n  ;; get a read-only string from the cache\n  S1 sderef p4\n  S2 sderef p5\n  prints \"S1=%s   S2=%s \\n\", S1, S2\n  turnoff\nendin\n\n;; Use sref to store strings inside a numeric array\ninstr 3\n  iStruct[] fillarray sref(\"Bach\"), 1675, 1750\n  prints \"Name = %s\\n\", sderef(iStruct[0])\nendin\n\ninstr 4\n  S1 = \"foo bar\"\n  iS1 = sref(S1)\n  ;; S2 is a read-only view of the cached S1, it should not be modified\n  S2 = sderef(iS1)\n  prints \"S2 = %s \\n\", S2\n  turnoff\nendin\n\ninstr test_same_idx\n  ;; Calling sref with the same string should result in the same index\n  idx1 = sref(\"foo\")\n  idx2 = sref(\"foo\")\n  prints \"These indices should be the same: idx1=%d, idx2=%d \\n\", idx1, idx2\n  turnoff\nendin\n\ninstr test_sderef\n  S1 = \"uniquestring\"\n  idx1 = sref(S1)\n  Sview = sderef(idx1)\n  prints \"Sview = '%s' (should be '%s') \\n\", Sview, S1\n  turnoff\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\n; i 1 0 0.1\n; i 3 + 0.1\n; i 4 + 0.1\ni \"test_same_idx\" 0 1\n\n; i \"test_sderef\" 0 1\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/sref.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/standardchaos.html","title":"standardchaos","text":""},{"location":"opcodes/standardchaos.html#abstract","title":"Abstract","text":"<p>Standard map chaotic generator</p>"},{"location":"opcodes/standardchaos.html#description","title":"Description","text":"<p><code>standardchaos</code> is a chaotic generator, the sound is generated with  the following difference equations;</p> <pre><code>y[n] = (y[n-1] + k * sin(x[n-1])) % 2pi;\nx[n] = (x[n-1] + y[n]) % 2pi;\nout = (x[n] - pi) / pi\n</code></pre>"},{"location":"opcodes/standardchaos.html#syntax","title":"Syntax","text":"<pre><code>    aout standardchaos krate, kk=1, ix=0.5, iy=0\n</code></pre>"},{"location":"opcodes/standardchaos.html#arguments","title":"Arguments","text":"<ul> <li><code>krate</code>: from 0 to nyquist</li> <li><code>kk</code>: a value for k in the above equation</li> <li><code>ix</code>: initial value for x</li> <li><code>iy</code>: initial value for y</li> </ul>"},{"location":"opcodes/standardchaos.html#output","title":"Output","text":"<ul> <li><code>aout</code>: audio output of the chaotic generator</li> </ul>"},{"location":"opcodes/standardchaos.html#execution-time","title":"Execution Time","text":"<ul> <li>Performance (audio)</li> </ul>"},{"location":"opcodes/standardchaos.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n-odac           \n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\nsr     = 44100\nksmps  = 64\nnchnls = 2\n0dbfs  = 1\n\n/* Example file for standardchaos opcode\n\n    aout standardchaos krate, kk, ix=0.5, iy=0\n\n    Standard map chaotic generator, the sound is generated with the difference equations;\n    y[n] = (y[n-1] + k * sin(x[n-1])) % 2pi;\n    x[n] = (x[n-1] + y[n]) % 2pi;\n    out = (x[n] - pi) / pi;\n\n*/\n\nchn_k \"rate\", \"r\"\nchn_k \"kval\", \"r\"\n\ninstr 1\n    ix = 0.1\n    iy = 0.0\n    igain = 0.3\n    krate chnget \"rate\"\n    kk chnget \"kval\"\n\n    aout standardchaos krate, kk, ix, iy\n    aout *= igain\n    outs aout, aout \nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\ni1 0 100\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n\n\n&lt;bsbPanel&gt;\n &lt;label&gt;Widgets&lt;/label&gt;\n &lt;objectName/&gt;\n &lt;x&gt;100&lt;/x&gt;\n &lt;y&gt;100&lt;/y&gt;\n &lt;width&gt;320&lt;/width&gt;\n &lt;height&gt;240&lt;/height&gt;\n &lt;visible&gt;true&lt;/visible&gt;\n &lt;uuid/&gt;\n &lt;bgcolor mode=\"nobackground\"&gt;\n  &lt;r&gt;255&lt;/r&gt;\n  &lt;g&gt;255&lt;/g&gt;\n  &lt;b&gt;255&lt;/b&gt;\n &lt;/bgcolor&gt;\n &lt;bsbObject version=\"2\" type=\"BSBKnob\"&gt;\n  &lt;objectName&gt;rate&lt;/objectName&gt;\n  &lt;x&gt;20&lt;/x&gt;\n  &lt;y&gt;25&lt;/y&gt;\n  &lt;width&gt;120&lt;/width&gt;\n  &lt;height&gt;120&lt;/height&gt;\n  &lt;uuid&gt;{228ebadc-8fb9-4dee-b6fa-8216721da00d}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;0&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;minimum&gt;0.00000000&lt;/minimum&gt;\n  &lt;maximum&gt;20000.00000000&lt;/maximum&gt;\n  &lt;value&gt;9656.00000000&lt;/value&gt;\n  &lt;mode&gt;lin&lt;/mode&gt;\n  &lt;mouseControl act=\"\"&gt;continuous&lt;/mouseControl&gt;\n  &lt;resolution&gt;0.01000000&lt;/resolution&gt;\n  &lt;randomizable group=\"0\"&gt;false&lt;/randomizable&gt;\n  &lt;color&gt;\n   &lt;r&gt;245&lt;/r&gt;\n   &lt;g&gt;124&lt;/g&gt;\n   &lt;b&gt;0&lt;/b&gt;\n  &lt;/color&gt;\n  &lt;textcolor&gt;#f27b00&lt;/textcolor&gt;\n  &lt;border&gt;1&lt;/border&gt;\n  &lt;borderColor&gt;#1b1b1b&lt;/borderColor&gt;\n  &lt;showvalue&gt;true&lt;/showvalue&gt;\n  &lt;flatstyle&gt;true&lt;/flatstyle&gt;\n  &lt;integerMode&gt;true&lt;/integerMode&gt;\n &lt;/bsbObject&gt;\n &lt;bsbObject version=\"2\" type=\"BSBLabel\"&gt;\n  &lt;objectName/&gt;\n  &lt;x&gt;45&lt;/x&gt;\n  &lt;y&gt;145&lt;/y&gt;\n  &lt;width&gt;75&lt;/width&gt;\n  &lt;height&gt;41&lt;/height&gt;\n  &lt;uuid&gt;{189e690b-5322-423c-9288-7c213beb7889}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;-3&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;label&gt;Rate&lt;/label&gt;\n  &lt;alignment&gt;center&lt;/alignment&gt;\n  &lt;valignment&gt;center&lt;/valignment&gt;\n  &lt;font&gt;Liberation Sans&lt;/font&gt;\n  &lt;fontsize&gt;24&lt;/fontsize&gt;\n  &lt;precision&gt;3&lt;/precision&gt;\n  &lt;color&gt;\n   &lt;r&gt;255&lt;/r&gt;\n   &lt;g&gt;170&lt;/g&gt;\n   &lt;b&gt;0&lt;/b&gt;\n  &lt;/color&gt;\n  &lt;bgcolor mode=\"nobackground\"&gt;\n   &lt;r&gt;255&lt;/r&gt;\n   &lt;g&gt;255&lt;/g&gt;\n   &lt;b&gt;255&lt;/b&gt;\n  &lt;/bgcolor&gt;\n  &lt;bordermode&gt;false&lt;/bordermode&gt;\n  &lt;borderradius&gt;1&lt;/borderradius&gt;\n  &lt;borderwidth&gt;0&lt;/borderwidth&gt;\n &lt;/bsbObject&gt;\n &lt;bsbObject version=\"2\" type=\"BSBKnob\"&gt;\n  &lt;objectName&gt;kval&lt;/objectName&gt;\n  &lt;x&gt;154&lt;/x&gt;\n  &lt;y&gt;25&lt;/y&gt;\n  &lt;width&gt;120&lt;/width&gt;\n  &lt;height&gt;120&lt;/height&gt;\n  &lt;uuid&gt;{feb1752a-9019-44c7-b654-2d0b1bb8b728}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;0&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;minimum&gt;0.00000000&lt;/minimum&gt;\n  &lt;maximum&gt;20.00000000&lt;/maximum&gt;\n  &lt;value&gt;5.83000000&lt;/value&gt;\n  &lt;mode&gt;lin&lt;/mode&gt;\n  &lt;mouseControl act=\"\"&gt;continuous&lt;/mouseControl&gt;\n  &lt;resolution&gt;0.01000000&lt;/resolution&gt;\n  &lt;randomizable group=\"0\"&gt;false&lt;/randomizable&gt;\n  &lt;color&gt;\n   &lt;r&gt;245&lt;/r&gt;\n   &lt;g&gt;124&lt;/g&gt;\n   &lt;b&gt;0&lt;/b&gt;\n  &lt;/color&gt;\n  &lt;textcolor&gt;#f27b00&lt;/textcolor&gt;\n  &lt;border&gt;1&lt;/border&gt;\n  &lt;borderColor&gt;#1b1b1b&lt;/borderColor&gt;\n  &lt;showvalue&gt;true&lt;/showvalue&gt;\n  &lt;flatstyle&gt;true&lt;/flatstyle&gt;\n  &lt;integerMode&gt;false&lt;/integerMode&gt;\n &lt;/bsbObject&gt;\n &lt;bsbObject version=\"2\" type=\"BSBLabel\"&gt;\n  &lt;objectName/&gt;\n  &lt;x&gt;179&lt;/x&gt;\n  &lt;y&gt;145&lt;/y&gt;\n  &lt;width&gt;75&lt;/width&gt;\n  &lt;height&gt;41&lt;/height&gt;\n  &lt;uuid&gt;{2d9d245b-763b-4aed-a795-66f3292fabc4}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;-3&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;label&gt;k&lt;/label&gt;\n  &lt;alignment&gt;center&lt;/alignment&gt;\n  &lt;valignment&gt;center&lt;/valignment&gt;\n  &lt;font&gt;Liberation Sans&lt;/font&gt;\n  &lt;fontsize&gt;24&lt;/fontsize&gt;\n  &lt;precision&gt;3&lt;/precision&gt;\n  &lt;color&gt;\n   &lt;r&gt;255&lt;/r&gt;\n   &lt;g&gt;170&lt;/g&gt;\n   &lt;b&gt;0&lt;/b&gt;\n  &lt;/color&gt;\n  &lt;bgcolor mode=\"nobackground\"&gt;\n   &lt;r&gt;255&lt;/r&gt;\n   &lt;g&gt;255&lt;/g&gt;\n   &lt;b&gt;255&lt;/b&gt;\n  &lt;/bgcolor&gt;\n  &lt;bordermode&gt;false&lt;/bordermode&gt;\n  &lt;borderradius&gt;1&lt;/borderradius&gt;\n  &lt;borderwidth&gt;0&lt;/borderwidth&gt;\n &lt;/bsbObject&gt;\n &lt;bsbObject version=\"2\" type=\"BSBScope\"&gt;\n  &lt;objectName&gt;1&lt;/objectName&gt;\n  &lt;x&gt;18&lt;/x&gt;\n  &lt;y&gt;239&lt;/y&gt;\n  &lt;width&gt;350&lt;/width&gt;\n  &lt;height&gt;150&lt;/height&gt;\n  &lt;uuid&gt;{70135fc8-22b9-41e3-a97a-eb185ddeee34}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;-3&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;value&gt;-255.00000000&lt;/value&gt;\n  &lt;type&gt;scope&lt;/type&gt;\n  &lt;zoomx&gt;2.00000000&lt;/zoomx&gt;\n  &lt;zoomy&gt;1.00000000&lt;/zoomy&gt;\n  &lt;dispx&gt;1.00000000&lt;/dispx&gt;\n  &lt;dispy&gt;1.00000000&lt;/dispy&gt;\n  &lt;mode&gt;0.00000000&lt;/mode&gt;\n  &lt;triggermode&gt;TriggerUp&lt;/triggermode&gt;\n &lt;/bsbObject&gt;\n&lt;/bsbPanel&gt;\n&lt;bsbPresets&gt;\n&lt;/bsbPresets&gt;\n</code></pre>"},{"location":"opcodes/standardchaos.html#see-also","title":"See also","text":"<ul> <li>crackle</li> <li>chuap</li> <li>dust2</li> </ul>"},{"location":"opcodes/standardchaos.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019 (based on pd/else's <code>standard~</code> - https://github.com/porres/pd-else)</p>"},{"location":"opcodes/strjoin.html","title":"strjoin","text":""},{"location":"opcodes/strjoin.html#abstract","title":"Abstract","text":"<p>Concatenate any number of strings</p>"},{"location":"opcodes/strjoin.html#description","title":"Description","text":"<p>Join multiple strings, either as an array or as arguments. The separator is inserted in between each given strings. The results is returned as a new strings</p>"},{"location":"opcodes/strjoin.html#syntax","title":"Syntax","text":"<pre><code>Sout strjoin Ssep, Sstrings[]\nSout strjoin Ssep, Sstr1, Sstr2, ..., Sstrn\n</code></pre>"},{"location":"opcodes/strjoin.html#arguments","title":"Arguments","text":"<ul> <li><code>Ssep</code>: a string to be inserted between each given string</li> <li><code>Sstrings</code>: an array of strings</li> </ul>"},{"location":"opcodes/strjoin.html#output","title":"Output","text":"<ul> <li><code>Sout</code>: the joint strings </li> </ul>"},{"location":"opcodes/strjoin.html#execution-time","title":"Execution Time","text":"<ul> <li>Init</li> </ul>"},{"location":"opcodes/strjoin.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n--nosound\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\n\n/*\n    Sout strjoin Ssep, Sstrings[]\n\n    Join multiple strings into one\n\n\n*/\n\ninstr 1\n    Sparts[] strsplit \"This;is;a;string!\", \";\"\n    Sjoint strjoin \"--\", Sparts\n    prints \"Result: '%s'\\n\", Sjoint\n    turnoff\nendin\n\ninstr 2\n    Sjoint strjoin \", \", \"This\", \"is\", \"a\", \"string!\"\n    prints \"Result 2: '%s'\\n\", Sjoint\n    turnoff\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\ni1 0 1\ni2 0 1\n; f0 3600\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/strjoin.html#see-also","title":"See also","text":"<ul> <li>strsplit</li> <li>strstrip</li> <li>strsub</li> <li>strindex</li> <li>pathSplit</li> <li>pathSplitExt</li> </ul>"},{"location":"opcodes/strjoin.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2021</p>"},{"location":"opcodes/strsplit.html","title":"strsplit","text":""},{"location":"opcodes/strsplit.html#abstract","title":"Abstract","text":"<p>Split a string at a given separator</p>"},{"location":"opcodes/strsplit.html#description","title":"Description","text":"<p>Split a string into parts at a given separator. The separator is not included in any of the parts</p>"},{"location":"opcodes/strsplit.html#syntax","title":"Syntax","text":"<pre><code>Sparts[] strsplit Sstring, Sseparator\n</code></pre>"},{"location":"opcodes/strsplit.html#arguments","title":"Arguments","text":"<ul> <li><code>Sstring</code>: The string to split</li> <li><code>Sseparator</code>: the delimiter used to split the string</li> </ul>"},{"location":"opcodes/strsplit.html#output","title":"Output","text":"<ul> <li><code>Sparts</code>: an array of strings, holding the parts. </li> </ul>"},{"location":"opcodes/strsplit.html#execution-time","title":"Execution Time","text":"<ul> <li>Init</li> </ul>"},{"location":"opcodes/strsplit.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n--nosound\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\n\n/*\n    Sparts[] strsplit Sstring, Sseparator\n\n    Split a string into parts at the given separator\n\n\n*/\n\ninstr 1\n    Sparts[] strsplit \"This;is;a;string!\", \";\"\n    printarray Sparts\n    Slines[] strsplit {{\nLine 0\nLine 1\nLine 2\nLine 3\n\nLine 5}}, \"\\n\"\n    printarray Slines\n    turnoff\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\ni1 0 1\n; f0 3600\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/strsplit.html#see-also","title":"See also","text":"<ul> <li>strstrip</li> <li>strsub</li> <li>strindex</li> <li>pathSplit[O]</li> <li>pathSplitExt</li> </ul>"},{"location":"opcodes/strsplit.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2021</p>"},{"location":"opcodes/sysPlatform.html","title":"sysPlatform","text":""},{"location":"opcodes/sysPlatform.html#abstract","title":"Abstract","text":"<p>Get a string description of the current system platform</p>"},{"location":"opcodes/sysPlatform.html#description","title":"Description","text":"<p>Possible values depending on the platform:</p> <pre><code>* windows\n* linux\n* macos\n* android\n* unix\n</code></pre> <p>For unknown platforms, this opcode returns an empty string</p>"},{"location":"opcodes/sysPlatform.html#syntax","title":"Syntax","text":"<pre><code>Splatform sysPlatform\n</code></pre>"},{"location":"opcodes/sysPlatform.html#arguments","title":"Arguments","text":""},{"location":"opcodes/sysPlatform.html#output","title":"Output","text":"<ul> <li><code>Splatform</code>: a string describing the current platform</li> </ul>"},{"location":"opcodes/sysPlatform.html#execution-time","title":"Execution Time","text":"<ul> <li>Init</li> </ul>"},{"location":"opcodes/sysPlatform.html#examples","title":"Examples","text":"<pre><code>Splatform sysPlatform\nprints \"Csound is runnign on platform: %s \\n\", Splatform\n</code></pre>"},{"location":"opcodes/sysPlatform.html#see-also","title":"See also","text":"<ul> <li>pathNative</li> </ul>"},{"location":"opcodes/sysPlatform.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2020</p>"},{"location":"opcodes/tabrowlin.html","title":"tabrowlin","text":""},{"location":"opcodes/tabrowlin.html#abstract","title":"Abstract","text":"<p>Copy a row from an f-table to another, interpolating between rows</p>"},{"location":"opcodes/tabrowlin.html#description","title":"Description","text":"<p>This opcode assumes the use of a table, which is a simple 1D array, to hold a 2D matrix with a given row length.  Assuming such a 2D table containing multiple rows of sampled streams (for instance, the amplitudes of a set of oscilators, sampled at a regular interval), this opcode can extract one row (or a slice of a row) of that data with linear interpolation between adjacent rows (if row is not a whole number) and place the result in another table</p>"},{"location":"opcodes/tabrowlin.html#syntax","title":"Syntax","text":"<pre><code>tabrowlin krow, ifnsrc, ifndest, inumcols [, ioffset=0, istart=0, iend=0, istep=1\n</code></pre>"},{"location":"opcodes/tabrowlin.html#arguments","title":"Arguments","text":"<ul> <li>krow: the row to read. It can be a fractional number, in which case the row will be linearly interpolated with the next row </li> <li>ifnsrc: The table index to copy data from</li> <li>ifndest: The table index to copy data to (should be able to old one row of data)</li> <li>inumcols: The number of columns a row has, in the source table</li> <li>ioffset: an offset to where the 2D data starts (used to skip a header, if present)</li> <li>istart: start index to read from (refers to the row)</li> <li>iend: end index to read from the row (not inclusive, can't exceed inumcols)</li> <li>istep: step used to read along the row</li> </ul>"},{"location":"opcodes/tabrowlin.html#output","title":"Output","text":"<p>This opcode has no outputs. The interpolated data is placed in ifndest</p>"},{"location":"opcodes/tabrowlin.html#execution-time","title":"Execution Time","text":"<ul> <li>Performance</li> </ul>"},{"location":"opcodes/tabrowlin.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n-odac     ;;;realtime audio out\n&lt;/CsOptions&gt;\n&lt;CsInstruments&gt;\n\n\n/* \n\nIf reading out of bounds a PerformanceError will be raised. Because we\ninterpolate between rows, the last row that can be read is\n\n  maxrow = (ftlen(ifnsrc)-ioffset)/inumcols - 2\n\n*/\n\nsr = 44100\nksmps = 128\nnchnls = 1\n0dbfs  = 1\n\ninstr 1\n  ; just a simple test of the bare functionality\n  ; generate a 4x3 table\n  isource ftgentmp 0, 0, -12, -2, \\\n       0,  1,  2,  3,   \\\n      10, 11, 12, 13,   \\\n      20, 21, 22, 23\n  ; create an empty table able to hold one row (4 elements)\n  idest ftgentmp 0, 0, -4, -2, 0\n  print ftlen(isource)\n  ; we exceed the max. row to show what happens (the row is clipped\n  ; to the max row possible and a message is printed to show the error)\n  krow linseg 0, p3, 2.05\n  printk2 krow, 20\n  tabrowlin krow, isource, idest, 4\n  ftprint idest, -1\nendin\n\n&lt;/CsInstruments&gt;\n&lt;CsScore&gt;\ni 1 0 2\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt; \n</code></pre>"},{"location":"opcodes/tabrowlin.html#see-also","title":"See also","text":"<ul> <li>getrowlin</li> <li>slicearray</li> <li>beadsynt</li> </ul>"},{"location":"opcodes/tabrowlin.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/throwerror.html","title":"throwerror","text":""},{"location":"opcodes/throwerror.html#abstract","title":"Abstract","text":"<p>Throws an error message at performance or init</p>"},{"location":"opcodes/throwerror.html#description","title":"Description","text":"<p>Use throwerror to stop the current event with a performance error. Alternatively  throwerror can just issue a warning.</p> <p>Without a type, a performance error is thrown. </p>"},{"location":"opcodes/throwerror.html#syntax","title":"Syntax","text":"<pre><code>throwerror Smessage\nthrowerror Stype, Smessage\n</code></pre>"},{"location":"opcodes/throwerror.html#arguments","title":"Arguments","text":"<ul> <li><code>Stype</code>: one of \"error\", \"init\", \"warning\", \"info\". If absent, type defaults to \"error\"</li> <li><code>Smessage</code>: the text message to show. Use sprintf / sprintfk to construct a message if needed</li> </ul>"},{"location":"opcodes/throwerror.html#output","title":"Output","text":""},{"location":"opcodes/throwerror.html#execution-time","title":"Execution Time","text":"<ul> <li>Init (if Stype == \"init\")</li> <li>Performance (otherwise)</li> </ul>"},{"location":"opcodes/throwerror.html#examples","title":"Examples","text":"<pre><code>if kmidi &gt; 128 then\n    throwerror \"Received an invalid midi value, stopping current event\"\nendif\n</code></pre>"},{"location":"opcodes/throwerror.html#see-also","title":"See also","text":""},{"location":"opcodes/throwerror.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/transpose.html","title":"transpose","text":""},{"location":"opcodes/transpose.html#abstract","title":"Abstract","text":"<p>Simple delay based pitch shifter inspired on faust's transpose</p>"},{"location":"opcodes/transpose.html#description","title":"Description","text":"<p>A simple pitch shifter based on 2 delay lines</p>"},{"location":"opcodes/transpose.html#syntax","title":"Syntax","text":"<pre><code>aout transpose ain, ksemitones, kwindur=0.02, kxfade=-1\n</code></pre>"},{"location":"opcodes/transpose.html#arguments","title":"Arguments","text":"<ul> <li>ain: The audio signal</li> <li>ksemitones: The semitones to shift the signal, up or down</li> <li>kwindur: The duration of the window used, in seconds. The lower the    sound to be transposed, the longer the duration of the window.</li> <li>kxfade: The size of the crossfade, in samples. Defaults to 1/4 of the    window duration, in samples. This parameter is quite sensitive to the kind   of sound used (sustained vs. percussive, voiced vs. unvoiced) so some   adaptation to each case might be needed.</li> </ul>"},{"location":"opcodes/transpose.html#output","title":"Output","text":"<ul> <li>aout: The transposed signal</li> </ul>"},{"location":"opcodes/transpose.html#execution-time","title":"Execution Time","text":"<ul> <li>Performance</li> </ul>"},{"location":"opcodes/transpose.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\nsr     = 48000\nksmps  = 64\nnchnls = 2\n0dbfs  = 1\n\n\nopcode nativetranspose, a, akkp\n  ; native implementation by J. Heintz\n  asig, ksemitones, kwindur, iwindow xin\n  imaxdelay = 2\n  kfreqratio = semitone(ksemitones)\n  iwindowtab = ftgenonce(0, 0, 4096, 20, iwindow, 1)\n  kphasorfreq = (1 - kfreqratio) / kwindur\n  aphasor1 = phasor:a(kphasorfreq)\n  aphasor2 = phasor:a(kphasorfreq, 0.5)\n  adelay1 = vdelayx(asig, aphasor1 * kwindur, imaxdelay, 4)\n  adelay2 = vdelayx(asig, aphasor2 * kwindur, imaxdelay, 4)\n  adelay1 *= tablei:a(aphasor1, iwindowtab, 1)\n  adelay2 *= tablei:a(aphasor2, iwindowtab, 1)\n  adelay1 += adelay2\n  xout adelay1\nendop\n\ninstr 1\n  kwindur = 0.02\n  asig = vco2(0.5, mtof:i(ntom(\"2G\")))\n  ; asig = oscili:a(0.8, mtof:i(ipitch))\n  asig = gtadsr(asig, 0.004, 0.008, 0.2, 0.3, metro(7/3))\n  ktime = eventtime()\n  kshift = bpf:k(ktime, 0, 0, 8, 12, 12, 12, 20, 0)\n  kxfade = kwindur * sr / 2.5\n  ashifted = transpose(asig, kshift, kwindur, kxfade)\n  ashifted2 = nativetranspose(asig, kshift, kwindur, 1)\n  outs ashifted, ashifted2\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\ni1 0 25\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/transpose.html#see-also","title":"See also","text":"<ul> <li>pvshift</li> <li>trshift)</li> </ul>"},{"location":"opcodes/transpose.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2023</p>"},{"location":"opcodes/transpose.html#metadata","title":"Metadata","text":"<ul> <li>Author: Eduardo Moguillansky</li> <li>Year: 2023</li> <li>Plugin: else</li> <li>Source: https://github.com/csound-plugins/csound-plugins/blob/master/src/else/src/else.c</li> </ul>"},{"location":"opcodes/tubeharmonics.html","title":"tubeharmonics","text":""},{"location":"opcodes/tubeharmonics.html#abstract","title":"Abstract","text":"<p>A distortion with control for odd/even harmonics</p>"},{"location":"opcodes/tubeharmonics.html#description","title":"Description","text":"<p>Simulates the behaviour of a vacuum tube circuit stage. Adds odd and  even harmonics to the signal. Has flux and program dependent saturation.</p> <p>A port of <code>REAPER</code>'s \"Tube Harmonics\" jsfx plugin</p>"},{"location":"opcodes/tubeharmonics.html#syntax","title":"Syntax","text":"<pre><code>aout tubeharmonics ain, keven, kodd, kfluctuation=0, kindrive=0, koutdrive=0, kgain=0\n</code></pre>"},{"location":"opcodes/tubeharmonics.html#arguments","title":"Arguments","text":"<ul> <li><code>ain</code>: the input signal</li> <li><code>keven</code>: amount of even harmonics (between 0-1)</li> <li><code>kodd</code>: amount of odd harmonics (between 0-1)</li> <li><code>kfluctuation</code>: non linearities (between 0-1, default 0)</li> <li><code>kindrive</code>: amount of input drive (in dB, default=0 dB)</li> <li><code>koutdrive</code>: amount of output drive (in dB, default=0 dB)</li> <li><code>koutgain</code>: output gain, in dB (default=0 dB)</li> </ul>"},{"location":"opcodes/tubeharmonics.html#output","title":"Output","text":"<ul> <li><code>aout</code>: audio output</li> </ul>"},{"location":"opcodes/tubeharmonics.html#execution-time","title":"Execution Time","text":"<ul> <li>Performance (audio)</li> </ul>"},{"location":"opcodes/tubeharmonics.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n-odac \n\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\nsr     = 44100\nksmps  = 64\nnchnls = 2\n0dbfs  = 1\n\n;; This is the example file for tubeharmonics opcode\n\ngisnd ftgen 0, 0, 0, -1, \"bourre-fragment-1.flac\", 0, 0, 1\n\n\nFLpanel \"tubeharmonics\", 400, 500, 50, 50\nFLcolor 150, 100, 150, 200, 100, 250\n\niw, ih = 300, 30\niline = ih * 2\niy, ix = ih, ih * 0.5\n;                                    min max  exp\ngkwhich, i0 FLslider \"source\",       0,    2,   0, 3,  -1, iw, ih, ix, iy\niy += iline\niv1 FLvalue \"\", 50, 30, 322, iy\ngkeven, i1 FLslider \"even harmonics\",0,    1,   0, 3, iv1, iw, ih, ix, iy\niy += iline\niv2 FLvalue \"\", 50, 30, 322, iy\ngkodd,  i2 FLslider \"odd harmonics\", 0,    1,   0, 3, iv2, iw, ih, ix, iy\niy += iline\niv3 FLvalue \"\", 50, 30, 322, iy\ngkflct, i3 FLslider \"fluctuation\",   0,    1,   0, 3, iv3, iw, ih, ix, iy\niy += iline\niv4 FLvalue \"\", 50, 30, 322, iy\ngkinpt, i4 FLslider \"Input (dB)\",  -12,  12,  0, 3, iv4, iw, ih, ix, iy\niy += iline\niv5 FLvalue \"\", 50, 30, 322, iy\ngkout,  i5 FLslider \"Output (dB)\", -12,  12,  0, 3, iv5, iw, ih, ix, iy\niy += iline\nFLcolor 150, 100, 150, 200, 200, 100\ngkdump, i6 FLbutton \"Dump variables\", 1, 0, 2, iw/2, ih, ix, iy, -1 \nFLpanelEnd\nFLrun\n  FLsetVal_i 0, i0\n  FLsetVal_i 0.3, i1\n  FLsetVal_i 0.3, i2\n  FLsetVal_i 0.1, i3\n  FLsetVal_i 0, i4\n  FLsetVal_i 0, i5\n  FLsetVal_i 0, i6\n\nopcode loopsamp, a, i\n  ift xin\n  iloopend = nsamp(ift) / sr\n  asig flooper2 1, 1, 0, iloopend, 0.1, ift\n  xout asig\nendop\n\nopcode select3, a, kaaa\n  kwhich, a1, a2, a3 xin\n  if(kwhich &lt; 1) then\n    asig = a1*(1-kwhich) + a2*kwhich\n  else\n    asig = a2*(2-kwhich) + a3*(kwhich-1)\n  endif\n  xout asig\nendop\n\ninstr 1\n  a1 loopsamp gisnd\n  a3 vco2 0.5, ntof(\"3C\")\n  a2 oscili 0.5, 1000\n  asig select3 gkwhich, a1, a2, a3\n  igain = 0\n  a1, a2 tubeharmonics asig, asig, gkeven, gkodd, gkflct, gkinpt, gkout, igain\n  outs a1, a2\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\ni1 0 300\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/tubeharmonics.html#see-also","title":"See also","text":"<ul> <li>sigmdrive</li> <li>tanh</li> <li>distort1</li> </ul>"},{"location":"opcodes/tubeharmonics.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/uniqinstance.html","title":"uniqinstance","text":""},{"location":"opcodes/uniqinstance.html#abstract","title":"Abstract","text":"<p>Return an fractional instrument number which is not in use</p>"},{"location":"opcodes/uniqinstance.html#description","title":"Description","text":"<p>Given an integer instrument number, <code>uniqinstance</code> a fractional  instrument number which is not active now and can be used as p1 for <code>event</code>, <code>schedule</code> or similar opcodes to create a unique  instance of the given instrument</p> <p>Note</p> <p>This opcode DOES NOT create a new instance. It just returns an instr number which can be used to create one</p>"},{"location":"opcodes/uniqinstance.html#syntax","title":"Syntax","text":"<pre><code>instrnum  uniqinstance integer_instrnum\ninstrnum  uniqinstance Sinstrname\n</code></pre>"},{"location":"opcodes/uniqinstance.html#arguments","title":"Arguments","text":"<ul> <li><code>integer_instrnum</code>: the integer instrument number</li> <li><code>Sinstrname</code>: the name of a named instrument</li> </ul>"},{"location":"opcodes/uniqinstance.html#output","title":"Output","text":"<ul> <li><code>instrnum</code>: a fractional instrument number which is guaranteed   not to be active at the moment</li> </ul>"},{"location":"opcodes/uniqinstance.html#execution-time","title":"Execution Time","text":"<ul> <li>Init </li> </ul>"},{"location":"opcodes/uniqinstance.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n\n--nosound\n-m0\n\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\n\n/*\nExample file for uniqinstance\n\ninstrnum  uniqinstance intinstr\n\nReturns a unique fractional instrument number which is not\nactive at the moment and can be assigned to a new instance\n\n*/\n\ninstr exit\n  exitnow\nendin\n\ninstr 1\n  ; generate new instances manually, to check that \n  ; uniqinstance does not collide with existing instances\n  ; scheduled via other means\n  kcounter init 0\n  ktrig metro 20\n\n  if ktrig == 1 then\n    kcounter += 1\n    kinst = 10 + kcounter/100\n    printsk \"kinst=%f \\n\", kinst\n    schedulek(kinst, 0, 1)\n  endif\nendin\n\ninstr 2\n  instrnum10 uniqinstance 10\n  prints \"Unique instance of 10= %f\\n\", instrnum10\n  instrnum11 uniqinstance 11, 1000\n  prints \"Unique instance of 11= %f\\n\", instrnum11\n  turnoff\nendin\n\ninstr 10\n  print p1\nendin\n\ninstr 11\n  print p1\nendin\n\ninstr example1\n  printf \"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; example1 \\n\", 1\n  schedule 1, 0, 0.5\n  schedule 2, 0.5, 0.1\n  schedule 10.150, 0, 0.1\n  schedule 11, 0, 2\n  turnoff\nendin\n\n; --------------------------------------\n; Test that instances get recycled\ninstr example2\n  prints \"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; example2 \\n\"\n  i0 = 0\n  istep = 0.01\n  imaxinstances = 100\n  idur = istep * imaxinstances\n  while i0 &lt; 1000 do\n    schedule \"scheduniq\", i0*istep, idur, 20, imaxinstances\n    i0 += 1\n  od\n  imaxdur = 2000 * istep + idur\n  turnoff\nendin\n\ninstr scheduniq\n  inum = p4\n  imax = p5\n  inum2 = uniqinstance(inum, imax)\n  if inum2 &lt; 0 then\n    prints \"&lt;&lt;&lt;&lt;&lt; Could not find unique instance &gt;&gt;&gt;&gt;&gt;\\n\"\n  else\n    schedule inum2, 0, p3\n    prints \"active now=%d, inum=%f \\n\", active(inum), inum2\n  endif\n  turnoff\nendin\n\ninstr 20\n  prints \"started %f\\n\", p1\n  defer \"prints\", \"finished %f \\n\", p1\nendin\n\n; -----------------------\n; Text what happens if called with a non-existent instr\ninstr example3\n    inum = uniqinstance(234)\n    print inum\n    turnoff\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\n; i \"example1\" 0 10 \n; i \"example2\" 0 10\ni \"example3\" 0 0.1\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/uniqinstance.html#see-also","title":"See also","text":"<ul> <li>pread</li> <li>pset</li> <li>p</li> <li>passign</li> <li>nstrnum</li> </ul>"},{"location":"opcodes/uniqinstance.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2019</p>"},{"location":"opcodes/vowelsdb.html","title":"vowelsdb","text":""},{"location":"opcodes/vowelsdb.html#abstract","title":"Abstract","text":"<p>A database of vowel sounds</p>"},{"location":"opcodes/vowelsdb.html#description","title":"Description","text":"<p><code>vowelsdb</code> provides a list of speaker definitions with formant frequencies, bandwidths and amplitudes for the first 5 formants. It includes all the speaker definitions found in the csound manual plus speakers from other sources, such as praat and VocalTractLab (vtl).</p> <p>The user requests formant data from a given speaker and a selection of vowels and the opcode returns three 2D arrays: frequencies, bandwidths and amplitudes. Each row contains the information for the corrsponding vowel and has always a  size of 5, corresponding to the first 5 formants. The number of rows is the same as the number of vowels queried.</p> <p>Even if the generated arrays can be k-arrays, the opcode only works at init time  (similar to how <code>fillarray</code> works for k-arrays)</p> <p>Speakers available:</p> <pre><code>* csound-soprano\n* csound-alto\n* csound-countertenor\n* csound-tenor\n* csound-bass\n* vtl-male\n* vtl-female\n</code></pre> <p>Vowels (not all speakers define all vowels): a, e, i, o, u, ae, oe, y</p>"},{"location":"opcodes/vowelsdb.html#syntax","title":"Syntax","text":"<pre><code>ifreqs[][], ibandwidths[][], iamps[][] vowelsdb Sspeakername, Svowels\nkfreqs[][], kbandwidths[][], kamps[][] vowelsdb Sspeakername, Svowels\n</code></pre>"},{"location":"opcodes/vowelsdb.html#arguments","title":"Arguments","text":"<ul> <li>Sspeakername: one of the available speaker names. At thethe x coordinate of the cursor</li> <li>Svowels: the vowels to retrieve from the database, as a space delimited list (for example: \"a e i o u\")     The order is important, since each row in the returned data arrays corresponds to each vowel given, in     the order given. In the case of \"a e i o u\", the first row in the <code>ifreqs</code> array would hold the     frequencies of the first five formants of 'a'.</li> </ul>"},{"location":"opcodes/vowelsdb.html#output","title":"Output","text":"<ul> <li>ifreqs / kfreqs: a 2D array, where each row holds the frequencies of the first five      formants for the corresponding vowel (there are as many rows as vowels in Svowels)</li> <li>ibandwidths / kbandwidths: a 2D array were each row holds the bandwidths of the     first five formants for the corresponding vowel</li> <li>iamps / kamps: a 2D array were each row holds the amplitudes of the     first five formants for the corresponding vowel (NB: these amplitudes     are already converted to linear amplitudes and are not in dB)</li> </ul>"},{"location":"opcodes/vowelsdb.html#see-also","title":"See Also","text":"<ul> <li>presetinterp</li> <li>weightedsum</li> <li>fof2</li> <li>Csound Formant tables</li> </ul>"},{"location":"opcodes/vowelsdb.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n--nosound\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\nsr     = 44100\nksmps  = 64\nnchnls = 2\n0dbfs  = 1\n\ninstr 1\n    ifreqs[][], ibws[][], iamps[][] vowelsdb \"csound-tenor\", \"a e i o   u\"\n    printarray ifreqs, \"%d\", \"ifreqs =\"\n    printarray ibws, \"%d\", \"ibws =\"\n    printarray iamps, \"\", \"iamps =\"\nendin\n\ninstr 2\n    kfreqs[][], kbws[][], kamps[][] vowelsdb \"csound-bass\", \"a e i o   u\"\n    println \"kfreqs =\"\n    printarray kfreqs\n    println \"kbws =\"\n    printarray kbws\n    println \"kamps =\"\n    printarray kamps\n    turnoff\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\ni1 0 0.1\ni2 0 0.1\n; f0 3600\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre> <pre><code>new alloc for instr 1:\nifreqs =\n   0: 650 1080 2650 2900 3250\n   1: 400 1700 2600 3200 3580\n   2: 290 1870 2800 3250 3540\n   3: 400 800 2600 2800 3000\n   4: 350 600 2700 2900 3300\nibws =\n   0: 80 90 120 130 140\n   1: 70 80 100 120 120\n   2: 40 90 100 120 120\n   3: 70 80 100 130 135\n   4: 40 60 100 120 120\niamps =\n   0: 1.0001 0.5012 0.4467 0.3981 0.0794\n   1: 1.0001 0.1995 0.2512 0.1995 0.1000\n   2: 1.0001 0.1778 0.1259 0.1000 0.0316\n   3: 1.0001 0.3162 0.2512 0.2512 0.0501\n   4: 1.0001 0.1000 0.1413 0.1995 0.0501\nnew alloc for instr 2:\nkfreqs =\n   0: 600.0000 1040.0000 2250.0000 2450.0000 2750.0000\n   1: 400.0000 1620.0000 2400.0000 2800.0000 3100.0000\n   2: 250.0000 1750.0000 2600.0000 3050.0000 3340.0000\n   3: 400.0000 750.0000 2400.0000 2600.0000 2900.0000\n   4: 350.0000 600.0000 2400.0000 2675.0000 2950.0000\nkbws =\n   0: 60.0000 70.0000 110.0000 120.0000 130.0000\n   1: 40.0000 80.0000 100.0000 120.0000 120.0000\n   2: 60.0000 90.0000 100.0000 120.0000 120.0000\n   3: 40.0000 80.0000 100.0000 120.0000 120.0000\n   4: 40.0000 80.0000 100.0000 120.0000 120.0000\nkamps =\n   0: 1.0001 0.4467 0.3548 0.3548 0.1000\n   1: 1.0001 0.2512 0.3548 0.2512 0.1259\n   2: 1.0001 0.0316 0.1585 0.0794 0.0398\n   3: 1.0001 0.2818 0.0891 0.1000 0.0100\n   4: 1.0001 0.1000 0.0251 0.0398 0.0158\n</code></pre>"},{"location":"opcodes/weightedsum.html","title":"weightedsum","text":""},{"location":"opcodes/weightedsum.html#abstract","title":"Abstract","text":"<p>Weighted sum of multiple 1D arrays, or the rows of a 2D array</p>"},{"location":"opcodes/weightedsum.html#description","title":"Description","text":"<p>Given a 2D array, <code>weightedsum</code> takes an array of factors (the weights), one for each row, and multiplies each element in a row by its factor adding all 1D arrays together to produce a weighted sum of such arrays. If the 2D array has a shape <code>(numrows, numcolumns)</code> then the weights array should be a 1D array of size <code>numrows</code> and the output array is also a 1D array of size <code>numcolumns</code>.</p> <p>In the following example <code>weightedsum</code> performs an average between the 2nd and the 4th row, effectively a vowel sound halfway between E and O</p> <p>Notice that the absolute value of the weights is not really important, since these are relative weights. The same result would be achieved with <code>kweights[] fillarray 0, 0.5, 0, 0.5,0</code></p> <pre><code>iformantFreqs[] fillarray 800, 1150, 2900, 3900, 4950, \\  ; A\n                          350, 2000, 2800, 3600, 4950, \\  ; E\n                          270, 2140, 2950, 3900, 4950, \\  ; I\n                          450, 800, 2830, 3800, 4950,  \\  ; O\n                          325, 700, 2700, 3800, 4950      ; U\n\nreshapearray iformantFreqs, 5, 5\nkweights[] fillarray 0, 1, 0, 1, 0\nkformants[] weightedsum iformantFreqs, kweights\n\n-&gt; [400, 1400, 2815, 3700, 4950]\n</code></pre>"},{"location":"opcodes/weightedsum.html#syntax","title":"Syntax","text":"<pre><code>kout[]  weightedsum kmatrix[], kweights[]\nkout[]  weightedsum imatrix[], kweights[]\n</code></pre>"},{"location":"opcodes/weightedsum.html#arguments","title":"Arguments","text":"<ul> <li>kmatrix / imatrix: a 2D array. Each element in a row will be multiplied by the row's     weight (given in <code>kweights</code>) and all rows will be summed together</li> <li>kweights: the weight of each row of <code>kmatrix</code> (normally a value between 0-1). This     should be a 1D array with a size equal to the number of rows in <code>kmatrix</code></li> </ul>"},{"location":"opcodes/weightedsum.html#output","title":"Output","text":"<ul> <li>kout: a 1D array of size <code>numcolumns</code> with the weighted sum of the input array weighted     by the given weights.</li> </ul>"},{"location":"opcodes/weightedsum.html#see-also","title":"See Also","text":"<ul> <li>interp1d</li> </ul>"},{"location":"opcodes/weightedsum.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n-odac\n&lt;/CsOptions&gt;\n&lt;CsInstruments&gt;\n\nsr = 44100\nksmps = 64\nnchnls = 4\n0dbfs = 1\n\ngiformantFreqs[] fillarray 800, 1150, 2900, 3900, 4950, \\  ; A\n                           350, 2000, 2800, 3600, 4950, \\  ; E\n                           270, 2140, 2950, 3900, 4950, \\  ; I\n                           450, 800, 2830, 3800, 4950,  \\  ; O\n                           325, 700, 2700, 3800, 4950      ; U\n\n\n\ngiformantDbs[] fillarray   0, -6, -32, -20, -50, \\\n                           0, -20, -15, -40, -56, \\\n                           0, -12, -26, -26, -44, \\\n                           0, -11, -22, -22, -50, \\\n                           0, -16, -35, -40, -60\n\ngiformantBws[] fillarray   80, 90, 120, 130, 140, \\\n                           60, 100, 120, 150, 200, \\\n                           60, 90, 100, 120, 120, \\\n                           40, 80, 100, 120, 120, \\\n                           50, 60, 170, 180, 200\n\n\ngiformantAmps[] maparray giformantDbs, \"ampdb\"\n\nreshapearray giformantFreqs, 5, 5\nreshapearray giformantAmps, 5, 5\nreshapearray giformantBws, 5, 5\n\ninstr 10\n  kmidi = p4\n  kamp = p5\n  kx = p6\n  ky = p7\n  kmidi = lag:k(kmidi, 0.3)\n\n  kvibfreq linseg 0, 0.3, 0, 2.5, 4.5\n  ivibsemi = 0.1\n  kvib oscil ivibsemi/2, kvibfreq\n  kvib -= ivibsemi / 2\n  kpitch = kmidi + kvib\n  kfreq = lag(mtof(kpitch), 0.2)\n\n  ; asource = mpulse:a(kamp*10, 1/kfreq)\n  asource vco2 kamp, kfreq\n  asource = butterlp:a(asource, 4000)\n\n  ;                   x    y    weight\n  kcoords[] fillarray 0,   0,   1,      \\    ; A\n                      0.5, 0.5, 0.4,    \\    ; E\n                      1,   0,   1,      \\    ; I\n                      0,   1,   1,      \\    ; O\n                      1,   1,   1            ; U\n  kweights[] init 5\n  kformantFreqs[] init 5\n  kformantBws[] init 5\n  kformantAmps[] init 5\n\n  if changed:k(kx, ky) == 1 then\n    kweights presetinterpw kx, ky, kcoords, 0.25\n    printarray kweights\n    kformantFreqs weightedsum giformantFreqs, kweights\n    kformantBws   weightedsum giformantBws, kweights\n    kformantAmps  weightedsum giformantAmps, kweights\n\n  endif\n  kformantFreqs poly 5, \"lag\", kformantFreqs, 0.1\n  kformantAmps poly 5, \"lag\", kformantAmps, 0.1\n\n  aformants[] poly 5, \"resonx\", asource, kformantFreqs, kformantBws, 2, 2\n  ; aformants[] poly 5, \"butterbp\", asource, kformantFreqs, kformantBws\n  aformants *= kformantAmps\n  asum sumarray aformants\n  asum *= a(kamp)\n  asum *= linsegr(0, 0.1, 1, 0.1, 0)\n  ; asum *= 0.1\n  ; dispfft asum, 0.05, 4096\n  dispfft asource, 0.05, 4096\n  outch 1, asum, 3, asource\nendin\n\ninstr 20\n  ip1 = p4\n  kt = timeinsts()\n  kmidi bpf kt, 0, 60, 10, 60, 18, 36\n  kamp = 0.1\n  kradius linseg 0.5, 10, 0.5, 10, 0.1\n  kfreq = 1/10\n  kx = oscil:k(kradius, kfreq)+0.5\n  ky = oscil:k(kradius, kfreq, -1, 3.1415/4)+0.5\n  pwrite ip1, 4, kmidi, 5, kamp, 6, kx, 7, ky\n  if metro(30) == 1 then\n    outvalue \"x\", kx\n    outvalue \"y\", ky\n    outvalue \"note\", mton(round(kmidi*2)/2)\n  endif\nendin\n\nidur = 20\nschedule 10.01, 0, idur, 48, 0.5, 0, 1, 0\nschedule 20, 0, idur, 10.01\n\n&lt;/CsInstruments&gt;\n&lt;CsScore&gt;\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;bsbPanel&gt;\n &lt;label&gt;Widgets&lt;/label&gt;\n &lt;objectName/&gt;\n &lt;x&gt;0&lt;/x&gt;\n &lt;y&gt;0&lt;/y&gt;\n &lt;width&gt;833&lt;/width&gt;\n &lt;height&gt;631&lt;/height&gt;\n &lt;visible&gt;true&lt;/visible&gt;\n &lt;uuid/&gt;\n &lt;bgcolor mode=\"background\"&gt;\n  &lt;r&gt;40&lt;/r&gt;\n  &lt;g&gt;40&lt;/g&gt;\n  &lt;b&gt;40&lt;/b&gt;\n &lt;/bgcolor&gt;\n &lt;bsbObject version=\"2\" type=\"BSBGraph\"&gt;\n  &lt;objectName&gt;graph1&lt;/objectName&gt;\n  &lt;x&gt;5&lt;/x&gt;\n  &lt;y&gt;9&lt;/y&gt;\n  &lt;width&gt;828&lt;/width&gt;\n  &lt;height&gt;313&lt;/height&gt;\n  &lt;uuid&gt;{a386abff-a2e9-4fd5-a2a1-044b268f027e}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;-3&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;value&gt;0&lt;/value&gt;\n  &lt;objectName2/&gt;\n  &lt;zoomx&gt;4.00000000&lt;/zoomx&gt;\n  &lt;zoomy&gt;1.00000000&lt;/zoomy&gt;\n  &lt;dispx&gt;1.00000000&lt;/dispx&gt;\n  &lt;dispy&gt;1.00000000&lt;/dispy&gt;\n  &lt;modex&gt;lin&lt;/modex&gt;\n  &lt;modey&gt;lin&lt;/modey&gt;\n  &lt;showSelector&gt;false&lt;/showSelector&gt;\n  &lt;showGrid&gt;true&lt;/showGrid&gt;\n  &lt;showTableInfo&gt;true&lt;/showTableInfo&gt;\n  &lt;showScrollbars&gt;false&lt;/showScrollbars&gt;\n  &lt;enableTables&gt;false&lt;/enableTables&gt;\n  &lt;enableDisplays&gt;true&lt;/enableDisplays&gt;\n  &lt;all&gt;true&lt;/all&gt;\n &lt;/bsbObject&gt;\n &lt;bsbObject version=\"2\" type=\"BSBController\"&gt;\n  &lt;objectName&gt;x&lt;/objectName&gt;\n  &lt;x&gt;171&lt;/x&gt;\n  &lt;y&gt;332&lt;/y&gt;\n  &lt;width&gt;300&lt;/width&gt;\n  &lt;height&gt;300&lt;/height&gt;\n  &lt;uuid&gt;{f50d2326-9e70-41bf-a9d2-ea39b20ad45b}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;0&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;objectName2&gt;y&lt;/objectName2&gt;\n  &lt;xMin&gt;0.00000000&lt;/xMin&gt;\n  &lt;xMax&gt;1.00000000&lt;/xMax&gt;\n  &lt;yMin&gt;0.00000000&lt;/yMin&gt;\n  &lt;yMax&gt;1.00000000&lt;/yMax&gt;\n  &lt;xValue&gt;0.99604966&lt;/xValue&gt;\n  &lt;yValue&gt;0.54824522&lt;/yValue&gt;\n  &lt;type&gt;point&lt;/type&gt;\n  &lt;pointsize&gt;20&lt;/pointsize&gt;\n  &lt;fadeSpeed&gt;0.00000000&lt;/fadeSpeed&gt;\n  &lt;mouseControl act=\"press\"&gt;jump&lt;/mouseControl&gt;\n  &lt;bordermode&gt;border&lt;/bordermode&gt;\n  &lt;borderColor&gt;#007800&lt;/borderColor&gt;\n  &lt;color&gt;\n   &lt;r&gt;0&lt;/r&gt;\n   &lt;g&gt;234&lt;/g&gt;\n   &lt;b&gt;0&lt;/b&gt;\n  &lt;/color&gt;\n  &lt;randomizable mode=\"both\" group=\"0\"&gt;false&lt;/randomizable&gt;\n  &lt;bgcolor&gt;\n   &lt;r&gt;0&lt;/r&gt;\n   &lt;g&gt;80&lt;/g&gt;\n   &lt;b&gt;0&lt;/b&gt;\n  &lt;/bgcolor&gt;\n  &lt;bgcolormode&gt;true&lt;/bgcolormode&gt;\n &lt;/bsbObject&gt;\n &lt;bsbObject version=\"2\" type=\"BSBDisplay\"&gt;\n  &lt;objectName&gt;note&lt;/objectName&gt;\n  &lt;x&gt;96&lt;/x&gt;\n  &lt;y&gt;332&lt;/y&gt;\n  &lt;width&gt;64&lt;/width&gt;\n  &lt;height&gt;36&lt;/height&gt;\n  &lt;uuid&gt;{ede113aa-8dda-4374-ab74-995b45a818df}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;-3&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;label&gt;4C&lt;/label&gt;\n  &lt;alignment&gt;left&lt;/alignment&gt;\n  &lt;valignment&gt;center&lt;/valignment&gt;\n  &lt;font&gt;Liberation Sans&lt;/font&gt;\n  &lt;fontsize&gt;16&lt;/fontsize&gt;\n  &lt;precision&gt;3&lt;/precision&gt;\n  &lt;color&gt;\n   &lt;r&gt;255&lt;/r&gt;\n   &lt;g&gt;255&lt;/g&gt;\n   &lt;b&gt;255&lt;/b&gt;\n  &lt;/color&gt;\n  &lt;bgcolor mode=\"background\"&gt;\n   &lt;r&gt;24&lt;/r&gt;\n   &lt;g&gt;24&lt;/g&gt;\n   &lt;b&gt;24&lt;/b&gt;\n  &lt;/bgcolor&gt;\n  &lt;bordermode&gt;false&lt;/bordermode&gt;\n  &lt;borderradius&gt;5&lt;/borderradius&gt;\n  &lt;borderwidth&gt;0&lt;/borderwidth&gt;\n &lt;/bsbObject&gt;\n &lt;bsbObject version=\"2\" type=\"BSBLabel\"&gt;\n  &lt;objectName/&gt;\n  &lt;x&gt;50&lt;/x&gt;\n  &lt;y&gt;336&lt;/y&gt;\n  &lt;width&gt;43&lt;/width&gt;\n  &lt;height&gt;26&lt;/height&gt;\n  &lt;uuid&gt;{1b1e8fcb-efcc-4236-a315-e07e13fafec0}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;-3&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;label&gt;Pitch&lt;/label&gt;\n  &lt;alignment&gt;right&lt;/alignment&gt;\n  &lt;valignment&gt;center&lt;/valignment&gt;\n  &lt;font&gt;Liberation Sans&lt;/font&gt;\n  &lt;fontsize&gt;12&lt;/fontsize&gt;\n  &lt;precision&gt;3&lt;/precision&gt;\n  &lt;color&gt;\n   &lt;r&gt;239&lt;/r&gt;\n   &lt;g&gt;239&lt;/g&gt;\n   &lt;b&gt;239&lt;/b&gt;\n  &lt;/color&gt;\n  &lt;bgcolor mode=\"nobackground\"&gt;\n   &lt;r&gt;255&lt;/r&gt;\n   &lt;g&gt;255&lt;/g&gt;\n   &lt;b&gt;255&lt;/b&gt;\n  &lt;/bgcolor&gt;\n  &lt;bordermode&gt;false&lt;/bordermode&gt;\n  &lt;borderradius&gt;1&lt;/borderradius&gt;\n  &lt;borderwidth&gt;0&lt;/borderwidth&gt;\n &lt;/bsbObject&gt;\n &lt;bsbObject version=\"2\" type=\"BSBScope\"&gt;\n  &lt;objectName/&gt;\n  &lt;x&gt;483&lt;/x&gt;\n  &lt;y&gt;332&lt;/y&gt;\n  &lt;width&gt;350&lt;/width&gt;\n  &lt;height&gt;150&lt;/height&gt;\n  &lt;uuid&gt;{735224e3-fc71-454b-9aee-f857e8ea1b89}&lt;/uuid&gt;\n  &lt;visible&gt;true&lt;/visible&gt;\n  &lt;midichan&gt;0&lt;/midichan&gt;\n  &lt;midicc&gt;-3&lt;/midicc&gt;\n  &lt;description/&gt;\n  &lt;value&gt;3.00000000&lt;/value&gt;\n  &lt;type&gt;scope&lt;/type&gt;\n  &lt;zoomx&gt;8.00000000&lt;/zoomx&gt;\n  &lt;zoomy&gt;2.00000000&lt;/zoomy&gt;\n  &lt;dispx&gt;1.00000000&lt;/dispx&gt;\n  &lt;dispy&gt;1.00000000&lt;/dispy&gt;\n  &lt;mode&gt;0.00000000&lt;/mode&gt;\n  &lt;triggermode&gt;TriggerUp&lt;/triggermode&gt;\n &lt;/bsbObject&gt;\n&lt;/bsbPanel&gt;\n&lt;bsbPresets&gt;\n&lt;/bsbPresets&gt;\n</code></pre>"},{"location":"opcodes/zeroarray.html","title":"zeroarray","text":""},{"location":"opcodes/zeroarray.html#abstract","title":"Abstract","text":"<p>Zero all elements in an array</p>"},{"location":"opcodes/zeroarray.html#description","title":"Description","text":"<p><code>zeroarray</code> sets all elements in an array to 0. </p> <p>In the case of an audio array it is possible to pass a mask array of the same size  as the audio array indicating which audio items in the array need to be zeroed (only those audio items  will be zeroed for which the corresponding scalar item in the mask array is higher than 0). The mask can also be a table</p>"},{"location":"opcodes/zeroarray.html#syntax","title":"Syntax","text":"<pre><code>zeroarray iArr[]\nzeroarray kArr[]\nzeroarray aArr[] [, kMask[]]\nzeroarray aArr[], imasktable=0\n</code></pre>"},{"location":"opcodes/zeroarray.html#arguments","title":"Arguments","text":"<ul> <li>iArr / kArr / aArr: The array to zero</li> </ul>"},{"location":"opcodes/zeroarray.html#output","title":"Output","text":""},{"location":"opcodes/zeroarray.html#execution-time","title":"Execution Time","text":"<ul> <li>Init </li> <li>Performance</li> </ul>"},{"location":"opcodes/zeroarray.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n; -odac\n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\n\n/*\n\nDescription\n===========\n\nzeroarr zeroes all elements in an array of any (numeric) kind\n\nSyntax\n======\n\n    zeroarr karr\n    zeroarr arr\n\n*/\n\nksmps = 32\nnchnls = 8\n0dbfs  = 1\n\ngabuses[] init 4\n\ninstr 10\n    asig vco2 0.1, 1000\n    gabuses[0] = gabuses[0] + asig\nendin\n\ninstr 20\n    asig = gabuses[0]\n    outch 1, asig\n    zeroarray gabuses\nendin\n\ninstr 30\n    ; test masked zeroying\n    kfreqs[] fillarray 200, 300, 400, 500, 600, 700, 800, 900\n    asigs[] poly 8, \"oscili\", 0.1, kfreqs\n    ; imask[] fillarray 0, 0, 1, 0, 1, 0, 0, 0\n    imask ftfill 0, 0, 1, 0, 1, 0, 0, 0\n    zeroarray asigs, imask\n    out asigs\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\n\n; i 10 0 10\n; i 20 0 10\ni 30 0 10\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/zeroarray.html#see-also","title":"See also","text":"<ul> <li>ftset</li> <li>setslice</li> <li>ftslice</li> </ul>"},{"location":"opcodes/zeroarray.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2021 (masked version 2022)</p>"},{"location":"opcodes/zerocrossing.html","title":"zerocrossing","text":""},{"location":"opcodes/zerocrossing.html#abstract","title":"Abstract","text":"<p>Outputs a frequency based on the number of zero-crossings per second.</p>"},{"location":"opcodes/zerocrossing.html#description","title":"Description","text":"<p><code>zerocrossing</code> outputs a frequency based upon the distance between interceptions of the X axis.  The X intercepts are determined via linear interpolation so this gives better than just integer  wavelength resolution. This is a very crude pitch follower, but can be useful in some situations.</p> <p><code>zerocrossing</code> is a port of supercollider's ZeroCrossing ugen. </p>"},{"location":"opcodes/zerocrossing.html#syntax","title":"Syntax","text":"<pre><code>afreq zerocrossing asig\n</code></pre>"},{"location":"opcodes/zerocrossing.html#arguments","title":"Arguments","text":"<ul> <li>asig: The audio signal</li> </ul>"},{"location":"opcodes/zerocrossing.html#output","title":"Output","text":"<ul> <li>afreq: The zero-crossing frequency</li> </ul>"},{"location":"opcodes/zerocrossing.html#execution-time","title":"Execution Time","text":"<ul> <li>Performance</li> </ul>"},{"location":"opcodes/zerocrossing.html#examples","title":"Examples","text":"<pre><code>&lt;CsoundSynthesizer&gt;\n&lt;CsOptions&gt;\n-odac           \n&lt;/CsOptions&gt;\n\n&lt;CsInstruments&gt;\nsr     = 44100\nksmps  = 64\nnchnls = 2\n0dbfs  = 1\n\n/* Example file for zerocrossing\n\nafreq zerocrossing asig\n\n  Outputs a frequency based upon the distance between interceptions of the X axis.\n  The X intercepts are determined via linear interpolation so this gives better \n  than just integer wavelength resolution. This is a very crude pitch follower, \n  but can be useful in some situations.\n\n  zerocrossing is a port of supercollider's ZeroCrossing ugen\n*/\n\ninstr 1\n  kfreq line 500, p3, 600\n  asin = oscili:a(0.1, kfreq)\n  anoise = pinker()\n  ksource = bpf(timeinsts(), 0, 0, p3*0.5, 0, p3*0.51, 1, p3, 1)\n  asig = asin*(1-ksource) + anoise * ksource  \n  acrossings zerocrossing asig\n  kcrossings = k(acrossings)\n  aresynth = oscili:a(0.1, kcrossings)\n  kisnoise = lagud(kcrossings &gt; 1000 ? 1 : 0, 0.001, 0.1) \n  outs asig, aresynth * (1 - kisnoise)\n\n  println \"kfreq: %.1f, zero-crossings: %.1f, noise detected: %d\", kfreq, kcrossings, kisnoise\nendin\n\n&lt;/CsInstruments&gt;\n\n&lt;CsScore&gt;\ni1 0 3\n\n&lt;/CsScore&gt;\n&lt;/CsoundSynthesizer&gt;\n</code></pre>"},{"location":"opcodes/zerocrossing.html#see-also","title":"See also","text":"<ul> <li>schmitt</li> <li>trighold</li> </ul>"},{"location":"opcodes/zerocrossing.html#credits","title":"Credits","text":"<p>Eduardo Moguillansky, 2022</p>"},{"location":"opcodes/zerocrossing.html#metadata","title":"Metadata","text":"<ul> <li>Author: Eduardo Moguillansky</li> <li>Year: 2022</li> <li>Plugin: else</li> <li>Source: https://github.com/csound-plugins/csound-plugins/blob/master/src/else/src/else.c</li> </ul>"}]}