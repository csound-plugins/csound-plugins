name: Build And Publish
on: push
jobs:
  buildmacuniversal:
    name: Build plugins for mac, ${{ matrix.csound-branch }}
    runs-on: macos-latest
    strategy:
      matrix:
        csound-branch: ["csound6", "develop"]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: setup csound
        run: |
          git submodule update --init --recursive
          cd csound
          git switch ${{ matrix.csound-branch }}

      - name: build
        run: |
          set -x
          # brew install libsndfile
          # brew install fluidsynth

          ln -s csound/Android/CsoundAndroid/jni/version.h csound/include

          rm -fr build && mkdir build && cd build

          if [[ ${{ matrix.csound-branch }} == csound6 ]]; then
            APIVERSION=6.0
            APIMAJOR=6
          else
            APIVERSION=7.0
            APIMAJOR=7
          fi
          echo "APIVERSIO = $APIVERSION"
          cmake -DSKIP_FAST_MATH=True -DBUILD_JSUSFX_OPCODES=OFF -DBUILD_SNDMETA_OPCODES=OFF -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" -DAPIVERSION=$APIVERSION ..
          cmake --build . --parallel

          cd ..
          mkdir -p artifacts
          cp build/*.dylib artifacts
          cp assets/README.txt artifacts

          if [ -f scripts/macos-codesign.py ]; then
            cp scripts/macos-codesign.py artifacts
          fi

          # Make zip for release
          ARCHIVE=plugins-csound$APIMAJOR-macos-universal.zip
          7z a $ARCHIVE artifacts/*
          mv $ARCHIVE artifacts

      - uses: actions/upload-artifact@v4
        if: matrix.csound-branch == 'csound6'
        with:
          name: plugins-csound6-macos-universal
          path: artifacts/*

      - uses: actions/upload-artifact@v4
        if: matrix.csound-branch == 'develop'
        with:
          name: plugins-csound7-macos-universal
          path: artifacts/*

  buildjob7:
    name: Build plugins on ${{ matrix.os }} (csound 7)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2019, ubuntu-22.04]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Checkout submodules
        run: |
          git submodule update --init --recursive
          cd csound
          git switch develop

      - name: windows build - csound 7
        if: runner.os == 'windows'
        run: |
          # where.exe vcpkg
          # $VCPKG_ROOT/vcpkg integrate install
          # vcpkg integrate install
          # $VCPKG_ROOT/vcpkg install libsndfile:x64-windows

          #vcpkg install libsndfile:x64-windows

          choco install libsndfile
          # choco install fluidsynth

          git submodule update --init --recursive --remote
          git submodule status --recursive

          cd csound
          git switch develop
          Copy-Item "Android/CsoundAndroid/jni/version.h" -Destination "include"
          cd ..

          Remove-Item -Recurse -Force build -ErrorAction Ignore
          mkdir build
          cd build

          # cmake -A x64 -DBUILD_JSUSFX_OPCODES=OFF -DCMAKE_TOOLCHAIN_FILE="C:\vcpkg\scripts\buildsystems\vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-windows ..

          cmake -A x64 -DBUILD_JSUSFX_OPCODES=OFF -DBUILD_SNDMETA_OPCODES=OFF \DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake" -DAPIVERSION="7.0" -DVCPKG_TARGET_TRIPLET=x64-windows ..
          cmake --build . --parallel --config Release
          cd ..
          ls build/Release

          rm -ErrorAction Ignore Release/FLAC.dll, Release/ogg.dll, Release/opus.dll, Release/sndfile.dll, Release/vorbis*

          New-Item artifacts -ItemType Directory -ea 0
          Copy-Item -Path "build/Release/*.dll" -Destination "artifacts"
          Copy-Item "assets/README.txt" -Destination "artifacts"
          ls artifacts

          set-variable -name ARCHIVE -value "plugins-csound7-windows.zip"
          rm $ARCHIVE -ErrorAction Ignore
          7z a $ARCHIVE artifacts/*
          mv $ARCHIVE artifacts

      - name: linux build, csound 7
        if: runner.os == 'linux'
        run: |
          sudo apt-get install libsndfile1-dev
          sudo apt-get install nasm
          # sudo apt-get install libfluidsynth-dev

          git submodule update --init --recursive --remote
          git submodule status --recursive

          cd csound
          git switch develop
          ln -s Android/CsoundAndroid/jni/version.h ./include
          cd ..

          rm -fr build && mkdir build && cd build

          # cmake -DSKIP_FAST_MATH=True ..
          cmake -DAPIVERSION=7.0 ..
          cmake --build . --parallel

          ls

          cd ..
          mkdir -p artifacts
          cp build/*.so artifacts
          cp assets/README.txt artifacts

          # Make zip for release
          ARCHIVE=plugins-csound7-linux.zip
          7z a $ARCHIVE artifacts/*
          mv $ARCHIVE artifacts

      - uses: actions/upload-artifact@v4
        with:
          name: plugins-csound7-${{ runner.os }}
          path: artifacts/*

  buildjob6:
    name: Build plugins on ${{ matrix.os }} (csound 6)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2019, ubuntu-22.04]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Checkout submodules
        run: |
          git submodule update --init --recursive
          cd csound
          git switch csound6

      - name: linux build
        if: runner.os == 'linux'
        run: |
          sudo apt update
          sudo apt-get install libsndfile1-dev
          sudo apt-get install nasm
          # sudo apt-get install libfluidsynth-dev

          git submodule update --init --recursive --remote
          git submodule status --recursive

          cd csound
          git switch csound6
          cd include
          ln -s ../Android/CsoundAndroid/jni/version.h .
          cd ../..

          rm -fr build && mkdir build && cd build

          # cmake -DSKIP_FAST_MATH=True ..
          cmake -DAPIVERSION=6.0 ..
          cmake --build . --parallel

          cd ..
          mkdir -p artifacts
          cp build/*.so artifacts
          cp assets/README.txt artifacts

          ARCHIVE=plugins-csound6-linux.zip
          7z a $ARCHIVE artifacts/*
          mv $ARCHIVE artifacts

      # Windows: Restore from cache the previously built ports.
      # If cache-miss, download and build vcpkg (aka "bootstrap vcpkg").
      #- name: Restore from cache and install vcpkg
      #  if: runner.os == 'windows'
      #  # Download and build vcpkg, without installing any port. If content is cached already, it is a no-op.
      #  uses: lukka/run-vcpkg@v6
      #  with:
      #    vcpkgArguments: libsndfile:x64-windows  # fluidsynth:x64-windows
      #    vcpkgTriplet: x64-windows
      #    vcpkgGitCommitId: "0bf3923f9fab4001c00f0f429682a0853b5749e0"
      #    # setupOnly: true

      - name: windows build
        if: runner.os == 'windows'
        run: |
          # where.exe vcpkg
          # $VCPKG_ROOT/vcpkg integrate install
          # vcpkg integrate install
          # $VCPKG_ROOT/vcpkg install libsndfile:x64-windows

          #vcpkg install libsndfile:x64-windows

          choco install libsndfile
          # ls "${ENV:PROGRAMFILES}\libsndfile\include"
          # choco install fluidsynth

          git submodule update --init --recursive --remote
          # git submodule foreach git pull origin master
          git submodule status --recursive
          echo "Finished submodules"

          # Copy-Item "Android/CsoundAndroid/jni/version.h" -Destination "csound/include"

          ls
          Remove-Item -Recurse -Force build -ErrorAction Ignore
          mkdir build
          cd build

          # cmake -A x64 -DBUILD_JSUSFX_OPCODES=OFF -DCMAKE_TOOLCHAIN_FILE="C:\vcpkg\scripts\buildsystems\vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-windows ..

          echo "Listing VCPKG_ROOT: $env:VCPKG_ROOT"
          ls "$VCPKG_ROOT" -recurse

          cmake -A x64 -DBUILD_JSUSFX_OPCODES=OFF -DBUILD_SNDMETA_OPCODES=OFF \DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-windows ..
          cmake --build . --parallel --config Release
          cd ..
          ls build/Release

          # rm -ErrorAction Ignore Release/FLAC.dll, Release/ogg.dll, Release/opus.dll, Release/sndfile.dll, Release/vorbis*

          New-Item artifacts -ItemType Directory -ea 0
          Copy-Item -Path "build/Release/*.dll" -Destination "artifacts"
          Copy-Item "assets/README.txt" -Destination "artifacts"
          ls artifacts

          set-variable -name ARCHIVE -value "plugins-csound6-windows.zip"
          rm $ARCHIVE -ErrorAction Ignore
          7z a $ARCHIVE artifacts/*
          mv $ARCHIVE artifacts

      - uses: actions/upload-artifact@v4
        with:
          name: plugins-csound6-${{ runner.os }}
          path: artifacts/*

  publish:
    name: Publish artifacts as a Pre-Release
    # if: contains(github.ref, 'tags/v')
    needs: [buildjob6, buildjob7, buildmacuniversal]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Load Release URL File from release job
        uses: actions/download-artifact@v4.1.7
        with:
          pattern: plugins*
          path: plugins

      - name: List files
        run: |
          ls -R

      - name: Publish
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          title: "Development Build"
          prerelease: True
          files: |
            plugins/**/plugins*.zip
