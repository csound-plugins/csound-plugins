name: Test plugins
on: push
jobs:
  macos-test:
    name: Test mac universal plugins, csound ${{ matrix.csound-branch }}
    runs-on: macos-latest
    strategy:
      matrix:
        csound-branch: ["csound6", "develop"]

    steps:
      - uses: actions/checkout@v3

      - name: Install csound 6 from installer
        if: matrix.csound-branch == 'csound6'
        run: |
          curl -L -o csound6.18.dmg https://github.com/csound/csound/releases/download/6.18.1/Csound-MacOS-universal-6.18.1.dmg
          brew install p7zip
          7z x csound6.18.dmg
          cd Csound-universal-6.18.1
          sudo installer -pkg csound-MacOS-universal-6.18.1.pkg -target /
          csound --version
          cd ..

      - name: Install csound 7 from source
        if: matrix.csound-branch == 'develop'
        run: |
          git clone -b develop https://github.com/csound/csound --depth 1
          cd csound
          brew install bison flex libmicrohttpd libogg flac lame libvorbis mpg123 opus libsndfile portaudio fluid-synth libaec libsamplerate aften liblo openblas portmidi
          cmake -B build -DBUILD_TESTS=0 -DCUSTOM_CMAKE="../cmake/csound-custom-macos.cmake"
          cmake --build build --config Release
          sudo cmake --install build
          ldd (which csound)
          csound --version

      - name: Install plugins
        run: |
          set -x
          ls -l

          csound --version
          which csound
          file $(which csound)

          if [[ ${{ matrix.csound-branch }} == csound6 ]]; then
            APIMAJOR=6
          else
            APIMAJOR=7
          fi

          wget "https://github.com/csound-plugins/csound-plugins/releases/download/latest/plugins-csound$APIMAJOR-macos-universal.zip"
          unzip -o plugins-csound$APIMAJOR-macos-universal.zip
          ls -l *.dylib

          PLUGINSDIR="$HOME/Library/csound/$APIMAJOR.0/plugins64"

          mkdir -p "$PLUGINSDIR"
          cp *.dylib $HOME/Library/csound/6.0/plugins64
          if [ -f macos-codesign.py ]; then
            echo "Trying to codesign plugins"
            python macos-codesign.py $PLUGINSDIR/*.dylib
          else
            echo "macos-codesign.py not found, plugins will not be codesigned"
          fi
          csound -z1 2>&1 || echo "\n\n--- finished ---"

      - name: Run tests
        run: |

          bash test/macos-run-tests.sh

      - uses: actions/upload-artifact@v4
        with:
          name: artifacts-macos-universal
          path: artifacts/*

  windows-test-release:
    name: Windows - Test released plugins
    runs-on: windows-latest
    strategy:
      fail-fast: true
      matrix:
        csound-version: ["6", "7"]
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: Install csound from package
        if: matrix.csound-version == '6'
        run: |
          choco install libsndfile
          curl -L -o csound-binaries.zip https://github.com/csound/csound/releases/download/6.18.1/Csound-6.18.1-windows-x64-binaries.zip
          Expand-Archive csound-binaries.zip -DestinationPath "C:\Program Files\csound-binaries"
          [Environment]::SetEnvironmentVariable("PATH", $Env:PATH + ";C:\Program Files\csound-binaries\build\Release", [EnvironmentVariableTarget]::Machine)
          $Env:Path = $Env:Path + ";C:\Program Files\csound-binaries\build\Release"
          Write-Output $Env:PATH

      - name: Install csound 7 from source
        if: matrix.csound-version == '7'
        env:
          VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

        run: |
          git clone -b develop https://github.com/csound/csound --depth 1
          cd csound
          git submodule update --init --recursive

          choco install -y winflexbison3 innosetup
          .\vcpkg\bootstrap-vcpkg.bat
          cmake -B build -S . -DBUILD_TESTS=0 -DUSE_VCPKG=1 -DCUSTOM_CMAKE="./platform/windows/Custom-vs.cmake" -DBUILD_JAVA_INTERFACE=OFF -DBUILD_TESTS=OFF
          cmake --build build --config Release
          New-Item -Type Directory -Force "C:/Program Files/csound"
          cp build/Release/*.exe "C:/Program Files/csound"
          cp build/Release/*.dll "C:/Program Files/csound"
          cp build/Release/*.lib "C:/Program Files/csound"

          $machinePath = [System.Environment]::GetEnvironmentVariable('PATH', 'Machine')
          [System.Environment]::SetEnvironmentVariable("PATH", $machinePath + ";C:/Program Files/csound", [EnvironmentVariableTarget]::Machine)
          $Env:Path = $Env:Path + ";C:/Program Files/csound"

          # Write-Output $Env:PATH
          csound.exe --version

      - name: Download and install plugins
        run: |
          curl -L -o plugins.zip https://github.com/csound-plugins/csound-plugins/releases/download/latest/plugins-csound${{ matrix.csound-version }}-windows.zip
          New-Item -Type Directory -Force "%CSIDL_LOCAL_APPDATA%\csound\${{ matrix.csound-version }}.0\plugins64"
          Expand-Archive plugins.zip -DestinationPath "%CSIDL_LOCAL_APPDATA%\csound\${{ matrix.csound-version }}.0\plugins64"

      - name: Test plugins
        run: |
          $machinePath = [System.Environment]::GetEnvironmentVariable('PATH', 'Machine')
          # [System.Environment]::SetEnvironmentVariable("PATH", $machinePath + ";C:/Program Files/csound", [EnvironmentVariableTarget]::Machine)
          $Env:Path = $Env:Path + ";C:/Program Files/csound"

          csound.exe --version
          New-Item -ItemType directory -Force artifacts
          cd src/beosc/examples
          csound.exe -o beadsynt.flac beadsynt.csd
          cp *.flac ../../../artifacts

  windows-csound6:
    name: Test windows against csound package (csound6)
    runs-on: windows-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: Install csound
        run: |
          choco install libsndfile

          curl -L -o csound-binaries.zip https://github.com/csound/csound/releases/download/6.18.1/Csound-6.18.1-windows-x64-binaries.zip
          Expand-Archive csound-binaries.zip -DestinationPath "C:\Program Files\csound-binaries"
          ls -r "C:\Program Files\csound-binaries"

          # [Environment]::SetEnvironmentVariable("PATH", $Env:PATH + ";C:\Program Files\csound-binaries\build\Release", [EnvironmentVariableTarget]::Machine)
          # $Env:Path = $Env:Path + ";C:\Program Files\csound-binaries\build\Release"
          # Write-Output $Env:PATH
          setx /M PATH "$($env:path);C:\Program Files\csound-binaries\build-Release"
          csound.exe --version

      - name: Build and test plugins
        run: |

          git submodule update --init --recursive --remote
          git submodule status --recursive
          echo "Finished submodules"

          Remove-Item -Recurse -Force build-windows -ErrorAction Ignore
          mkdir build-windows
          cd build-windows

          cmake -DAPIVERSION="6.0" -A x64 -DBUILD_JSUSFX_OPCODES=OFF -DBUILD_SNDMETA_OPCODES=OFF \DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-windows ..
          cmake --build . --parallel --config Release
          cmake --install .
          csound.exe  -z1

          cd ..

          if(!(Test-Path artifacts)) {
              New-Item -ItemType directory -Path artifacts
          }

          cd src/beosc/examples
          csound.exe -o beadsynt.flac beadsynt.csd
          cp *.flac ../../../artifacts

      - uses: actions/upload-artifact@v4
        with:
          name: artifacts-windows-csound6
          path: artifacts/*

  linuxapt:
    name: Test linux against csound package (csound6)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: linux test against csound package
        if: runner.os == 'linux'
        run: |
          set -x

          sudo cp /etc/apt/sources.list /etc/apt/sources.list~
          sudo sed -Ei 's/^# deb-src /deb-src /' /etc/apt/sources.list
          sudo apt-get update

          sudo apt-get install csound libcsnd-dev
          sudo apt-get install libsndfile1-dev nasm

          git submodule update --init --recursive --remote
          git submodule status --recursive

          # cd csound/include
          # ln -s ../Android/CsoundAndroid/jni/version.h .
          # cd ../..

          rm -fr build-linux
          mkdir build-linux
          cd build-linux

          # cmake -DSKIP_FAST_MATH=True ..
          cmake ..
          cmake --build . --parallel
          cmake --install .

          cd ..

          bash test/linux-run-tests.sh

      - uses: actions/upload-artifact@v4
        with:
          name: artifacts-linux-apt
          path: artifacts/*

  linuxgit:
    name: Test linux against csound git, branch ${{ matrix.branch }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # os: [windows-2019, ubuntu-latest, macos-latest]
        os: [ubuntu-22.04]
        branch: ["csound6", "develop"]
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: test
        if: runner.os == 'linux'
        run: |
          set -x

          sudo cp /etc/apt/sources.list /etc/apt/sources.list~
          sudo sed -Ei 's/^# deb-src /deb-src /' /etc/apt/sources.list
          sudo apt-get update

          sudo apt-get build-dep csound
          sudo apt-get install cmake
          REPODIR=csound-${{ matrix.branch }}
          git clone -b ${{ matrix.branch }} https://github.com/csound/csound.git $REPODIR
          cd $REPODIR
          mkdir build && cd build
          cmake ..
          cmake --build . --parallel
          sudo cmake --install .
          sudo ldconfig
          cd ../..

          sudo apt-get install libsndfile1-dev nasm
          # sudo apt-get install libfluidsynth-dev

          git submodule update --init --recursive --remote
          # git submodule foreach git pull origin master --rebase
          git submodule status --recursive
          cd csound
          git switch ${{ matrix.branch }}
          cd ..

          # cd csound/include
          # ln -s ../Android/CsoundAndroid/jni/version.h .
          # cd ../..

          rm -fr build-linux
          mkdir build-linux
          cd build-linux

          if [[ ${{ matrix.branch }} = "csound6" ]]; then
            APIVERSION=6.0
          else
            APIVERSION=7.0
          fi

          echo "APIVERSION: '$APIVERSION'"

          # The install path depends on APIVERSION
          cmake -DSKIP_FAST_MATH=True -DAPIVERSION=$APIVERSION ..
          cmake --build . --parallel
          cmake --install .

          cd ..

          bash test/linux-run-tests.sh

      - uses: actions/upload-artifact@v4
        with:
          name: artifacts-linux-git-${{ matrix.os }}-${{ matrix.branch }}
          path: artifacts/*
